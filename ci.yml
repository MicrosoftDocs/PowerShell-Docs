name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
trigger:
  branches:
    include:
    - live
    - staging
  paths:
    include:
    - reference/**/*
    - build.ps1
    - ci.yml
    - .openpublishing.build.ps1
    - .openpublishing.publish.config.json
    - .openpublishing.redirection.json
    - tests/**/*
    - '**/docfx.json'
    - '**/TOC.yml'
    - '**/toc.yml'
    - '**/*.md'

pr:
  branches:
    include:
    - staging
    - live
  paths:
    include:
    - reference/**/*
    - build.ps1
    - ci.yml
    - .openpublishing.build.ps1
    - .openpublishing.publish.config.json
    - .openpublishing.redirection.json
    - tests/**/*
    - '**/docfx.json'
    - '**/TOC.yml'
    - '**/toc.yml'
    - '**/*.md'

resources:
- repo: self
  clean: true

jobs:
- job:
  displayName: Build PowerShell Docs
  condition: succeeded()
  pool: Hosted VS2017
  steps:
  - powershell: |
      Get-ChildItem Env:\
    displayName: Capture environment

  - powershell: |
      if ((Get-Command pwsh -CommandType Application) -eq $null)
      {
        $destPath = "${env:BUILD_ARTIFACTSTAGINGDIRECTORY}/install-powershell.ps1"
        Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1' -OutFile $destPath
        Unblock-File $destPath
        & $destPath -UseMSI -Quiet
      }
    displayName: Install pwsh if not available

  - pwsh: |
      Install-Module -Name platyPS -Repository PSGallery -Force
    displayName: Install tools

  - pwsh: |
      $(Build.SourcesDirectory)\build.ps1
    displayName: Build

  - pwsh: |
      Compress-Archive -Path "$(Build.SourcesDirectory)\updatablehelp\*" -DestinationPath "$(Build.ArtifactStagingDirectory)\updatablehelp-$(Build.BuildId).zip"
      Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$(Build.ArtifactStagingDirectory)\updatablehelp-$(Build.BuildId).zip"
    displayName: Compress and upload updatable help content

    # We run tests on Windows PowerShell. Changing to PowerShell core would need changes to the tests
  - powershell: |
      Install-Module -Name Pester -Repository PSGallery -Force
      Import-Module "$(Build.SourcesDirectory)/tests/PowerShellDocsTests.psm1" -Force
      Invoke-Test
    displayName: Test

  # Publish Test Results to Azure Pipelines/TFS
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResults.xml'
      searchFolder: '$(Build.SourcesDirectory)'
