### YamlMime:PowershellCmdlet
summary: |-
  Creates or changes the value of a property of an item.
module: Microsoft.PowerShell.Management
notes: |-
  `Set-ItemProperty` is designed to work with the data exposed by any provider. To list the providers
  available in your session, type `Get-PSProvider`. For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe objects to this cmdlet.
outputs:
- name: <xref href="None, System.Management.Automation.PSCustomObject" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet generates a **PSCustomObject** object that represents the item that was changed and its
    new property value, if you specify the **PassThru** parameter.
    Otherwise, this cmdlet does not generate any output.
links:
- text: Clear-ItemProperty
  href: Clear-ItemProperty.yml
- text: Copy-ItemProperty
  href: Copy-ItemProperty.yml
- text: Get-ItemProperty
  href: Get-ItemProperty.yml
- text: Move-ItemProperty
  href: Move-ItemProperty.yml
- text: New-ItemProperty
  href: New-ItemProperty.yml
- text: Remove-ItemProperty
  href: Remove-ItemProperty.yml
- text: Rename-ItemProperty
  href: Rename-ItemProperty.yml
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
syntaxes:
- >-
  Set-ItemProperty [-Path] <String[]> [-Name] <String> [-Value] <Object> [-PassThru] [-Force] [-Filter <String>]

   [-Include <String[]>] [-Exclude <String[]>] [-Credential <PSCredential>]

   [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]
- >-
  Set-ItemProperty [-Path] <String[]> -InputObject <PSObject> [-PassThru] [-Force] [-Filter <String>]

   [-Include <String[]>] [-Exclude <String[]>] [-Credential <PSCredential>]

   [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]
- >-
  Set-ItemProperty -LiteralPath <String[]> [-Name] <String> [-Value] <Object> [-PassThru] [-Force]

   [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Credential <PSCredential>]

   [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]
- >-
  Set-ItemProperty -LiteralPath <String[]> -InputObject <PSObject> [-PassThru] [-Force] [-Filter <String>]

   [-Include <String[]>] [-Exclude <String[]>] [-Credential <PSCredential>]

   [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]
examples:
- title: 'Example 1: Set a property of a file'
  code: |-
    Set-ItemProperty -Path C:\GroupFiles\final.doc -Name IsReadOnly -Value $true
  description: ""
  summary: |+
    This command sets the value of the **IsReadOnly** property of the "final.doc" file to "true".
    It uses **Path** to specify the file, **Name** to specify the name of the property, and the
    **Value** parameter to specify the new value.

    The file is a **System.IO.FileInfo** object and **IsReadOnly** is just one of its properties.
    To see all of the properties, type `Get-Item C:\GroupFiles\final.doc | Get-Member -MemberType
    Property`.

    The `$true` automatic variable represents a value of "TRUE".
    For more information, see [about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md).

- title: 'Example 2: Create a registry entry and value'
  code: |-
    Set-ItemProperty -Path "HKLM:\Software\ContosoCompany" -Name "NoOfEmployees" -Value 823
    Get-ItemProperty -Path "HKLM:\Software\ContosoCompany"

    PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software\contosocompany
    PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software
    PSChildName   : contosocompany
    PSDrive       : HKLM
    PSProvider    : Microsoft.PowerShell.Core\Registry
    NoOfLocations : 2
    NoOfEmployees : 823

    Set-ItemProperty -Path "HKLM:\Software\ContosoCompany" -Name "NoOfEmployees" -Value 824
    Get-ItemProperty -Path "HKLM:\Software\ContosoCompany"

    PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software\contosocompany
    PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\software
    PSChildName   : contosocompany
    PSDrive       : HKLM
    PSProvider    : Microsoft.PowerShell.Core\Registry
    NoOfLocations : 2
    NoOfEmployees : 824
  description: |-
    The first command creates the registry entry.
    It uses **Path** to specify the path of the `HKLM:` drive and the "Software\MyCompany" key.
    The command uses **Name** to specify the entry name and **Value** to specify a value.

    The second command uses the `Get-ItemProperty` cmdlet to see the new registry entry.
    If you use the `Get-Item` or `Get-ChildItem` cmdlets, the entries do not appear because they are
    properties of a key, not items or child items.

    The third command changes the value of the **NoOfEmployees** entry to 824.

    You can also use the `New-ItemProperty` cmdlet to create the registry entry and its value and then
    use `Set-ItemProperty` to change the value.

    For more information about the `HKLM:` drive, type `Get-Help Get-PSDrive`.
    For more information about how to use PowerShell to manage the registry, type `Get-Help Registry`.
  summary: |+
    This example shows how to use `Set-ItemProperty` to create a new registry entry and to assign a
    value to the entry. It creates the "NoOfEmployees" entry in the "ContosoCompany" key in
    `HKLM\Software` key and sets its value to 823.

    Because registry entries are considered to be properties of the registry keys, which are items, you
    use `Set-ItemProperty` to create registry entries, and to establish and change their values.

- title: 'Example 3: Modify an item by using the pipeline'
  code: |-
    Get-ChildItem weekly.txt | Set-ItemProperty -Name IsReadOnly -Value $True
  description: ""
  summary: |+
    These commands show how to use a pipeline operator (`|`) to send an item to `Set-ItemProperty`.

    The first part of the command uses `Get-ChildItem` to get an object that represents the "Weekly.txt"
    file. The command uses a pipeline operator to send the file object to `Set-ItemProperty`.
    The `Set-ItemProperty` command uses the **Name** and **Value** parameters to specify the property
    and its new value.

    This command is equivalent to using the **InputObject** parameter to specify the object that
    `Get-ChildItem` gets.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter is not supported by any providers installed with PowerShell.
    > To impersonate another user, or elevate your credentials when running this cmdlet,
    > use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.yml).

  defaultValue: Current user
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Specifies a filter to qualify the **Path** parameter. The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md)
    provider is the only installed PowerShell provider that supports the use of filters. You can find
    the syntax for the **FileSystem** filter language in [about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md).
    Filters are more efficient than other parameters, because the provider applies them when the cmdlet
    gets the objects rather than having PowerShell filter the objects after they are retrieved.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user.
    Implementation varies from provider to provider.
    For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the object that has the properties that this cmdlet changes.
    Enter a variable that contains the object or a command that gets the object.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
    typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
    it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
    as escape sequences.

    For more information, see [about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath, LP
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the property.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: PSProperty
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object that represents the item property.
    By default, this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the path of the items with the property to modify.
    Wildcard characters are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Win32.RegistryValueKind" data-throw-if-not-resolved="False" />
  name: Type
  description: |+
    **Type** is a dynamic parameter that the Registry provider adds to the `Set-ItemProperty` cmdlet.
    This parameter only works in the registry drives.

    Specifies the type of property that this cmdlet adds.
    The acceptable values for this parameter are:

    - **String**: Specifies a null-terminated string. Equivalent to **REG_SZ**.
    - **ExpandString**: Specifies a null-terminated string that contains unexpanded references to
      environment variables that are expanded when the value is retrieved. Equivalent to
      **REG_EXPAND_SZ**.
    - **Binary**: Specifies binary data in any form. Equivalent to **REG_BINARY**.
    - **DWord**: Specifies a 32-bit binary number. Equivalent to **REG_DWORD**.
    - **MultiString**: Specifies an array of null-terminated strings terminated by two null characters.
      Equivalent to **REG_MULTI_SZ**.
    - **Qword**: Specifies a 64-bit binary number. Equivalent to **REG_QWORD**.
    - **Unknown**: Indicates an unsupported registry data type, such as **REG_RESOURCE_LIST**.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Value
  isRequired: true
  description: |+
    Specifies the value of the property.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Set-ItemProperty
name: Set-ItemProperty
description: |-
  The `Set-ItemProperty` cmdlet changes the value of the property of the specified item.
  You can use the cmdlet to establish or change the properties of items.
  For example, you can use `Set-ItemProperty` to set the value of the **IsReadOnly** property of a
  file object to `$True`.

  You also use `Set-ItemProperty` to create and change registry values and data.
  For example, you can add a new registry entry to a key and establish or change its value.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 5/14/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/set-itemproperty?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-ItemProperty
