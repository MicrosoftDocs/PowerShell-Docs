### YamlMime:PowershellCmdlet
summary: |-
  Writes new content or replaces existing content in a file.
module: Microsoft.PowerShell.Management
notes: |-
  - You can also refer to `Set-Content` by its built-in alias, `sc`.
    For more information, see [about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).
  - `Set-Content` is designed for string processing. If you pipe non-string objects to `Set-Content`,
    it converts the object to a string before writing it. To write objects to files, use `Out-File`.
  - The `Set-Content` cmdlet is designed to work with the data exposed by any provider. To list the
    providers available in your session, type `Get-PsProvider`. For more information, see
    [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe an object that contains the new value for the item to `Set-Content`.
outputs:
- name: <xref href="None or System.String" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, `Set-Content` generates a **System.String** object that
    represents the content. Otherwise, this cmdlet does not generate any output.
links:
- text: about_Aliases
  href: ../Microsoft.PowerShell.Core/About/about_Aliases.md
- text: about_Automatic_Variables.md
  href: ../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
- text: Add-Content
  href: Add-Content.yml
- text: Clear-Content
  href: Clear-Content.yml
- text: Get-ChildItem
  href: Get-ChildItem.yml
- text: Get-Content
  href: Get-Content.yml
- text: ForEach-Object
  href: ../Microsoft.PowerShell.Core/ForEach-Object.yml
- text: New-Item
  href: New-Item.yml
syntaxes:
- >-
  Set-Content [-Path] <string[]> [-Value] <Object[]> [-PassThru] [-Filter <string>]

   [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>]

   [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [-Stream <string>]

   [<CommonParameters>]
- >-
  Set-Content [-Value] <Object[]> -LiteralPath <string[]> [-PassThru] [-Filter <string>]

   [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>]

   [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [-Stream <string>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Replace the contents of multiple files in a directory'
  code: |-
    Get-ChildItem -Path .\Test*.txt

    Test1.txt
    Test2.txt
    Test3.txt

    Set-Content -Path .\Test*.txt -Value 'Hello, World'
    Get-Content -Path .\Test*.txt

    Hello, World
    Hello, World
    Hello, World
  description: |-
    The `Get-ChildItem` cmdlet uses the **Path** parameter to list **.txt** files that begin with
    `Test*` in the current directory. The `Set-Content` cmdlet uses the **Path** parameter to specify
    the `Test*.txt` files. The **Value** parameter provides the text string **Hello, World** that
    replaces the existing content in each file. The `Get-Content` cmdlet uses the **Path** parameter to
    specify the `Test*.txt` files and displays each file's content in the PowerShell console.
  summary: |+
    This example replaces the content for multiple files in the current directory.

- title: 'Example 2: Create a new file and write content'
  code: |-
    Set-Content -Path .\DateTime.txt -Value (Get-Date)
    Get-Content -Path .\DateTime.txt

    1/30/2019 09:55:08
  description: |-
    `Set-Content` uses the **Path** and **Value** parameters to create a new file named **DateTime.txt**
    in the current directory. The **Value** parameter uses `Get-Date` to get the current date and time.
    `Set-Content` writes the **DateTime** object to the file as a string. The `Get-Content` cmdlet uses
    the **Path** parameter to display the content of **DateTime.txt** in the PowerShell console.
  summary: |+
    This example creates a new file and writes the current date and time to the file.

- title: 'Example 3: Replace text in a file'
  code: |-
    Get-Content -Path .\Notice.txt

    Warning
    Replace Warning with a new word.
    The word Warning was replaced.

    (Get-Content -Path .\Notice.txt) |
        ForEach-Object {$_ -Replace 'Warning', 'Caution'} |
            Set-Content -Path .\Notice.txt
    Get-Content -Path .\Notice.txt

    Caution
    Replace Caution with a new word.
    The word Caution was replaced.
  description: |-
    The `Get-Content` cmdlet uses the **Path** parameter to specify the **Notice.txt** file in the
    current directory. The `Get-Content` command is wrapped with parentheses so that the command
    finishes before being sent down the pipeline.

    The contents of the **Notice.txt** file are sent down the pipeline to the `ForEach-Object` cmdlet.
    `ForEach-Object` uses the automatic variable `$_` and replaces each occurrence of **Warning** with
    **Caution**. The objects are sent down the pipeline to the `Set-Content` cmdlet. `Set-Content` uses
    the **Path** parameter to specify the **Notice.txt** file and writes the updated content to the
    file.

    The last `Get-Content` cmdlet displays the updated file content in the PowerShell console.
  summary: |+
    This command replaces all instances of word within an existing file.

- title: 'Example 4: Use Filters with Set-Content'
  code: |-
    Set-Content -Path C:\Temp\* -Filter *.txt -Value "Empty"
  description: ""
  summary: |+
    You can specify a filter to the `Set-Content` cmdlet. When using filters to qualify the **Path**
    parameter, you need to include a trailing asterisk (`*`) to indicate the contents of the
    path.

    The following command set the content all `*.txt` files in the `C:\Temp`
    directory to the **Value** empty.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsByteStream
  description: |+
    Specifies that the content should be read as a stream of bytes. This parameter was introduced in
    PowerShell 6.0.

    A warning occurs when you use the **AsByteStream** parameter with the **Encoding** parameter. The
    **AsByteStream** parameter ignores any encoding and the output is returned as a stream of bytes.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter is not supported by any providers installed with PowerShell.
    > To impersonate another user, or elevate your credentials when running this cmdlet,
    > use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Text.Encoding" data-throw-if-not-resolved="False" />
  name: Encoding
  description: |+
    Specifies the type of encoding for the target file. The default value is `utf8NoBOM`.

    Encoding is a dynamic parameter that the FileSystem provider adds to `Set-Content`. This parameter
    works only in file system drives.

    The acceptable values for this parameter are as follows:

    - `ascii`: Uses the encoding for the ASCII (7-bit) character set.
    - `bigendianunicode`: Encodes in UTF-16 format using the big-endian byte order.
    - `oem`: Uses the default encoding for MS-DOS and console programs.
    - `unicode`: Encodes in UTF-16 format using the little-endian byte order.
    - `utf7`: Encodes in UTF-7 format.
    - `utf8`: Encodes in UTF-8 format.
    - `utf8BOM`: Encodes in UTF-8 format with Byte Order Mark (BOM)
    - `utf8NoBOM`: Encodes in UTF-8 format without Byte Order Mark (BOM)
    - `utf32`: Encodes in UTF-32 format.

    Beginning with PowerShell 6.2, the **Encoding** parameter also allows numeric IDs of registered code
    pages (like `-Encoding 1251`) or string names of registered code pages (like
    `-Encoding "windows-1251"`). For more information, see the .NET documentation for
    [Encoding.CodePage](/dotnet/api/system.text.encoding.codepage?view=netcore-2.2).

  defaultValue: UTF8NoBOM
  position: Named
  aliases: ""
  parameterValueGroup: ASCII, BigEndianUnicode, OEM, Unicode, UTF7, UTF8, UTF8BOM, UTF8NoBOM, UTF32
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Specifies a filter to qualify the **Path** parameter. The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md)
    provider is the only installed PowerShell provider that supports the use of filters. You can find
    the syntax for the **FileSystem** filter language in [about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md).
    Filters are more efficient than other parameters, because the provider applies them when the cmdlet
    gets the objects rather than having PowerShell filter the objects after they are retrieved.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the cmdlet to set the contents of a file, even if the file is read-only. Implementation
    varies from provider to provider. For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
    The **Force** parameter does not override security restrictions.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
    typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
    it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
    as escape sequences.

    For more information, see [about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath, LP
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoNewline
  description: |+
    The string representations of the input objects are concatenated to form the output. No spaces or
    newlines are inserted between the output strings. No newline is added after the last output string.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object that represents the content. By default, this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the path of the item that receives the content.
    Wildcard characters are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Stream
  description: |+
    > [!NOTE]
    > This Parameter is only available on Windows.

    Specifies an alternative data stream for content. If the stream does not exist, this cmdlet creates
    it. Wildcard characters are not supported.

    **Stream** is a dynamic parameter that the **FileSystem** provider adds to `Set-Content`. This
    parameter works only in file system drives.

    You can use the `Set-Content` cmdlet to create or update the content of any alternate data stream,
    such as `Zone.Identifier`. However, we do not recommend this as a way to eliminate security checks
    that block files that are downloaded from the Internet. If you verify that a downloaded file is
    safe, use the `Unblock-File` cmdlet.

    This parameter was introduced in PowerShell 3.0.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Value
  isRequired: true
  description: |+
    Specifies the new content for the item.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Set-Content
name: Set-Content
description: |-
  `Set-Content` is a string-processing cmdlet that writes new content or replaces the content in a
  file. `Set-Content` replaces the existing content and differs from the `Add-Content` cmdlet that
  appends content to a file. To send content to `Set-Content` you can use the **Value** parameter on
  the command line or send content through the pipeline.

  If you need to create files or directories for the following examples, see [New-Item](New-Item.yml).
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 12/18/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/set-content?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-Content
