### YamlMime:PowershellCmdlet
summary: |-
  Combines a path and a child path into a single path.
module: Microsoft.PowerShell.Management
notes: |-
  The cmdlets that contain the Path noun (the Path cmdlets) manipulate path names and return the
  names in a concise format that all PowerShell providers can interpret. They are designed for
  use in programs and scripts where you want to display all or part of a path name in a
  particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path
  manipulators.

  You can use the path cmdlets with several providers, including the `FileSystem`, `Registry`, and
  `Certificate` providers.

  This cmdlet is designed to work with the data exposed by any provider.
  To list the providers available in your session, type `Get-PSProvider`.
  For more information, see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains a path to this cmdlet.
outputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns a string that contains the resulting path.
links:
- text: Convert-Path
  href: Convert-Path.yml
- text: Resolve-Path
  href: Resolve-Path.yml
- text: Split-Path
  href: Split-Path.yml
- text: Test-Path
  href: Test-Path.yml
- text: Get-PSProvider
  href: Get-PSProvider.yml
- text: Get-ChildItem
  href: Get-ChildItem.yml
- text: Get-PSDrive
  href: Get-PSDrive.yml
syntaxes:
- >-
  Join-Path [-Path] <String[]> [-ChildPath] <String> [[-AdditionalChildPath] <String[]>] [-Resolve]

   [-Credential <PSCredential>] [<CommonParameters>]
examples:
- title: 'Example 1: Combine a path with a child path'
  code: |-
    PS C:\> Join-Path -Path "path" -ChildPath "childpath"

    path\childpath
  description: |-
    This command uses `Join-Path` to combine a path with a childpath.

    Since the command is executed from the `FileSystem` provider, it provides the `\` delimiter to join the paths.
  summary: ""
- title: 'Example 2: Combine paths that already contain directory separators'
  code: |-
    PS C:\> Join-Path -Path "path\" -ChildPath "\childpath"

    path\childpath
  description: |-
    Existing directory separators `\` and handled so there is only one separator between `Path` and `ChildPath`
  summary: ""
- title: 'Example 3: Display files and folders by joining a path with a child path'
  code: |-
    Join-Path "C:\win*" "System*" -Resolve
  description: |-
    This command displays the files and folders that are referenced by joining the C:\Win\* path and the System\* child path.
    It displays the same files and folders as `Get-ChildItem`, but it displays the fully qualified path to each item.
    In this command, the `Path` and `ChildPath` optional parameter names are omitted.
  summary: ""
- title: 'Example 4: Use Join-Path with the PowerShell registry provider'
  code: |-
    PS HKLM:\> Join-Path -Path System -ChildPath *ControlSet* -Resolve

    HKLM:\System\ControlSet001
    HKLM:\System\CurrentControlSet
  description: |-
    This command displays the registry keys in the `HKLM\System` registry subkey that include `ControlSet`.

    The `Resolve` parameter, attempts to resolve the joined path, including wildcards from the current provider path `HKLM:\`
  summary: ""
- title: 'Example 5: Combine multiple path roots with a child path'
  code: |-
    Join-Path -Path C:, D:, E:, F: -ChildPath New

    C:\New
    D:\New
    E:\New
    F:\New
  description: |-
    This command uses `Join-Path` to combine multiple path roots with a child path.

    > [!NOTE]
    > The Drives specified by `Path` must exist or the join of that entry will fail.
  summary: ""
- title: 'Example 6: Combine the roots of a file system drive with a child path'
  code: |-
    Get-PSDrive -PSProvider filesystem | ForEach-Object {$_.root} | Join-Path -ChildPath "Subdir"

    C:\Subdir
    D:\Subdir
  description: |-
    This command combines the roots of each PowerShell file system drive in the console with the Subdir child path.

    The command uses the `Get-PSDrive` cmdlet to get the PowerShell drives supported by the FileSystem provider.
    The `ForEach-Object` statement selects only the Root property of the `PSDriveInfo` objects and combines it with the specified child path.

    The output shows that the PowerShell drives on the computer included a drive mapped to the C:\Program Files directory.
  summary: ""
- title: 'Example 7: Combine an indefinite number of paths'
  code: |-
    Join-Path a b c d e f g

    a\b\c\d\e\f\g
  description: |-
    The `AdditionalChildPath` parameter allows the joining of an unlimited number of paths.

    In this example, no parameter names are used, thus "a" binds to `Path`, "b" to `ChildPath` and
    "c-g" to `AdditionalChildPath`
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: AdditionalChildPath
  description: |+
    Specifies additional elements to append to the value of the *Path* parameter. The `ChildPath`
    parameter is still mandatory and must be specified as well.

    This parameter is specified with the `ValueFromRemainingArguments` property which enables
    joining an indefinite number of paths.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ChildPath
  isRequired: true
  description: |+
    Specifies the elements to append to the value of the `Path` parameter.
    Wildcards are permitted.
    The `ChildPath` parameter is required, although the parameter name ("ChildPath") is optional.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter is not supported by any providers installed with PowerShell.
    > To impersonate another user, or elevate your credentials when running this cmdlet,
    > use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the main path (or paths) to which the child-path is appended.
    Wildcards are permitted.

    The value of `Path` determines which provider joins the paths and adds the path delimiters.
    The `Path` parameter is required, although the parameter name ("Path") is optional.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Resolve
  description: |+
    Indicates that this cmdlet should attempt to resolve the joined path from the current provider.

    - If wildcards are used, the cmdlet returns all paths that match the joined path.
    - If **no** wildcards are used, the cmdlet will error if the path does not exist.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Join-Path
name: Join-Path
description: |-
  The `Join-Path` cmdlet combines a path and child-path into a single path.
  The provider supplies the path delimiters.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/join-path?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Join-Path
