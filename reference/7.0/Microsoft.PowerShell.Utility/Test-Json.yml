### YamlMime:PowershellCmdlet
summary: |-
  Tests whether a string is a valid JSON document
module: Microsoft.PowerShell.Utility
notes: |-
  The `Test-Json` cmdlet is implemented by using the [NJsonSchema Class](https://github.com/RSuter/NJsonSchema).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a JSON string to `Test-Json`.
outputs:
- name: <xref href="Boolean" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: An Introduction to JavaScript Object Notation (JSON) in JavaScript and .NET
  href: /previous-versions/dotnet/articles/bb299886(v=msdn.10)
- text: Additional JSON Schema Details
  href: https://json-schema.org/
- text: ConvertTo-Json
  href: ConvertTo-Json.yml
- text: Invoke-WebRequest
  href: Invoke-WebRequest.yml
- text: Invoke-RestMethod
  href: Invoke-RestMethod.yml
syntaxes:
- Test-Json [-Json] <string> [[-Schema] <string>] [<CommonParameters>]
examples:
- title: 'Example 1: Test if an object is valid JSON'
  code: |-
    "{'name': 'Ashley', 'age': 25}" | Test-Json

    True
  description: ""
  summary: |+
    This example tests whether the input string is a valid JSON document.

- title: 'Example 2: Test an object against a provided schema'
  code: |-
    $schema = @'
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "http://example.com/root.json",
      "type": "object",
      "title": "The Root Schema",
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "name": {
          "$id": "#/properties/name",
          "type": "string",
          "title": "The Name Schema",
          "default": "",
          "examples": [
            "Ashley"
          ],
          "pattern": "^(.*)$"
        },
        "age": {
          "$id": "#/properties/age",
          "type": "integer",
          "title": "The Age Schema",
          "default": 0,
          "examples": [
            25
          ]
        }
      }
    }
    '@
    "{'name': 'Ashley', 'age': '25'}" | Test-Json -Schema $schema

    Test-Json : IntegerExpected: #/age
    At line:1 char:37
    + "{'name': 'Ashley', 'age': '25'}" | Test-Json -Schema $schema
    +                                     ~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Test-Json], Exception
    + FullyQualifiedErrorId : InvalidJsonAgainstSchema,Microsoft.PowerShell.Commands.TestJsonCommand
    False
  description: |-
    In this example, we get an error because the schema expects an integer for **age** but the JSON
    input we tested uses a string value instead.

    For more information, see [JSON Schema](https://json-schema.org/).
  summary: |+
    This example takes a string containing a JSON schema and compares it to an input string.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Json
  isRequired: true
  description: |+
    Specifies the JSON string to test for validity. Enter a variable that contains the string, or type a
    command or expression that gets the string. You can also pipe a string to `Test-Json`.

    The **Json** parameter is required.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Schema
  description: |+
    Specifies a Schema to validate the JSON input against. If passed `Test-Json` will validate that the
    Json input conforms to the spec specified by the **Schema** parameter and return `$True` only if the
    input conforms to the provided Schema.

    For more information, see [JSON Schema](https://json-schema.org/).

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Test-Json
name: Test-Json
description: |-
  The `Test-Json` cmdlet tests whether a string is a valid JavaScript Object Notation (JSON) document
  and can optionally verify that JSON document against a provided schema.

  The verified string can then be used with the `ConvertFrom-Json` cmdlet convert a JSON-formatted
  string to a JSON object, which is easily managed in PowerShell or sent to another program or web
  service that access JSON input.

  Many web sites use JSON instead of XML to serialize data for communication between servers and
  web-based apps.

  This cmdlet was introduced in PowerShell 6.1
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 09/19/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/test-json?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-Json
