### YamlMime:PowershellCmdlet
summary: |-
  Starts an interactive debugging session with a runspace.
module: Microsoft.PowerShell.Utility
notes: |-
  `Debug-Runspace` works on runspaces that are in the Opened state. If a runspace state changes from
  Opened to another state, that runspace is automatically removed from the running list. A runspace is
  added to the running list only if it meets the following criteria.

  - If it is coming from Invoke-Command; that is, it has an `Invoke-Command` GUID ID.
  - If it is coming from `Debug-Runspace`; that is, it has a `Debug-Runspace` GUID ID.
  - If it is coming from a PowerShell workflow, and its workflow job ID is the same as the current
    active debugger workflow job ID.
inputs:
- name: <xref href="System.Management.Automation.Runspaces.Runspace" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe the results of a `Get-Runspace` command to **Debug-Runspace.**
links:
- text: about_Debuggers
  href: ../Microsoft.PowerShell.Core/About/about_Debuggers.md
- text: Debug-Job
  href: ../Microsoft.PowerShell.Core/Debug-Job.yml
- text: Get-Runspace
  href: Get-Runspace.yml
- text: Get-Process
  href: ../Microsoft.PowerShell.Management/Get-Process.yml
- text: Enter-PSHostProcess
  href: ../Microsoft.PowerShell.Core/Enter-PSHostProcess.yml
- text: Enter-PSSession
  href: ../Microsoft.PowerShell.Core/Enter-PSSession.yml
syntaxes:
- Debug-Runspace [-Runspace] <Runspace> [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Runspace [-Name] <String> [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Runspace [-Id] <Int32> [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Runspace [-InstanceId] <Guid> [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Debug a remote runspace'
  code: |-
    PS C:\> Get-Process -ComputerName "WS10TestServer" -Name "*powershell*"

    Handles      WS(K)   VM(M)      CPU(s)    Id  ProcessName
    -------      -----   -----      ------    --  -----------
        377      69912     63     2.09      2420  powershell
        399     123396    829     4.48      1152  powershell_ise

    PS C:\> Enter-PSSession -ComputerName "WS10TestServer"
    [WS10TestServer]:PS C:\> Enter-PSHostProcess -Id 1152
    [WS10TestServer:][Process:1152]: PS C:\Users\Test\Documents> Get-Runspace

    Id Name            ComputerName    Type          State         Availability
    -- ----            ------------    ----          -----         ------------
     1 Runspace1       WS10TestServer  Remote        Opened        Available
     2 RemoteHost      WS10TestServer  Remote        Opened        Busy

    PS C:\> [WS10TestServer][Process:1152]: PS C:\Users\Test\Documents> Debug-Runspace -Id 2

    Hit Line breakpoint on 'C:\TestWFVar1.ps1:83'
    At C:\TestWFVar1.ps1:83 char:1
    + $scriptVar = "Script Variable"
    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    [Process:1152]: [RSDBG: 2]: PS C:\> >
  description: |-
    In this example, you debug a runspace that is open on a remote computer, WS10TestServer. In the
    first line of the command, you run `Get-Process` on the remote computer, and filter for Windows
    PowerShell host processes. In this example, you want to debug process ID 1152, the Windows
    PowerShell ISE host process.

    In the second command, you run `Enter-PSSession` to open a remote session on WS10TestServer. In the
    third command, you attach to the Windows PowerShell ISE host process running on the remote server by
    running `Enter-PSHostProcess`, and specifying the ID of the host process that you obtained in the
    first command, 1152.

    In the fourth command, you list available runspaces for process ID 1152 by running `Get-Runspace`.
    You note the ID number of the Busy runspace; it is running a script that you want to debug.

    In the last command, you start debugging an opened runspace that is running a script,
    TestWFVar1.ps1, by running `Debug-Runspace`, and identifying the runspace by its ID, 2, by adding
    the **Id** parameter. Because there's a breakpoint in the script, the debugger opens.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "True"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Id
  isRequired: true
  description: |+
    Specifies the ID number of a runspace. You can run `Get-Runspace` to show runspace IDs.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Guid" data-throw-if-not-resolved="False" />
  name: InstanceId
  isRequired: true
  description: |+
    Specifies a runspace by its instance ID, a GUID that you can show by running `Get-Runspace`.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies a runspace by its name. You can run `Get-Runspace` to show the names of runspaces.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.Runspaces.Runspace" data-throw-if-not-resolved="False" />
  name: Runspace
  isRequired: true
  description: |+
    Specifies a runspace object. The simplest way to provide a value for this parameter is to specify a
    variable that contains the results of a filtered `Get-Runspace` command.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "True"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Debug-Runspace
name: Debug-Runspace
description: |-
  The `Debug-Runspace` cmdlet starts an interactive debugging session with a local or remote active
  runspace. You can find a runspace that you want to debug by first running `Get-Process` to find
  processes associated with PowerShell, then `Enter-PSHostProcess` with the process ID specified in
  the **Id** parameter to attach to the process, and then `Get-Runspace` to list runspaces within the
  PowerShell host process.

  After you have selected a runspace to debug, if the runspace is currently running a command or
  script, or if the script has stopped at a breakpoint, PowerShell opens a remote debugger session for
  the runspace. You can debug the runspace script in the same way remote session scripts are debugged.

  You can only attach to a PowerShell host process if you are an administrator on the computer that is
  running the process, or you are running the script that you want to debug. Also, you cannot enter
  the host process that is running the current PowerShell session. You can only enter a host process
  that is running a different PowerShell session.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/debug-runspace?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Debug-Runspace
