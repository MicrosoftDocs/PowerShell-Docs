### YamlMime:PowershellCmdlet
summary: |-
  Installs one or more software packages.
module: PackageManagement
notes: |-
  Including a package provider in a command can make dynamic parameters available to a cmdlet. Dynamic
  parameters are specific to a package provider. The `Get-Help` cmdlet lists a cmdlet's parameter sets
  and includes the provider's parameter set. For example, `Install-Package` has the **PowerShellGet**
  parameter set that includes `-NoPathUpdate`, `AllowClobber`, and `SkipPublisherCheck`.

  > [!IMPORTANT]
  > As of April 2020, the PowerShell Gallery no longer supports Transport Layer Security (TLS)
  > versions 1.0 and 1.1. If you are not using TLS 1.2 or higher, you will receive an error when
  > trying to access the PowerShell Gallery. Use the following command to ensure you are using TLS
  > 1.2:
  >
  > `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`
  >
  > For more information, see the
  > [announcement](https://devblogs.microsoft.com/powershell/powershell-gallery-tls-support/) in the
  > PowerShell blog.
inputs:
- name: <xref href="`Install-Package` accepts input from the pipeline." data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="SoftwareIdentity" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
links:
- text: about_PackageManagement
  href: ../Microsoft.PowerShell.Core/About/about_PackageManagement.md
- text: Find-DscResource
  href: ../PowershellGet/Find-DscResource.yml
- text: Get-Help
  href: ../Microsoft.PowerShell.Core/Get-Help.yml
- text: Get-Package
  href: Get-Package.yml
- text: Get-PackageProvider
  href: Get-PackageProvider.yml
- text: Get-PackageSource
  href: Get-PackageSource.yml
- text: Find-Package
  href: Find-Package.yml
- text: Save-Package
  href: Save-Package.yml
- text: Uninstall-Package
  href: Uninstall-Package.yml
syntaxes:
- >-
  Install-Package [-Name] <String[]> [-RequiredVersion <String>] [-MinimumVersion <String>]

   [-MaximumVersion <String>] [-Source <String[]>] [-Credential <PSCredential>] [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm]

   [-ProviderName <String[]>] [<CommonParameters>]
- >-
  Install-Package [-InputObject] <SoftwareIdentity[]> [-Credential <PSCredential>] [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Install-Package [-Credential <PSCredential>] [-Proxy <Uri>] [-ProxyCredential <PSCredential>]

   [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm] [-ConfigFile <String>]

   [-SkipValidate] [-Headers <String[]>] [-FilterOnTag <String[]>] [-Contains <String>]

   [-AllowPrereleaseVersions] [-Destination <String>] [-ExcludeVersion] [-Scope <String>]

   [-SkipDependencies] [<CommonParameters>]
- >-
  Install-Package [-Credential <PSCredential>] [-Proxy <Uri>] [-ProxyCredential <PSCredential>]

   [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm] [-ConfigFile <String>]

   [-SkipValidate] [-Headers <String[]>] [-FilterOnTag <String[]>] [-Contains <String>]

   [-AllowPrereleaseVersions] [-Destination <String>] [-ExcludeVersion] [-Scope <String>]

   [-SkipDependencies] [<CommonParameters>]
- >-
  Install-Package [-Credential <PSCredential>] [-Proxy <Uri>] [-ProxyCredential <PSCredential>]

   [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm] [-AllowPrereleaseVersions]

   [-Scope <String>] [-PackageManagementProvider <String>] [-PublishLocation <String>]

   [-ScriptSourceLocation <String>] [-ScriptPublishLocation <String>] [-Type <String>]

   [-Filter <String>] [-Tag <String[]>] [-Includes <String[]>] [-DscResource <String[]>]

   [-RoleCapability <String[]>] [-Command <String[]>] [-AcceptLicense] [-AllowClobber]

   [-SkipPublisherCheck] [-InstallUpdate] [-NoPathUpdate] [<CommonParameters>]
- >-
  Install-Package [-Credential <PSCredential>] [-Proxy <Uri>] [-ProxyCredential <PSCredential>]

   [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm] [-AllowPrereleaseVersions]

   [-Scope <String>] [-PackageManagementProvider <String>] [-PublishLocation <String>]

   [-ScriptSourceLocation <String>] [-ScriptPublishLocation <String>] [-Type <String>]

   [-Filter <String>] [-Tag <String[]>] [-Includes <String[]>] [-DscResource <String[]>]

   [-RoleCapability <String[]>] [-Command <String[]>] [-AcceptLicense] [-AllowClobber]

   [-SkipPublisherCheck] [-InstallUpdate] [-NoPathUpdate] [<CommonParameters>]
examples:
- title: 'Example 1: Install a package by package name'
  code: |-
    PS> Install-Package -Name NuGet.Core -Source MyNuGet -Credential Contoso\TestUser
  description: |-
    `Install-Package` uses parameters to specify the packages **Name** and **Source**. The
    **Credential** parameter uses a domain user account with permissions to install packages. The
    command prompts you for the user account password.
  summary: |+
    The `Install-Package` cmdlet installs a software package and its dependencies.

- title: 'Example 2: Use Find-Package to install a package'
  code: |-
    PS> Find-Package -Name NuGet.Core -Source MyNuGet | Install-Package
  description: |-
    `Find-Package` uses the **Name** and **Source** parameters to locate a package. The object is sent
    down the pipeline and `Install-Package` installs the package on the local computer.
  summary: |+
    In this example, the object returned by `Find-Package` is sent down the pipeline and installed by
    `Install-Package`.

- title: 'Example 3: Install packages by specifying a range of versions'
  code: |-
    PS> Install-Package -Name NuGet.Core -Source MyNuGet -MinimumVersion 2.8.0 -MaximumVersion 2.9.0
  description: |-
    `Install-Package` uses the **Name** and **Source** parameters to find a package. The
    **MinimumVersion** and **MaximumVersion** parameters specify a range of software versions. The
    highest version in the range is installed.
  summary: |+
    `Install-Package` uses the **MinimumVersion** and **MaximumVersion** parameters to specify a range
    of software versions.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AcceptLicense
  description: |2+
     **AcceptLicense** automatically accepts the license agreement during installation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowClobber
  description: |+
    Overrides warning messages about conflicts with existing commands. Overwrites existing commands that
    have the same name as commands being installed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowPrereleaseVersions
  description: |+
    Allows the installation of packages marked as prerelease.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllVersions
  description: |+
    `Install-Package` installs all available versions of the package. By default, only the newest
    version is installed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Command
  description: |+
    Specifies one or more commands that `Install-Package` searches.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ConfigFile
  description: |+
    Specifies a path that contains a configuration file.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Contains
  description: |+
    `Install-Package` gets objects if the **Contains** parameter specifies a value that matches any of
    the object's property values.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to access the computer and run commands. Type a user
    name, such as **User01**, **Domain01\User01**, or enter a **PSCredential** object, generated by the
    `Get-Credential` cmdlet. If you type a user name, you're prompted for a password.

    When the **Credential** parameter isn't specified, `Install-Package` uses the current user.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Destination
  description: |+
    Specifies a path to an input object.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DscResource
  description: |+
    Specifies one or more Desired State Configuration (DSC) resources that are searched by
    `Install-Package`. Use the `Find-DscResource` cmdlet to find DSC resources.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ExcludeVersion
  description: |+
    Switch to exclude the version number in the folder path.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Specifies terms to search for within the **Name** and **Description** properties.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: FilterOnTag
  description: |+
    Specifies a tag that filters results and excludes results that don't contain the specified tag.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation. Overrides restrictions that prevent
    `Install-Package` from succeeding, with the exception of security.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceBootstrap
  description: |+
    Forces **PackageManagement** to automatically install the package provider for the specified
    package.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Headers
  description: |+
    Specifies the package headers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Includes
  description: |+
    Specifies whether `Install-Package` should find all package types. The acceptable values for this
    parameter are as follows:

    - Cmdlet
    - DscResource
    - Function
    - RoleCapability
    - Workflow

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Cmdlet, DscResource, Function, RoleCapability, Workflow
- type: <xref href="Microsoft.PackageManagement.Packaging.SoftwareIdentity" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Accepts pipeline input. Specifies a package by using the package's **SoftwareIdentity** type.
    `Find-Package` outputs a **SoftwareIdentity** object.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: InstallUpdate
  description: |+
    Indicates that `Install-Package` installs updates.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum allowed package version that you want to install. If you don't specify this
    parameter, `Install-Package` installs the package's newest version.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum allowed package version that you want to install. If you don't add this
    parameter, `Install-Package` installs the package's newest version that satisfies any version
    specified by the **MaximumVersion** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies one or more package names. Multiple package names must be separated by commas.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoPathUpdate
  description: |+
    **NoPathUpdate** only applies to the `Install-Script` cmdlet. **NoPathUpdate** is a dynamic
    parameter added by the provider and isn't supported by `Install-Package`.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PackageManagementProvider
  description: |+
    Specifies the name of the **PackageManagement** provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ProviderName
  description: |+
    Specifies one or more package provider names to which to scope your package search. You can get
    package provider names by running the `Get-PackageProvider` cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Provider
  parameterValueGroup: Bootstrap, NuGet, PowerShellGet
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: Proxy
  description: |+
    Specifies a proxy server for the request, rather than connecting directly to an internet resource.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: ProxyCredential
  description: |+
    Specifies a user account that has permission to use the proxy server specified by the **Proxy**
    parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PublishLocation
  description: |+
    Specifies the path to a package's published location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact allowed version of the package that you want to install. If you don't add this
    parameter, `Install-Package` installs the package's newest version that satisfies any version
    specified by the **MaximumVersion** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: RoleCapability
  description: |+
    Specifies an array of role capabilities.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  description: |+
    Specifies the scope for which to install the package. The acceptable values for this parameter are
    as follows:

    - CurrentUser
    - AllUsers

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: CurrentUser, AllUsers
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ScriptPublishLocation
  description: |+
    Specifies the path to a script's published location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ScriptSourceLocation
  description: |+
    Specifies the script source location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipDependencies
  description: |+
    Skips the installation of software dependencies.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipPublisherCheck
  description: |+
    Allows you to get a package version that is newer than your installed version. For example, an
    installed package that is digitally signed by a trusted publisher but a new version isn't digitally
    signed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipValidate
  description: |+
    Switch that skips validating the credentials of a package.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Source
  description: |+
    Specifies one or more package sources. Multiple package source names must be separated by commas.
    You can get package source names by running the `Get-PackageSource` cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Tag
  description: |+
    Specifies one or more strings to search for in the package metadata.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Type
  description: |+
    Specifies whether to search for packages with a module, a script, or both. The acceptable values for
    this parameter are as follows:

    - Module
    - Script
    - All

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Module, Script, All
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if `Install-Package` cmdlet is run. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PackageManagement.Install-Package
name: Install-Package
description: |-
  The `Install-Package` cmdlet installs one or more software packages on the local computer. If you
  have multiple software sources, use `Get-PackageProvider` and `Get-PackageSource` to display details
  about your providers.
metadata:
  external help file: Microsoft.PowerShell.PackageManagement.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PackageManagement
  ms.date: 05/23/2019
  online version: https://docs.microsoft.com/powershell/module/packagemanagement/install-package?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Install-Package
