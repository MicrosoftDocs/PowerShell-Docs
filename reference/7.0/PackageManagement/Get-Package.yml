### YamlMime:PowershellCmdlet
summary: |-
  Returns a list of all software packages that were installed with **PackageManagement**.
module: PackageManagement
notes: |-
  Including a package provider in a command can make dynamic parameters available to a cmdlet. Dynamic
  parameters are specific to a package provider. The `Get-Help` cmdlet lists a cmdlet's parameter sets
  and includes the provider's parameter set. For example, `Get-Package` has the **PowerShellGet**
  parameter set that includes `-NoPathUpdate`, `AllowClobber`, and `SkipPublisherCheck`.

  > [!IMPORTANT]
  > As of April 2020, the PowerShell Gallery no longer supports Transport Layer Security (TLS)
  > versions 1.0 and 1.1. If you are not using TLS 1.2 or higher, you will receive an error when
  > trying to access the PowerShell Gallery. Use the following command to ensure you are using TLS
  > 1.2:
  >
  > `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`
  >
  > For more information, see the
  > [announcement](https://devblogs.microsoft.com/powershell/powershell-gallery-tls-support/) in the
  > PowerShell blog.
outputs:
- name: <xref href="SoftwareIdentity" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
links:
- text: about_PackageManagement
  href: ../Microsoft.PowerShell.Core/About/about_PackageManagement.md
- text: Enter-PSSession
  href: ../Microsoft.PowerShell.Core/Enter-PSSession.yml
- text: Find-Package
  href: Find-Package.yml
- text: Get-Help
  href: ../Microsoft.PowerShell.Core/Get-Help.yml
- text: Get-PackageProvider
  href: Get-PackageProvider.yml
- text: Get-PackageSource
  href: Get-PackageSource.yml
- text: Install-Package
  href: Install-Package.yml
- text: Invoke-Command
  href: ../Microsoft.PowerShell.Core/Invoke-Command.yml
- text: Save-Package
  href: Save-Package.yml
- text: Uninstall-Package
  href: Uninstall-Package.yml
syntaxes:
- >-
  Get-Package [[-Name] <String[]>] [-RequiredVersion <String>] [-MinimumVersion <String>]

   [-MaximumVersion <String>] [-AllVersions] [-Force] [-ForceBootstrap] [-ProviderName <String[]>]

   [-Destination <String>] [-ExcludeVersion] [-Scope <String>] [-SkipDependencies]

   [<CommonParameters>]
- >-
  Get-Package [[-Name] <String[]>] [-RequiredVersion <String>] [-MinimumVersion <String>]

   [-MaximumVersion <String>] [-AllVersions] [-Force] [-ForceBootstrap] [-ProviderName <String[]>]

   [-Scope <String>] [-PackageManagementProvider <String>] [-Type <String>] [-AllowClobber]

   [-SkipPublisherCheck] [-InstallUpdate] [-NoPathUpdate] [-AllowPrereleaseVersions]

   [<CommonParameters>]
examples:
- title: 'Example 1: Get all installed packages'
  code: |-
    Get-Package

    Name           Version      Source                                     ProviderName
    ----           -------      ------                                     ------------
    posh-git       0.7.3        https://www.powershellgallery.com/api/v2   PowerShellGet
  description: ""
  summary: |+
    The `Get-Package` cmdlet gets all packages that are installed on the local computer.

- title: 'Example 2: Get packages that are installed on a remote computer'
  code: |-
    PS> Invoke-Command -ComputerName Server01 -Credential CONTOSO\TestUser -ScriptBlock {Get-Package}
  description: |-
    `Invoke-Command` uses the **ComputerName** parameter to specify a remote computer, **Server01**. The
    **Credential** parameter specifies a domain and user name with permissions to run commands on the
    computer. The **ScriptBlock** parameter runs the `Get-Package` cmdlet on the remote computer.
  summary: |+
    This command gets a list of packages that were installed by **PackageManagement** on a remote
    computer. This command prompts you to provide the specified user's password.

- title: 'Example 3: Get packages for a specified provider'
  code: |-
    Get-Package -ProviderName PowerShellGet -AllVersions

    Name                  Version      Source                                     ProviderName
    ----                  -------      ------                                     ------------
    PackageManagement     1.2.2        https://www.powershellgallery.com/api/v2   PowerShellGet
    PackageManagement     1.3.1        https://www.powershellgallery.com/api/v2   PowerShellGet
    posh-git              0.7.3        https://www.powershellgallery.com/api/v2   PowerShellGet
    PowerShellGet         2.0.1        https://www.powershellgallery.com/api/v2   PowerShellGet
  description: |-
    `Get-Package` uses the **ProviderName** parameter to specify a specific provider, **PowerShellGet**.
    The **All-Versions** parameter displays each version that is installed.
  summary: |+
    This command gets software packages installed on the local computer from a specific provider.

- title: 'Example 4: Get an exact version of a specific package'
  code: |-
    Get-Package -Name PackageManagement -ProviderName PowerShellGet -RequiredVersion 1.3.1

    Name                  Version      Source                                     ProviderName
    ----                  -------      ------                                     ------------
    PackageManagement     1.3.1        https://www.powershellgallery.com/api/v2   PowerShellGet
  description: |-
    `Get-Package` uses **Name** parameter to specify the package name, **PackageManagement**. The
    **ProviderName** parameter specifies the provider, **PowerShellGet**. The **Required-Version**
    parameter specifies an installed version.
  summary: |+
    This command gets a specific version of an installed package. More than one version of a package can
    be installed.

- title: 'Example 5: Uninstall a package'
  code: |-
    Get-Package -Name posh-git -RequiredVersion 0.7.3 | Uninstall-Package
  description: |-
    `Get-Package` uses the **Name** parameter to specify the package name, **posh-git**. The
    **RequiredVersion** parameter is a specific version of the package. The object is sent down the
    pipeline to the `Uninstall-Package` cmdlet. `Uninstall-Package` removes the package.
  summary: |+
    This example gets package information and then uninstalls the package.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowClobber
  description: |+
    Overrides warning messages about conflicts with existing commands. Overwrites existing commands that
    have the same name as commands being installed by a module.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowPrereleaseVersions
  description: |+
    Includes packages marked as a prerelease in the results.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllVersions
  description: |+
    Indicates that `Get-Package` returns all available versions of the package. By default,
    `Get-Package` only returns the newest available version.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Destination
  description: |+
    Specifies the path to a directory that contains extracted package files.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ExcludeVersion
  description: |+
    Switch to exclude the version number in the folder path.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceBootstrap
  description: |+
    Indicates that `Get-Package` forces **PackageManagement** to automatically install the package
    provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: InstallUpdate
  description: |+
    Indicates that this cmdlet installs updates.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum package version that you want to find.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum package version that you want to find. If a higher version is available, that
    version is returned.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  description: |+
    Specifies one or more package names, or package names with wildcard characters. Separate multiple
    package names with commas.

  defaultValue: None
  acceptWildcardCharacters: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoPathUpdate
  description: |+
    **NoPathUpdate** only applies to the `Install-Script` cmdlet. **NoPathUpdate** is a dynamic
    parameter added by the provider and isn't supported by `Get-Package`.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PackageManagementProvider
  description: |+
    Specifies the name of a package management provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ProviderName
  description: |+
    Specifies one or more package provider names. Separate multiple package provider names with commas.
    Use `Get-PackageProvider` to get a list of available package providers.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Provider
  parameterValueGroup: Bootstrap, NuGet, PowerShellGet
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact version of the package to find.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  description: |+
    Specifies the search scope for the package.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: CurrentUser, AllUsers
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipDependencies
  description: |+
    Switch that specifies to skip finding any package dependencies.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipPublisherCheck
  description: |+
    Allows you to get a package version that is newer than your installed version. For example, an
    installed package that is digitally signed by a trusted publisher but a new version isn't digitally
    signed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Type
  description: |+
    Specifies whether to search for packages with a module, a script, or either.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Module, Script, All
uid: PackageManagement.Get-Package
name: Get-Package
description: |-
  The `Get-Package` cmdlet returns a list of all software packages on the local computer that were
  installed with **PackageManagement**. You can run `Get-Package` on remote computers by running it as
  part of an `Invoke-Command` or `Enter-PSSession` command or script.
metadata:
  external help file: Microsoft.PowerShell.PackageManagement.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PackageManagement
  ms.date: 05/22/2019
  online version: https://docs.microsoft.com/powershell/module/packagemanagement/get-package?view=powershell-7&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-Package
