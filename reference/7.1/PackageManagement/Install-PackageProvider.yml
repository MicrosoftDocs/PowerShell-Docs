### YamlMime:PowershellCmdlet
summary: |-
  Installs one or more Package Management package providers.
module: PackageManagement
notes: |-
  > [!IMPORTANT]
  > As of April 2020, the PowerShell Gallery no longer supports Transport Layer Security (TLS)
  > versions 1.0 and 1.1. If you are not using TLS 1.2 or higher, you will receive an error when
  > trying to access the PowerShell Gallery. Use the following command to ensure you are using TLS
  > 1.2:
  >
  > `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`
  >
  > For more information, see the
  > [announcement](https://devblogs.microsoft.com/powershell/powershell-gallery-tls-support/) in the
  > PowerShell blog.
inputs:
- name: <xref href="Microsoft.PackageManagement.Packaging.SoftwareIdentity" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a **SoftwareIdentity** object to this cmdlet. Use `Find-PackageProvider` to get a
    **SoftwareIdentity** object that can be piped into `Install-PackageProvider`.
links:
- text: Find-PackageProvider
  href: Find-PackageProvider.yml
- text: Get-PackageProvider
  href: Get-PackageProvider.yml
- text: Import-PackageProvider
  href: Import-PackageProvider.yml
syntaxes:
- >-
  Install-PackageProvider [-Name] <String[]> [-RequiredVersion <String>] [-MinimumVersion <String>]

   [-MaximumVersion <String>] [-Credential <PSCredential>] [-Scope <String>] [-Source <String[]>] [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Install-PackageProvider [-Scope <String>] [-InputObject] <SoftwareIdentity[]> [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-AllVersions] [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: 'Example 1: Install a package provider from the PowerShell Gallery'
  code: |-
    Install-PackageProvider -Name "GistProvider" -Verbose
  description: ""
  summary: |+
    This command installs the GistProvider package provider from the PowerShell Gallery.

- title: 'Example 2: Install a specified version of a package provider'
  code: |-
    Find-PackageProvider -Name "NuGet" -AllVersions
    Install-PackageProvider -Name "NuGet" -RequiredVersion "2.8.5.216" -Force
  description: ""
  summary: |+
    This example installs a specified version of the NuGet package provider.

    The first command finds all versions of the package provider named NuGet.
    The second command installs a specified version of the NuGet package provider.

- title: 'Example 3: Find a provider and install it'
  code: |-
    Find-PackageProvider -Name "GistProvider" | Install-PackageProvider -Verbose
  description: ""
  summary: |+
    This example uses `Find-PackageProvider` and the pipeline to search for the Gist provider and
    install it.

- title: "Example 4: Install a provider to the current user's module folder"
  code: |-
    Install-PackageProvider -Name GistProvider -Verbose -Scope CurrentUser
  description: ""
  summary: |+
    This command installs a package provider to `$env:LOCALAPPDATA\PackageManagement\ProviderAssemblies`
    so that only the current user can use it.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllVersions
  description: |+
    Indicates that this cmdlet installs all available versions of the package provider. By default,
    `Install-PackageProvider` only returns the highest available version.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to install package providers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Indicates that this cmdlet forces all actions with this cmdlet that can be forced. Currently, this
    means the **Force** parameter acts the same as the **ForceBootstrap** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceBootstrap
  description: |+
    Indicates that this cmdlet automatically installs the package provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PackageManagement.Packaging.SoftwareIdentity" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies a **SoftwareIdentity** object. Use the `Find-PackageProvider` cmdlet to obtain a
    **SoftwareIdentity** object to pipe into `Install-PackageProvider`.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum allowed version of the package provider that you want to install. If you do
    not add this parameter, `Install-PackageProvider` installs the highest available version of the
    provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum allowed version of the package provider that you want to install. If you do
    not add this parameter, `Install-PackageProvider` installs the highest available version of the
    package that also satisfies any requirement specified by the *MaximumVersion* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies one or more package provider module names. Separate multiple package names with commas.
    Wildcard characters are not supported.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: Proxy
  description: |+
    Specifies a proxy server for the request, rather than connecting directly to the Internet resource.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: ProxyCredential
  description: |+
    Specifies a user account that has permission to use the proxy server that is specified by the
    **Proxy** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact allowed version of the package provider that you want to install. If you do not
    add this parameter, `Install-PackageProvider` installs the highest available version of the provider
    that also satisfies any maximum version specified by the **MaximumVersion** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  description: |+
    Specifies the installation scope of the provider. The acceptable values for this parameter
    are:

    - **AllUsers** - installs providers in a location that is accessible to all users of the computer.
      By default, this is **$env:ProgramFiles\PackageManagement\ProviderAssemblies.**

    - **CurrentUser** - installs providers in a location where they are only accessible to the current
      user. By default, this is **$env:LOCALAPPDATA\PackageManagement\ProviderAssemblies.**

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: CurrentUser, AllUsers
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Source
  description: |+
    Specifies one or more package sources. Use the `Get-PackageSource` cmdlet to get a list of available
    package sources.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PackageManagement.Install-PackageProvider
name: Install-PackageProvider
description: |-
  The `Install-PackageProvider` cmdlet installs matching Package Management providers that are
  available in package sources registered with **PowerShellGet**. By default, this includes modules
  available in the Windows PowerShell Gallery with the **PackageManagement** tag. The
  **PowerShellGet** Package Management provider is used for finding providers in these repositories.

  This cmdlet also installs matching Package Management providers that are available using the Package
  Management bootstrapping application.

  This cmdlet also installs matching Package Management providers that are available in the Package
  Management Azure Blob store. Use the bootstrapper provider to find and install them.

  In order to execute the first time, PackageManagement requires an internet connection to download
  the NuGet package provider. However, if your computer does not have an internet connection and you
  need to use the NuGet or PowerShellGet provider, you can download them on another computer and copy
  them to your target computer. Use the following steps to do this:

  1. Run `Install-PackageProvider -Name NuGet -RequiredVersion 2.8.5.201 -Force` to install the
     provider from a computer with an internet connection.
  1. After the install, you can find the provider installed in
     `$env:ProgramFiles\PackageManagement\ReferenceAssemblies\<ProviderName>\<ProviderVersion>` or
     `$env:LOCALAPPDATA\PackageManagement\ProviderAssemblies\<ProviderName>\<ProviderVersion>`.
  1. Place the `<ProviderName>` folder, which in this case is the NuGet folder, in the corresponding
     location on your target computer. If your target computer is a Nano server, you need to run
     `Install-PackageProvider` from Nano Server to download the correct NuGet binaries.
  1. Restart PowerShell to auto-load the package provider. Alternatively, run
     `Get-PackageProvider -ListAvailable` to list all the package providers available on the computer.
     Then use `Import-PackageProvider -Name NuGet -RequiredVersion 2.8.5.201` to import the provider
     to the current Windows PowerShell session.
metadata:
  external help file: Microsoft.PowerShell.PackageManagement.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PackageManagement
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/packagemanagement/install-packageprovider?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Install-PackageProvider
