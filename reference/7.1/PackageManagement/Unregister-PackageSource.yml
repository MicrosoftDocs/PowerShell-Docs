### YamlMime:PowershellCmdlet
summary: |-
  Removes a registered package source.
module: PackageManagement
notes: |-
  Including a package provider in a command can make dynamic parameters available to a cmdlet. Dynamic
  parameters are specific to a package provider. The `Get-Help` cmdlet lists a cmdlet's parameter sets
  and includes the provider's parameter set.
inputs:
- name: <xref href="`Unregister-PackageSource` accepts **PackageSource** objects from the pipeline as input." data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="`Unregister-PackageSource` doesn't generate any output." data-throw-if-not-resolved="False" />
  description: ""
links:
- text: about_PackageManagement
  href: ../Microsoft.PowerShell.Core/About/about_PackageManagement.md
- text: Get-Credential
  href: ../Microsoft.PowerShell.Security/Get-Credential.yml
- text: Get-PackageSource
  href: Get-PackageSource.yml
- text: Register-PackageSource
  href: Register-PackageSource.yml
- text: Set-PackageSource
  href: Set-PackageSource.yml
syntaxes:
- >-
  Unregister-PackageSource [[-Source] <String>] [-Location <String>] [-Credential <PSCredential>]

   [-Force] [-ForceBootstrap] [-WhatIf] [-Confirm] [-ProviderName <String>] [<CommonParameters>]
- >-
  Unregister-PackageSource -InputObject <PackageSource[]> [-Credential <PSCredential>] [-Force]

   [-ForceBootstrap] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Unregister-PackageSource [-Credential <PSCredential>] [-Force] [-ForceBootstrap] [-WhatIf]

   [-Confirm] [-ConfigFile <String>] [-SkipValidate] [<CommonParameters>]
- >-
  Unregister-PackageSource [-Credential <PSCredential>] [-Force] [-ForceBootstrap] [-WhatIf]

   [-Confirm] [-ConfigFile <String>] [-SkipValidate] [<CommonParameters>]
- >-
  Unregister-PackageSource [-Credential <PSCredential>] [-Force] [-ForceBootstrap] [-WhatIf]

   [-Confirm] [-PackageManagementProvider <String>] [-PublishLocation <String>]

   [-ScriptSourceLocation <String>] [-ScriptPublishLocation <String>] [<CommonParameters>]
- >-
  Unregister-PackageSource [-Credential <PSCredential>] [-Force] [-ForceBootstrap] [-WhatIf]

   [-Confirm] [-PackageManagementProvider <String>] [-PublishLocation <String>]

   [-ScriptSourceLocation <String>] [-ScriptPublishLocation <String>] [<CommonParameters>]
examples:
- title: 'Example 1: Unregister a package source for the Nuget provider'
  code: |-
    PS> Unregister-PackageSource -Source MyNuGet
  description: |-
    The `Unregister-PackageSource` cmdlet uses the **Source** parameter to specify which source to
    remove.
  summary: |+
    The `Unregister-PackageSource` cmdlet unregisters a package source from the local computer. The
    **Location** and **Provider** parameters can be used to further specify the source to remove.

- title: 'Example 2: Use a PackageSource object to unregister a package'
  code: |-
    PS> $pkgsource = Get-PackageSource -Name MyNuGet
    PS> Unregister-PackageSource -InputObject $pkgsource
  description: |-
    The `$pkgsource` variable stores the **PackageSource** created by the `Get-PackageSource` cmdlet.
    `Unregister-PackageSource` uses the `$pkgsource` as input to the **InputObject** parameter.

    As an alternative, the `Unregister-PackageSource` cmdlet can specify a value for the **InputObject**
    parameter:

    `Unregister-PackageSource -InputObject ( Get-PackageSource -Name MyNuGet )`
  summary: |+
    This example uses the `Get-PackageSource` and `Unregister-PackageSource` to unregister a package
    source. The **PackageSource** object is stored in a variable.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ConfigFile
  description: |+
    Specifies a configuration file.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before `Unregister-PackageSource` is run.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to access the computer and run commands. Type a user
    name, such as **User01**, **Domain01\User01**, or enter a **PSCredential** object, generated by the
    `Get-Credential` cmdlet. If you type a user name, you're prompted for a password.

    When the **Credential** parameter isn't specified, the current user account is used.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation. Overrides restrictions that prevent
    `Unregister-PackageSource` from succeeding, with the exception of security.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceBootstrap
  description: |+
    Indicates that `Unregister-PackageSource` forces **PackageManagement** to automatically uninstall
    the package provider for the specified package source.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PackageManagement.Packaging.PackageSource" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Accepts pipeline input that specifies the **PackageSource** object from the `Get-PackageSource`
    cmdlet. **InputObject** accepts the **PackageSource** object as a `Get-PackageSource` value or a
    variable that contains the object.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Location
  description: |+
    Specifies the location to which a package source points. The value of this parameter can be a URI, a
    file path, or any other destination format that is supported by the package provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PackageManagementProvider
  description: |+
    Specifies the **PackageManagement** provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ProviderName
  description: |+
    Specifies the provider name.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Provider
  parameterValueGroup: Bootstrap, NuGet, PowerShellGet
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PublishLocation
  description: |+
    Specifies the publish location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ScriptPublishLocation
  description: |+
    Specifies the script publish location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ScriptSourceLocation
  description: |+
    Specifies the script source location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SkipValidate
  description: |+
    Switch that skips validating the credentials of a package source.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Source
  description: |+
    Specifies the friendly name of the package source.

  defaultValue: None
  position: "0"
  aliases: Name
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if `Unregister-PackageSource` cmdlet is run. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PackageManagement.Unregister-PackageSource
name: Unregister-PackageSource
description: |-
  The `Unregister-PackageSource` cmdlet removes a registered package source. Package sources are
  always managed by a package provider. To find package sources, use the `Get-PackageSource` cmdlet.
metadata:
  external help file: Microsoft.PowerShell.PackageManagement.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PackageManagement
  ms.date: 05/24/2019
  online version: https://docs.microsoft.com/powershell/module/packagemanagement/unregister-packagesource?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Unregister-PackageSource
