### YamlMime:PowershellCmdlet
summary: |-
  Debugs a running background, remote, or PowerShell Workflow job.
module: Microsoft.PowerShell.Core
notes: ""
inputs:
- name: <xref href="System.Management.Automation.RemotingJob" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-Job
  href: Get-Job.yml
- text: Receive-Job
  href: Receive-Job.yml
- text: Remove-Job
  href: Remove-Job.yml
- text: Start-Job
  href: Start-Job.yml
- text: Stop-Job
  href: Stop-Job.yml
- text: Wait-Job
  href: Wait-Job.yml
syntaxes:
- Debug-Job [-Job] <Job> [-BreakAll] [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Job [-Name] <String> [-BreakAll] [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Job [-Id] <Int32> [-BreakAll] [-WhatIf] [-Confirm] [<CommonParameters>]
- Debug-Job [-InstanceId] <Guid> [-BreakAll] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Debug a job by job ID'
  code: |-
    PS C:\> Debug-Job -ID 3
    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
    --     ----            -------------   -----         -----------     --------             -------
    3      Job3            RemoteJob       Running       True            PowerShellIx         TestWFDemo1.ps1
              Entering debug mode. Use h or ? for help.

              Hit Line breakpoint on 'C:\TestWFDemo1.ps1:8'

              At C:\TestWFDemo1.ps1:8 char:5
              +     Write-Output -InputObject "Now writing output:"
              +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              [DBG:PowerShellIx]: PS C:\> > list

                  3:
                  4:  workflow SampleWorkflowTest
                  5:  {
                  6:      param ($MyOutput)
                  7:
                  8:*     Write-Output -InputObject "Now writing output:"
                  9:      Write-Output -Input $MyOutput
                 10:
                 11:      Write-Output -InputObject "Get PowerShell process:"
                 12:      Get-Process -Name powershell
                 13:
                 14:      Write-Output -InputObject "Workflow function complete."
                 15:  }
                 16:
                 17:  # Call workflow function
                 18:  SampleWorkflowTest -MyOutput "Hello"
  description: |-
    This command breaks into a running job with an ID of 3.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: BreakAll
  description: |+
    {{ Fill BreakAll Description }}

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Id
  isRequired: true
  description: |+
    Specifies the ID number of a running job.
    To get the ID number of a job, run the Get-Job cmdlet.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Guid" data-throw-if-not-resolved="False" />
  name: InstanceId
  isRequired: true
  description: |+
    Specifies the instance ID GUID of a running job.
    To get the *InstanceId* of a job, run the **Get-Job** cmdlet, piping the results into a **Format-*** cmdlet, as shown in the following example:

    `Get-Job | Format-List -Property Id,Name,InstanceId,State`

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.Job" data-throw-if-not-resolved="False" />
  name: Job
  isRequired: true
  description: |+
    Specifies a running job object.
    The simplest way to use this parameter is to save the results of a **Get-Job** command that returns the running job that you want to debug in a variable, and then specify the variable as the value of this parameter.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies a job by the friendly name of the job.
    When you start a job, you can specify a job name by adding the *JobName* parameter, in cmdlets such as Invoke-Command and Start-Job.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Core.Debug-Job
name: Debug-Job
description: |-
  The **Debug-Job** cmdlet lets you debug scripts that are running within jobs.
  The cmdlet is designed to debug PowerShell Workflow jobs, background jobs, and jobs running in remote sessions.
  **Debug-Job** accepts a running job object, name, ID, or instance ID as input, and starts a debugging session on the script it is running.
  The debugger **quit** command stops the job and running script.
  Starting in Windows PowerShell 5.0, the **exit** command detaches the debugger, and allows the job to continue to run.
metadata:
  external help file: System.Management.Automation.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Core
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.core/debug-job?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Debug-Job
