### YamlMime:PowershellCmdlet
summary: |-
  Invokes an action on the object that is specified by the Resource URI and by the selectors.
module: Microsoft.WSMan.Management
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not accept any input.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not generate any output.
links:
- text: Connect-WSMan
  href: Connect-WSMan.yml
- text: Disable-WSManCredSSP
  href: Disable-WSManCredSSP.yml
- text: Disconnect-WSMan
  href: Disconnect-WSMan.yml
- text: Enable-WSManCredSSP
  href: Enable-WSManCredSSP.yml
- text: Get-WSManCredSSP
  href: Get-WSManCredSSP.yml
- text: Get-WSManInstance
  href: Get-WSManInstance.yml
- text: New-WSManInstance
  href: New-WSManInstance.yml
- text: New-WSManSessionOption
  href: New-WSManSessionOption.yml
- text: Remove-WSManInstance
  href: Remove-WSManInstance.yml
- text: Set-WSManInstance
  href: Set-WSManInstance.yml
- text: Set-WSManQuickConfig
  href: Set-WSManQuickConfig.yml
- text: Test-WSMan
  href: Test-WSMan.yml
syntaxes:
- >-
  Invoke-WSManAction [-Action] <String> [-ConnectionURI <Uri>] [-FilePath <String>] [-OptionSet <Hashtable>]

   [[-SelectorSet] <Hashtable>] [-SessionOption <SessionOption>] [-ValueSet <Hashtable>] [-ResourceURI] <Uri>

   [-Credential <PSCredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <String>]

   [<CommonParameters>]
- >-
  Invoke-WSManAction [-Action] <String> [-ApplicationName <String>] [-ComputerName <String>] [-FilePath <String>]

   [-OptionSet <Hashtable>] [-Port <Int32>] [[-SelectorSet] <Hashtable>] [-SessionOption <SessionOption>]

   [-UseSSL] [-ValueSet <Hashtable>] [-ResourceURI] <Uri> [-Credential <PSCredential>]

   [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <String>] [<CommonParameters>]
examples:
- title: 'Example 1: Invoke a method'
  code: |-
    Invoke-WSManAction -Action startservice -ResourceURI wmicimv2/win32_service  -SelectorSet @{name="spooler"} -Authentication default

    xsi         : http://www.w3.org/2001/XMLSchema-instance
    p           : http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service
    cim         : http://schemas.dmtf.org/wbem/wscim/1/common
    lang        : en-US
    ReturnValue : 0
  description: |-
    This command calls the **StartService** method of the Win32_Service WMI class instance that corresponds to the Spooler service.

    The return value indicates whether the action was successful.
    In this case, a return value of 0 indicates success.
    A return value of 5 indicates that the service is already started.
  summary: ""
- title: 'Example 2: Invoke a method'
  code: |-
    Invoke-WSManAction -Action stopservice -ResourceURI wmicimv2/Win32_Service -SelectorSet @{Name="spooler"} -FilePath:input.xml -Authentication default

    xsi         : http://www.w3.org/2001/XMLSchema-instance
    p           : http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service
    cim         : http://schemas.dmtf.org/wbem/wscim/1/common
    lang        : en-US
    ReturnValue : 0
  description: |-
    This command calls the **StopService** method on the Spooler service by using input from a file.
    The file, Input.xml, contains the following content:

    `<p:StopService_INPUT xmlns:p="http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service" />`
  summary: ""
- title: 'Example 3: Invoke a method with specified parameter values'
  code: |-
    Invoke-WSManAction -Action create -ResourceURI wmicimv2/win32_process -ValueSet @{commandline="notepad.exe";currentdirectory="C:\"}

    xsi         : http://www.w3.org/2001/XMLSchema-instance
    p           : http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Process
    cim         : http://schemas.dmtf.org/wbem/wscim/1/common
    lang        : en-US
    ProcessId   : 6356
    ReturnValue : 0
  description: |-
    This command calls the **Create** method of the Win32_Process class.
    It passes the method two parameter values, Notepad.exe and C:\.
    As a result, a new process is created to run Notepad, and the current directory of the new process is set to C:\.
  summary: ""
- title: 'Example 4: Invoke a method on a remote computer'
  code: |-
    Invoke-WSManAction -Action startservice -ResourceURI wmicimv2/win32_service  -SelectorSet @{name="spooler"} -ComputerName server01 -Authentication default

    xsi         : http://www.w3.org/2001/XMLSchema-instance
    p           : http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service
    cim         : http://schemas.dmtf.org/wbem/wscim/1/common
    lang        : en-US
    ReturnValue : 0
  description: |-
    This command calls the **StartService** method of the Win32_Service WMI class instance that corresponds to the Spooler service.
    Because the *ComputerName* parameter is specified, the command runs against the remote server01 computer.
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Action
  isRequired: true
  description: |+
    Specifies the method to run on the management object specified by the ResourceURI and selectors.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ApplicationName
  description: |+
    Specifies the application name in the connection.
    The default value of the *ApplicationName* parameter is WSMAN.
    The complete identifier for the remote endpoint is in the following format:

    \<transport\>://\<server\>:\<port\>/\<ApplicationName\>

    For example: `http://server01:8080/WSMAN`

    Internet Information Services (IIS), which hosts the session, forwards requests with this endpoint to the specified application.
    This default setting of WSMAN is appropriate for most uses.
    This parameter is designed to be used if many computers establish remote connections to one computer that is running PowerShell.
    In this case, IIS hosts Web Services for Management (WS-Management) for efficiency.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.WSMan.Management.AuthenticationMechanism" data-throw-if-not-resolved="False" />
  name: Authentication
  description: |+
    Specifies the authentication mechanism to be used at the server.
    The acceptable values for this parameter are:

    - Basic.
    Basic is a scheme in which the user name and password are sent in clear text to the server or proxy.
    - Default.
    Use the authentication method implemented by the WS-Management protocol.
    This is the default.
    - Digest.
    Digest is a challenge-response scheme that uses a server-specified data string for the challenge.
    - Kerberos.
    The client computer and the server mutually authenticate by using Kerberos certificates.
    - Negotiate.
    Negotiate is a challenge-response scheme that negotiates with the server or proxy to determine the scheme to use for authentication.
    For example, this parameter value allows for negotiation to determine whether the Kerberos protocol or NTLM is used.
    - CredSSP.
    Use Credential Security Support Provider (CredSSP) authentication, which lets the user delegate credentials.
    This option is designed for commands that run on one remote computer but collect data from or run additional commands on other remote computers.

    Caution: CredSSP delegates the user credentials from the local computer to a remote computer.
    This practice increases the security risk of the remote operation.
    If the remote computer is compromised, when credentials are passed to it, the credentials can be used to control the network session.

  defaultValue: None
  position: Named
  aliases: auth, am
  parameterValueGroup: None, Default, Digest, Negotiate, Basic, Kerberos, ClientCertificate, Credssp
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    Specifies the digital public key certificate (X509) of a user account that has permission to perform this action.
    Enter the certificate thumbprint of the certificate.

    Certificates are used in client certificate-based authentication.
    They can be mapped only to local user accounts; they do not work with domain accounts.

    To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the PowerShell Cert: drive.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ComputerName
  description: |+
    Specifies the computer against which to run the management operation.
    The value can be a fully qualified domain name, a NetBIOS name, or an IP address.
    Use the local computer name, use localhost, or use a dot (.) to specify the local computer.
    The local computer is the default.
    When the remote computer is in a different domain from the user, you must use a fully qualified domain name must be used.
    You can pipe a value for this parameter to the cmdlet.

  defaultValue: None
  position: Named
  aliases: cn
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: ConnectionURI
  description: |+
    Specifies the connection endpoint.
    The format of this string is as follows:

    \<Transport\>://\<Server\>:\<Port\>/\<ApplicationName\>

    The following string is a correctly formatted value for this parameter:

    `http://Server01:8080/WSMAN`

    The URI must be fully qualified.

  defaultValue: None
  position: Named
  aliases: CURI, CU
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to perform this action.
    The default is the current user.
    Type a user name, such as User01, Domain01\User01, or User@Domain.com.
    Or, enter a **PSCredential** object, such as one returned by the Get-Credential cmdlet.
    When you type a user name, this cmdlet prompts you for a password.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: cred, c
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FilePath
  description: |+
    Specifies the path of a file that is used to update a management resource.
    You specify the management resource by using the *ResourceURI* parameter and the *SelectorSet* parameter.
    For example, the following command uses the *FilePath* parameter:

    `Invoke-WSManAction -Action stopservice -ResourceUri wmicimv2/Win32_Service -SelectorSet @{Name="spooler"} -FilePath c:\input.xml -Authentication default`

    This command calls the **StopService** method on the **Spooler** service by using input from a file.
    The file, Input.xml, contains the following content:

    `<p:StopService_INPUT xmlns:p="http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Service" />`

  defaultValue: None
  position: Named
  aliases: Path
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: OptionSet
  description: |+
    Specifies a set of switches to a service to modify or refine the nature of the request.
    These resemble switches used in command-line shells because they are service specific.
    Any number of options can be specified.

    The following example demonstrates the syntax that passes the values 1, 2, and 3 for the a, b, and c parameters:

    `-OptionSet @{a=1;b=2;c=3}`

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: os
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Port
  description: |+
    Specifies the port to use when the client connects to the WinRM service.
    When the transport is HTTP, the default port is 80.
    When the transport is HTTPS, the default port is 443.

    When you use HTTPS as the transport, the value of the *ComputerName* parameter must match the server's certificate common name (CN).
    However, if the *SkipCNCheck* parameter is specified as part of the *SessionOption* parameter, the certificate common name of the server does not have to match the host name of the server.
    The *SkipCNCheck* parameter should be used only for trusted computers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: ResourceURI
  isRequired: true
  description: |+
    Specifies the URI of the resource class or instance.
    The URI is used to identify a specific type of resource, such as disks or processes, on a computer.

    A URI consists of a prefix and a path of a resource.
    For example:

    `http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk`

    `http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor`

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ruri
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: SelectorSet
  description: |+
    Specifies a set of value pairs that are used to select particular management resource instances.
    *SelectorSet* is used when more than one instance of the resource exists.
    The value of *SelectorSet* must be a hash table.

    The following example shows how to enter a value for this parameter:

    `-SelectorSet @{Name="WinRM";ID="yyy"}`

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.WSMan.Management.SessionOption" data-throw-if-not-resolved="False" />
  name: SessionOption
  description: |+
    Specifies extended options for the WS-Management session.
    Enter a **SessionOption** object that you create by using the New-WSManSessionOption cmdlet.
    For more information about the options that are available, type `Get-Help New-WSManSessionOption`.

  defaultValue: None
  position: Named
  aliases: so
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseSSL
  description: |+
    Specifies that the Secure Sockets Layer (SSL) protocol is used to establish a connection to the remote computer.
    By default, SSL is not used.

    WS-Management encrypts all the PowerShell content that is transmitted over the network.
    The *UseSSL* parameter lets you specify the additional protection of HTTPS instead of HTTP.
    If SSL is not available on the port that is used for the connection, and you specify this parameter, the command fails.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: ValueSet
  description: |+
    Specifies a hash table that helps modify a management resource.
    You specify the management resource by using *ResourceURI* and *SelectorSet*.
    The value of the *ValueSet* parameter must be a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.WSMan.Management.Invoke-WSManAction
name: Invoke-WSManAction
description: |-
  The **Invoke-WSManAction** runs an action on the object that is specified by RESOURCE_URI, where parameters are specified by key value pairs.

  This cmdlet uses the WSMan connection/transport layer to run the action.
metadata:
  external help file: Microsoft.WSMan.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.WSMan.Management
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.wsman.management/invoke-wsmanaction?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Invoke-WSManAction
