### YamlMime:PowershellCmdlet
summary: |-
  Adds the current location to the top of a location stack.
module: Microsoft.PowerShell.Management
notes: |-
  PowerShell supports multiple runspaces per process. Each runspace has its own _current directory_.
  This is not the same as `[System.Environment]::CurrentDirectory`. This behavior can be an issue
  when calling .NET APIs or running native applications without providing explicit directory paths.

  Even if the location cmdlets did set the process-wide current directory, you can't depend on it
  because another runspace might change it at any time. You should use the location cmdlets to perform
  path-based operations using the current working directory specific to the current runspace.

  A stack is a last-in, first-out list in which only the most recently added item is accessible.
  You add items to a stack in the order that you use them, and then retrieve them for use in the
  reverse order. PowerShell lets you store provider locations in location stacks.

  PowerShell creates an unnamed default location stack and you can create multiple named location
  stacks. If you do not specify a stack name, PowerShell uses the current location stack. By
  default, the unnamed default location is the current location stack, but you can use the
  `Set-Location` cmdlet to change the current location stack.

  To manage location stacks, use the PowerShell Location cmdlets, as follows.

  - To add a location to a location stack, use the `Push-Location` cmdlet.

  - To get a location from a location stack, use the `Pop-Location` cmdlet.

  - To display the locations in the current location stack, use the **Stack** parameter of the
    `Get-Location` cmdlet.

  - To display the locations in a named location stack, use the **StackName** parameter of the
    `Get-Location` cmdlet.

  - To create a new location stack, use the StackName parameter of the `Push-Location` cmdlet. If you
    specify a stack that does not exist, `Push-Location` creates the stack.

  - To make a location stack the current location stack, use the StackName parameter of the
    `Set-Location` cmdlet.

  The unnamed default location stack is fully accessible only when it is the current location stack.
  If you make a named location stack the current location stack, you can no longer use the
  `Push-Location` or `Pop-Location` cmdlets to add or get items from the default stack or use the
  `Get-Location` cmdlet to display the locations in the unnamed stack. To make the unnamed stack
  the current stack, use the **StackName** parameter of the `Set-Location` cmdlet with a value of
  `$null` or an empty string (`""`).

  You can also refer to `Push-Location` by its built-in alias, `pushd`. For more information, see
  [about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).

  The `Push-Location` cmdlet is designed to work with the data exposed by any provider. To list the
  providers available in your session, type `Get-PSProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains a path (but not a literal path) to `Push-Location`.
outputs:
- name: <xref href="None or System.Management.Automation.PathInfo" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, `Push-Location` generates a
    **System.Management.Automation.PathInfo** object that represents the location. Otherwise, this
    cmdlet does not generate any output.
links:
- text: Get-Location
  href: Get-Location.yml
- text: Pop-Location
  href: Pop-Location.yml
- text: Set-Location
  href: Set-Location.yml
- text: about_Aliases
  href: ../Microsoft.PowerShell.Core/About/about_Aliases.md
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
syntaxes:
- Push-Location [[-Path] <String>] [-PassThru] [-StackName <String>] [<CommonParameters>]
- Push-Location [-LiteralPath <String>] [-PassThru] [-StackName <String>] [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    PS C:\> Push-Location C:\Windows
  description: ""
  summary: |+
    This example pushes the current location onto the default location stack and then changes the
    location to `C:\Windows`.

- title: Example 2
  code: |-
    PS C:\> Push-Location HKLM:\Software\Policies -StackName RegFunction
  description: |-
    You can use the Location cmdlets in any PowerShell drive (PSDrive).
  summary: |+
    This example pushes the current location onto the RegFunction stack and changes the current location
    to the `HKLM:\Software\Policies` location.

- title: Example 3
  code: |-
    PS C:\> Push-Location
  description: ""
  summary: |+
    This command pushes the current location onto the default stack. It does not change the location.

- title: Example 4 - Create and use a named stack
  code: |-
    PS C:\> Push-Location ~ -StackName Stack2
    PS C:\Users\User01> Pop-Location -StackName Stack2
    PS C:\>
  description: |-
    The first command pushes the current location onto a new stack named Stack2, and then changes the
    current location to the home directory, represented in the command by the tilde symbol (`~`),
    which when used on a FileSystem provider drives is equivalent to `$HOME` and `$env:USERPROFILE`.

    If Stack2 does not already exist in the session, `Push-Location` creates it. The second command uses
    the `Pop-Location` cmdlet to pop the original location (`C:\`) from the Stack2 stack. Without the
    **StackName** parameter, `Pop-Location` would pop the location from the unnamed default stack.

    For more information about location stacks, see the [Notes](#notes).
  summary: |+
    These commands show how to create and use a named location stack.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  description: |+
    Specifies the path to the new location. Unlike the **Path** parameter, the value of the
    **LiteralPath** parameter is used exactly as it is typed. No characters are interpreted as
    wildcards. If the path includes escape characters, enclose it in single quotation marks. Single
    quotation marks tell PowerShell not to interpret any characters as escape sequences.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath, LP
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Passes an object representing the location to the pipeline. By default, this cmdlet does not
    generate any output.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  description: |+
    Changes your location to the location specified by this path after it adds (pushes) the current
    location onto the top of the stack. Enter a path to any location whose provider supports this
    cmdlet. Wildcards are permitted. The parameter name is optional.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: StackName
  description: |+
    Specifies the location stack to which the current location is added. Enter a location stack name.
    If the stack does not exist, `Push-Location` creates it.

    Without this parameter, `Push-Location` adds the location to the current location stack. By
    default, the current location stack is the unnamed default location stack that PowerShell creates.
    To make a location stack the current location stack, use the **StackName** parameter of the
    `Set-Location` cmdlet. For more information about location stacks, see the [Notes](#notes).

    > [!NOTE]
    > `Push-Location` cannot add a location to the unnamed default stack unless it is the current
    > location stack.

  defaultValue: Default stack
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Push-Location
name: Push-Location
description: |-
  The `Push-Location` cmdlet adds ("pushes") the current location onto a location stack. If you
  specify a path, `Push-Location` pushes the current location onto a location stack and then changes
  the current location to the location specified by the path. You can use the `Pop-Location` cmdlet
  to get locations from the location stack.

  By default, the `Push-Location` cmdlet pushes the current location onto the current location stack,
  but you can use the **StackName** parameter to specify an alternate location stack. If the stack
  does not exist, `Push-Location` creates it.

  For more information about location stacks, see the [Notes](#notes).
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 02/04/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/push-location?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Push-Location
