### YamlMime:PowershellCmdlet
summary: |-
  Stops a script in the debugger before running the next statement in the script.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Enable-DscDebug
  href: /powershell/module/PSDesiredStateConfiguration/Enable-DscDebug
syntaxes:
- Wait-Debugger [<CommonParameters>]
examples:
- title: 'Example 1: Insert breakpoint for debugging'
  code: |-
    [DscResource()]
    class FileResource
    {
        [DscProperty(Key)]
        [string] $Path

        [DscProperty(Mandatory)]
        [Ensure] $Ensure

        [DscProperty(Mandatory)]
        [string] $SourcePath

        [DscProperty(NotConfigurable)]
        [Nullable[datetime]] $CreationTime


        [void] Set()
        {
            $fileExists = $this.TestFilePath($this.Path)
            if ($this.ensure -eq [Ensure]::Present)
            {
                if (! $fileExists)
                {
                   $this.CopyFile()
                }
            }
            else
            {
                if ($fileExists)
                {
                    Write-Verbose -Message "Deleting the file $($this.Path)"
                    Remove-Item -LiteralPath $this.Path -Force
                }
            }
        }

        [bool] Test()
        {
            $present = Test-Path -LiteralPath $this.Path

            if ($this.Ensure -eq [Ensure]::Present)
            {
                return $present
            }
            else
            {
                return (! $present)
            }
        }

        [FileResource] Get()
        {
            $present = Test-Path -Path $this.Path

            if ($present)
            {
                $file = Get-ChildItem -LiteralPath $this.Path
                $this.CreationTime = $file.CreationTime
                $this.Ensure = [Ensure]::Present
            }
            else
            {
                $this.CreationTime = $null
                $this.Ensure = [Ensure]::Absent
            }

            return $this
        }

        [void] CopyFile()
        {
            # Testing only - Remove before deployment!
            Wait-Debugger

            if (! (Test-Path -LiteralPath $this.SourcePath))
            {
                throw "SourcePath $($this.SourcePath) is not found."
            }

            if (Test-Path -LiteralPath $this.Path -PathType Container)
            {
                throw "Path $($this.Path) is a directory path"
            }

            Write-Verbose "Copying $($this.SourcePath) to $($this.Path)"

            Copy-Item -LiteralPath $this.SourcePath -Destination $this.Path -Force
        }
    }
  description: ""
  summary: ""
uid: Microsoft.PowerShell.Utility.Wait-Debugger
name: Wait-Debugger
description: |-
  Stops the PowerShell script execution engine at the point immediately after the `Wait-Debugger`
  cmdlet and waits for a debugger to be attached. This is similar to using
  `Enable-RunspaceDebug -BreakAll` in a DSC resource but breaks at a specific point in the script.

  > [!CAUTION]
  > Make sure you remove the `Wait-Debugger` lines after you are done. A running script appears to be
  > hung when it is stopped at a `Wait-Debugger`.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 03/30/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/wait-debugger?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Wait-Debugger
