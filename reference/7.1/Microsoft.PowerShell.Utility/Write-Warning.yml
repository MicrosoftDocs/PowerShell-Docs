### YamlMime:PowershellCmdlet
summary: |-
  Writes a warning message.
module: Microsoft.PowerShell.Utility
notes: |-
  The default value for the `$WarningPreference` variable is `Continue`, which displays the warning
  and then continues executing the command. To determine valid values for a preference variable such
  as `$WarningPreference`, set it to a string of random characters, such as "abc". The resulting error
  message lists the valid values.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains the warning to `Write-Warning`.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    `Write-Warning` writes only to the warning stream. It does not generate any other output.
links:
- text: about_Output_Streams
  href: ../Microsoft.PowerShell.Core/About/about_Output_Streams.md
- text: about_Redirection
  href: ../Microsoft.PowerShell.Core/About/about_Redirection.md
- text: Write-Debug
  href: Write-Debug.yml
- text: Write-Error
  href: Write-Error.yml
- text: Write-Host
  href: Write-Host.yml
- text: Write-Information
  href: Write-Information.yml
- text: Write-Output
  href: Write-Output.yml
- text: Write-Progress
  href: Write-Progress.yml
- text: Write-Verbose
  href: Write-Verbose.yml
syntaxes:
- Write-Warning [-Message] <String> [<CommonParameters>]
examples:
- title: 'Example 1: Write a warning message'
  code: |-
    Write-Warning "This is only a test warning."
  description: ""
  summary: |+
    This command displays the message "WARNING: This is only a test warning."

- title: 'Example 2: Pass a string to Write-Warning'
  code: |-
    $w = "This is only a test warning."
    $w | Write-Warning
  description: ""
  summary: |+
    This command shows that you can use a pipeline operator (`|`) to send a string to `Write-Warning`.
    You can save the string in a variable, as shown in this command, or pipe the string directly to
    `Write-Warning`.

- title: 'Example 3: Set the $WarningPreference variable and write a warning'
  code: |-
    PS> $WarningPreference
    Continue
    PS> Write-Warning "This is only a test warning."
    This is only a test warning.
    PS> $WarningPreference = "SilentlyContinue"
    PS> Write-Warning "This is only a test warning."
    PS> $WarningPreference = "Stop"
    PS> Write-Warning "This is only a test warning."
    WARNING: This is only a test message.
    Write-Warning : Command execution stopped because the shell variable "WarningPreference" is set to Stop.
    At line:1 char:14
         + Write-Warning <<<<  "This is only a test message."
  description: |-
    The first command displays the default value of the `$WarningPreference` variable, which is
    `Continue`. As a result, when you write a warning, the warning message is displayed and execution
    continues.

    When you change the value of the `$WarningPreference` variable, the effect of the `Write-Warning`
    command changes again. A value of `SilentlyContinue` suppresses the warning. A value of `Stop`
    displays the warning and then stops execution of the command.

    For more information about the `$WarningPreference` variable, see
    [about_Preference_Variables](../Microsoft.Powershell.Core/About/about_Preference_Variables.md).
  summary: |+
    This example shows the effect of the value of the `$WarningPreference` variable on a `Write-Warning`
    command.

- title: 'Example 4: Set the WarningAction parameter and write a warning'
  code: |-
    PS> Write-Warning "This is only a test warning." -WarningAction Inquire
    WARNING: This is only a test warning.
    Confirm
    Continue with this operation?
     [Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is "Y"):
  description: |-
    This command uses the `Write-Warning` cmdlet to display a warning. The **WarningAction** common
    parameter with a value of Inquire directs the system to prompt the user when the command displays a
    warning.

    For more information about the **WarningAction** common parameter, see
    [about_CommonParameters](../Microsoft.Powershell.Core/About/about_CommonParameters.md).
  summary: |+
    This example shows the effect of the **WarningAction** common parameter on a `Write-Warning`
    command. You can use the **WarningAction** common parameter with any cmdlet to determine how
    PowerShell responds to warnings resulting from that command. The **WarningAction** common parameter
    overrides the value of the `$WarningPreference` only for that particular command.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Message
  isRequired: true
  description: |+
    Specifies the warning message.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: Msg
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Write-Warning
name: Write-Warning
description: |-
  The `Write-Warning` cmdlet writes a warning message to the PowerShell host. The response to the
  warning depends on the value of the user's `$WarningPreference` variable and the use of the
  **WarningAction** common parameter.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 10/14/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/write-warning?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Write-Warning
