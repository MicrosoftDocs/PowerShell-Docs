### YamlMime:PowershellCmdlet
summary: |-
  Cancels an event subscription.
module: Microsoft.PowerShell.Utility
notes: |-
  No event sources available on the Linux or macOS platforms.

  Events, event subscriptions, and the event queue exist only in the current session. If you close the
  current session, the event queue is discarded and the event subscription is canceled.

  `Unregister-Event` cannot delete events created by using the `New-Event` cmdlet unless you have
  subscribed to the event by using the `Register-EngineEvent` cmdlet. To delete a custom event from
  the session, you must remove it programmatically or close the session.
inputs:
- name: <xref href="System.Management.Automation.PSEventSubscriber" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe the output from `Get-EventSubscriber` to `Unregister-Event`.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not return any output.
links:
- text: Get-Event
  href: Get-Event.yml
- text: Get-EventSubscriber
  href: Get-EventSubscriber.yml
- text: New-Event
  href: New-Event.yml
- text: Register-EngineEvent
  href: Register-EngineEvent.yml
- text: Register-ObjectEvent
  href: Register-ObjectEvent.yml
- text: Remove-Event
  href: Remove-Event.yml
- text: Unregister-Event
  href: Unregister-Event.yml
- text: Wait-Event
  href: Wait-Event.yml
syntaxes:
- Unregister-Event [-SourceIdentifier] <String> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
- Unregister-Event [-SubscriptionId] <Int32> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Cancel an event subscription by source identifier'
  code: |-
    PS C:\> Unregister-Event -SourceIdentifier "ProcessStarted"
  description: |-
    This command cancels the event subscription that has a source identifier of ProcessStarted.

    To find the source identifier of an event, use the `Get-Event` cmdlet. To find the source identifier
    of an event subscription, use the `Get-EventSubscriber` cmdlet.
  summary: ""
- title: 'Example 2: Cancel an event subscription by subscription identifier'
  code: |-
    PS C:\> Unregister-Event -SubscriptionId 2
  description: |-
    This command cancels the event subscription that has a subscription identifier of 2.

    To find the subscription identifier of an event subscription, use the `Get-EventSubscriber` cmdlet.
  summary: ""
- title: 'Example 3: Cancel all event subscriptions'
  code: |-
    PS C:\> Get-EventSubscriber -Force | Unregister-Event -Force
  description: |-
    This command cancels all event subscriptions in the session.

    The command uses the `Get-EventSubscriber` cmdlet to get all event subscriber objects in the
    session, including the subscribers that are hidden by using the **SupportEvent** parameter of the
    event registration cmdlets.

    It uses a pipeline operator (`|`) to send the subscriber objects to `Unregister-Event`, which
    deletes them from the session. To complete the task, the **Force** parameter is also required on
    `Unregister-Event`.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Cancels all event subscriptions, including subscriptions that were hidden by using the
    **SupportEvent** parameter of `Register-ObjectEvent`, `Register-WmiEvent`, and
    `Register-EngineEvent`.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: SourceIdentifier
  isRequired: true
  description: |+
    Specifies a source identifier that this cmdlet cancels event subscriptions.

    A **SourceIdentifier** or **SubscriptionId** parameter must be included in every command.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: SubscriptionId
  isRequired: true
  description: |+
    Specifies a source identifier ID that this cmdlet cancels event subscriptions.

    A **SourceIdentifier** or **SubscriptionId** parameter must be included in every command.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Unregister-Event
name: Unregister-Event
description: |-
  The `Unregister-Event` cmdlet cancels an event subscription that was created by using the
  `Register-EngineEvent`, `Register-ObjectEvent`, or `Register-WmiEvent` cmdlet.

  When an event subscription is canceled, the event subscriber is deleted from the session and the
  subscribed events are no longer added to the event queue. When you cancel a subscription to an event
  created by using the `New-Event` cmdlet, the new event is also deleted from the session.

  `Unregister-Event` does not delete events from the event queue. To delete events, use the
  `Remove-Event` cmdlet.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/unregister-event?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Unregister-Event
