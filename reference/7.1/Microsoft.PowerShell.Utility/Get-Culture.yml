### YamlMime:PowershellCmdlet
summary: |-
  Gets the current culture set in the operating system.
module: Microsoft.PowerShell.Utility
notes: |-
  You can also use the `$PsCulture` and `$PsUICulture` variables. The `$PsCulture` variable stores the
  name of the current culture and the `$PsUICulture` variable stores the name of the current UI
  culture.
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You cannot pipe input to this cmdlet.
outputs:
- name: <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="False" />
  description: |-
    `Get-Culture` returns an object that represents the current culture.
links:
- text: Set-Culture
  href: /powershell/module/international/set-culture
- text: Get-UICulture
  href: Get-UICulture.yml
syntaxes:
- Get-Culture [-NoUserOverrides] [<CommonParameters>]
- Get-Culture [-Name <String[]>] [-NoUserOverrides] [<CommonParameters>]
- Get-Culture [-ListAvailable] [<CommonParameters>]
examples:
- title: 'Example 1: Get culture settings'
  code: |-
    Get-Culture

    LCID             Name             DisplayName
    ----             ----             -----------
    1033             en-US            English (United States)
  description: |-
    This command displays information about the regional settings on the computer.
  summary: ""
- title: 'Example 2: Format the properties of a culture object'
  code: |-
    PS C:\> $C = Get-Culture
    PS C:\> $C | Format-List -Property *
    Parent                         : en
    LCID                           : 1033
    KeyboardLayoutId               : 1033
    Name                           : en-US
    IetfLanguageTag                : en-US
    DisplayName                    : English (United States)
    NativeName                     : English (United States)
    EnglishName                    : English (United States)
    TwoLetterISOLanguageName       : en
    ThreeLetterISOLanguageName     : eng
    ThreeLetterWindowsLanguageName : ENU
    CompareInfo                    : CompareInfo - 1033
    TextInfo                       : TextInfo - 1033
    IsNeutralCulture               : False
    CultureTypes                   : SpecificCultures, InstalledWin32Cultures, FrameworkCultures
    NumberFormat                   : System.Globalization.NumberFormatInfo
    DateTimeFormat                 : System.Globalization.DateTimeFormatInfo
    Calendar                       : System.Globalization.GregorianCalendar
    OptionalCalendars              : {System.Globalization.GregorianCalendar, System.Globalization.GregorianCalendar}
    UseUserOverride                : True
    IsReadOnly                     : False

    PS C:\> $C.Calendar
    MinSupportedDateTime : 1/1/0001 12:00:00 AM
    MaxSupportedDateTime : 12/31/9999 11:59:59 PM
    AlgorithmType        : SolarCalendar
    CalendarType         : Localized
    Eras                 : {1}
    TwoDigitYearMax      : 2029
    IsReadOnly           : False

    PS C:\> $C.DateTimeFormat
    AMDesignator                     : AM
    Calendar                         : System.Globalization.GregorianCalendar
    DateSeparator                    : /
    FirstDayOfWeek                   : Sunday
    CalendarWeekRule                 : FirstDay
    FullDateTimePattern              : dddd, MMMM dd, yyyy h:mm:ss tt
    LongDatePattern                  : dddd, MMMM dd, yyyy
    LongTimePattern                  : h:mm:ss tt
    MonthDayPattern                  : MMMM dd
    PMDesignator                     : PM
    RFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'
    ShortDatePattern                 : M/d/yyyy
    ShortTimePattern                 : h:mm tt
    SortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss
    TimeSeparator                    : :
    UniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'
    YearMonthPattern                 : MMMM, yyyy
    AbbreviatedDayNames              : {Sun, Mon, Tue, Wed...}
    ShortestDayNames                 : {Su, Mo, Tu, We...}
    DayNames                         : {Sunday, Monday, Tuesday, Wednesday...}
    AbbreviatedMonthNames            : {Jan, Feb, Mar, Apr...}
    MonthNames                       : {January, February, March, April...}
    IsReadOnly                       : False
    NativeCalendarName               : Gregorian Calendar
    AbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr...}
    MonthGenitiveNames               : {January, February, March, April...}

    PS C:\> $C.DateTimeFormat.FirstDayOfWeek
    Sunday
  description: |-
    This example demonstrates the vast amount of data in the culture object. It shows how to display the
    properties and sub-properties of the object.

    The first command uses the `Get-Culture` cmdlet to get the current culture settings on the computer.
    It stores the resulting culture object in the `$C` variable.

    The second command displays all of the properties of the culture object. It uses a pipeline operator
    (`|`) to send the culture object in `$C` to the `Format-List` cmdlet. It uses the **Property**
    parameter to display all (`*`) properties of the object. This command can be abbreviated as
    `$c | fl *`.

    The remaining commands explore the properties of the culture object by using dot notation to display
    the values of the object properties. You can use this notation to display the value of any property
    of the object.

    The third command uses dot notation to display the value of the **Calendar** property of the culture
    object.

    The fourth command uses dot notation to display the value of the **DataTimeFormat** property of the
    culture object.

    Many object properties have properties. The fifth command uses dot notation to display the value of
    the **FirstDayOfWeek** property of the **DateTimeFormat** property.
  summary: ""
- title: 'Example 3: Get a specific culture'
  code: |-
    Get-Culture -Name fr-FR

    LCID             Name             DisplayName
    ----             ----             -----------
    1036             fr-FR            French (France)
  description: ""
  summary: |+
    Get the CultureInfo object for French in France.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ListAvailable
  description: |+
    Retrieves all cultures supported by the current operating system.

    This parameter was introduced in PowerShell 6.2.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  description: |+
    Retrieve a specific culture based on the name.

    This parameter was introduced in PowerShell 6.2.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoUserOverrides
  description: |+
    Ignore user changes for current culture.

    This parameter was introduced in PowerShell 6.2.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Get-Culture
name: Get-Culture
description: |-
  The `Get-Culture` cmdlet gets information about the current culture settings. This includes
  information about the current language settings on the system, such as the keyboard layout, and the
  display format of items such as numbers, currency, and dates.

  You can also use the `Get-UICulture` cmdlet, which gets the current user interface culture on the
  system, and the [Set-Culture](/powershell/module/international/set-culture) cmdlet in the
  International module. The user-interface (UI) culture determines which text strings are used for
  user interface elements, such as menus and messages.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 11/01/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/get-culture?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-Culture
