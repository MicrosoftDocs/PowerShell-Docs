### YamlMime:PowershellCmdlet
summary: |-
  Decrypts content that has been encrypted by using the Cryptographic Message Syntax format.
module: Microsoft.PowerShell.Security
notes: ""
inputs:
- name: <xref href="System.Diagnostics.Eventing.Reader.EventLogRecord or System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe an object containing encrypted content to `Unprotect-CmsMessage`.
outputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    The unencrypted message.
links:
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
- text: Get-CmsMessage
  href: Get-CmsMessage.yml
- text: Protect-CmsMessage
  href: Protect-CmsMessage.yml
syntaxes:
- >-
  Unprotect-CmsMessage [-EventLogRecord] <PSObject> [-IncludeContext] [[-To] <CmsMessageRecipient[]>]

   [<CommonParameters>]
- Unprotect-CmsMessage [-Content] <String> [-IncludeContext] [[-To] <CmsMessageRecipient[]>] [<CommonParameters>]
- Unprotect-CmsMessage [-Path] <String> [-IncludeContext] [[-To] <CmsMessageRecipient[]>] [<CommonParameters>]
- >-
  Unprotect-CmsMessage [-LiteralPath] <String> [-IncludeContext] [[-To] <CmsMessageRecipient[]>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Decrypt a message'
  code: |-
    $parameters = @{
      LiteralPath = "C:\Users\Test\Documents\PowerShell\Future_Plans.txt"
      To = '0f 8j b1 ab e0 ce 35 1d 67 d2 f2 6f a2 d2 00 cl 22 z9 m9 85'
    }
    Unprotect-CmsMessage -LiteralPath @parameters

    Try the new Break All command
  description: ""
  summary: |+
    In the following example, you decrypt content that is located at the literal path
    `C:\Users\Test\Documents\PowerShell`. For the value of the required **To** parameter, this example
    uses the thumbprint of the certificate that was used to perform the encryption. The decrypted
    message, "Try the new Break All command," is the result.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Content
  isRequired: true
  description: |+
    Specifies an encrypted string, or a variable containing an encrypted string.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: EventLogRecord
  isRequired: true
  description: |+
    Specifies an event log record ID that represents a CMS encryption operation.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: IncludeContext
  description: ""
  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies the path to encrypted content that you want to decrypt. Unlike **Path**, the value of
    **LiteralPath** is used exactly as it is typed. No characters are interpreted as wildcard
    characters. If the path includes escape characters, enclose it in single quotation marks. Single
    quotation marks tell PowerShell not to interpret any characters as escape sequences.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the path to encrypted content that you want to decrypt.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.CmsMessageRecipient" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: To
  description: |+
    Specifies one or more CMS message recipients, identified in any of the following formats:

    - An actual certificate (as retrieved from the certificate provider).
    - Path to the a file containing the certificate.
    - Path to a directory containing the certificate.
    - Thumbprint of the certificate (used to look in the certificate store).
    - Subject name of the certificate (used to look in the certificate store).

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Security.Unprotect-CmsMessage
name: Unprotect-CmsMessage
description: |-
  The `Unprotect-CmsMessage` cmdlet decrypts content that has been encrypted by using the
  Cryptographic Message Syntax (CMS) format.

  The CMS cmdlets support encryption and decryption of content using the IETF standard format for
  cryptographically protecting messages, as documented by
  [RFC5652](https://tools.ietf.org/html/rfc5652).

  The CMS encryption standard uses public key cryptography, where the keys used to encrypt content
  (the public key) and the keys used to decrypt content (the private key) are separate. Your public
  key can be shared widely, and is not sensitive data. If any content is encrypted with this public
  key, only your private key can decrypt it. For more information, see
  [Public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography).

  `Unprotect-CmsMessage` decrypts content that has been encrypted in CMS format. You can run this
  cmdlet to decrypt content that you have encrypted by running the `Protect-CmsMessage` cmdlet. You
  can specify content that you want to decrypt as a string, by the encryption event log record ID
  number, or by path to the encrypted content. The `Unprotect-CmsMessage` cmdlet returns the decrypted
  content.

  Support for Linux and macOS was added in PowerShell 7.1.
metadata:
  external help file: Microsoft.PowerShell.Security.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Security
  ms.date: 02/03/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.security/unprotect-cmsmessage?view=powershell-7.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Unprotect-CmsMessage
