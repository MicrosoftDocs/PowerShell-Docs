### YamlMime:PowershellCmdlet
summary: |-
  Resolves the wildcard characters in a path, and displays the path contents.
module: Microsoft.PowerShell.Management
notes: |-
  PowerShell includes the following aliases for `Resolve-Path`:

  - All platforms:
    - `rvpa`

  The `*-Path` cmdlets work with the **FileSystem**, **Registry**, and **Certificate** providers.

  `Resolve-Path` is designed to work with any provider. To list the providers available in your
  session, type `Get-PSProvider`. For more information, see
  [about_providers](../microsoft.powershell.core/about/about_providers.md).

  `Resolve-Path` only resolves existing paths. It cannot be used to resolve a location that does not
  exist yet.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains a path to this cmdlet.
outputs:
- name: <xref href="System.Management.Automation.PathInfo" data-throw-if-not-resolved="False" />
  description: |-
    By default, this cmdlet returns a **PathInfo** object.
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    If you specify the **Relative** parameter, this cmdlet returns a string value for the resolved path.
links:
- text: Convert-Path
  href: Convert-Path.yml
- text: Join-Path
  href: Join-Path.yml
- text: Split-Path
  href: Split-Path.yml
- text: Test-Path
  href: Test-Path.yml
syntaxes:
- Resolve-Path [-Path] <string[]> [-Relative] [-Credential <pscredential>] [<CommonParameters>]
- >-
  Resolve-Path [-Path] <string[]> -RelativeBasePath <string> [-Credential <pscredential>]

   [<CommonParameters>]
- Resolve-Path -LiteralPath <string[]> [-Relative] [-Credential <pscredential>] [<CommonParameters>]
- >-
  Resolve-Path -LiteralPath <string[]> -RelativeBasePath <string> [-Credential <pscredential>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Resolve the home folder path'
  code: |-
    PS C:\> Resolve-Path ~

    Path
    ----
    C:\Users\User01
  description: ""
  summary: |+
    The tilde character (`~`) is shorthand notation for the current user's home folder. This example
    shows `Resolve-Path` returning the fully qualified path value.

- title: 'Example 2: Resolve the path of the Windows folder'
  code: |-
    PS C:\> Resolve-Path -Path "windows"

    Path
    ----
    C:\Windows
  description: |-
    When run from the root of the `C:` drive, this command returns the path of the `Windows` folder in
    the `C:` drive.
  summary: ""
- title: 'Example 3: Get all paths in the Windows folder'
  code: |-
    PS C:\> "C:\windows\*" | Resolve-Path
  description: |-
    This command returns all the files and folders in the `C:\Windows` folder. The command uses a
    pipeline operator (`|`) to send a path string to `Resolve-Path`.
  summary: ""
- title: 'Example 4: Resolve a UNC path'
  code: |-
    PS C:\> Resolve-Path -Path "\\Server01\public"
  description: |-
    This command resolves a Universal Naming Convention (UNC) path and returns the shares in the path.
  summary: ""
- title: 'Example 5: Get relative paths'
  code: |-
    PS C:\> Resolve-Path -Path "c:\prog*" -Relative

    .\Program Files
    .\Program Files (x86)
    .\programs.txt
  description: |-
    This command returns relative paths for the directories at the root of the `C:` drive.
  summary: ""
- title: 'Example 6: Resolve a path containing brackets'
  code: |-
    PS C:\> Resolve-Path -LiteralPath 'test[xml]'
  description: ""
  summary: |+
    This example uses the **LiteralPath** parameter to resolve the path of the `Test[xml]` subfolder.
    Using **LiteralPath** causes the brackets to be treated as normal characters rather than a regular
    expression.

- title: 'Example 7: Resolve a path relative to another folder'
  code: |-
    $ExecutablePath = Get-Command -Name pwsh | Select-Object -ExpandProperty Source
    Resolve-Path -Path $ExecutablePath -RelativeBasePath $env:TEMP

    Path
    ----
    C:\Program Files\PowerShell\7-preview\pwsh.exe

    Resolve-Path -Path $ExecutablePath -RelativeBasePath $env:TEMP -Relative

    ..\..\..\..\..\Program Files\PowerShell\7-preview\pwsh.exe
  description: ""
  summary: |+
    This example uses the **RelativeBasePath** parameter to resolve the path of the `pwsh` executable
    relative to `$env:TEMP`, returning the **System.Management.Automation.PathInfo** object for the
    resolved path. When the command includes the **Relative** switch parameter, it returns a **String**
    representing the relative path from `$env:TEMP` to the `pwsh` executable.

parameters:
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to perform this action. The default is the current
    user.

    Type a user name, such as `User01` or `Domain01\User01`, or pass a **PSCredential** object. You can
    create a **PSCredential** object using the `Get-Credential` cmdlet. If you type a user name, this
    cmdlet prompts you for a password.

    This parameter is not supported by any providers installed with PowerShell.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies the path to be resolved. The value of the **LiteralPath** parameter is used exactly as
    typed. No characters are interpreted as wildcard characters. If the path includes escape characters,
    enclose it in single quotation marks (`'`). Single quotation marks tell PowerShell not to interpret
    any characters as escape sequences.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath, LP
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the PowerShell path to resolve. This parameter is required. You can also pipe a path
    string to `Resolve-Path`. Wildcard characters are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Relative
  description: |+
    Indicates that this cmdlet returns a relative path.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RelativeBasePath
  isRequired: true
  description: |+
    Specifies a path to resolve the relative path from. When you use this parameter, the cmdlet returns
    the **System.Management.Automation.PathInfo** object for the resolved path.

    When you use this parameter with the **Relative** switch parameter, the cmdlet returns a string
    representing the relative path from **RelativeBasePath** to **Path**.

    This parameter was added in PowerShell 7.4.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Resolve-Path
name: Resolve-Path
description: |-
  The `Resolve-Path` cmdlet displays the items and containers that match the wildcard pattern at the
  location specified. The match can include files, folders, registry keys, or any other object
  accessible from a **PSDrive** provider.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 08/22/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.management/resolve-path?view=powershell-7.4&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Resolve-Path
