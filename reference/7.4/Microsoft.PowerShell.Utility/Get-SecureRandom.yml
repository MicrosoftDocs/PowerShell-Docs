### YamlMime:PowershellCmdlet
summary: |-
  Gets a random number, or selects objects randomly from a collection.
module: Microsoft.PowerShell.Utility
notes: |-
  `Get-SecureRandom` doesn't always return the same data type as the input value. The following table
  shows the output type for each of the numeric input types.

  | Input Type | Output Type |
  | :--------: | :---------: |
  |   SByte    |   Double    |
  |    Byte    |   Double    |
  |   Int16    |   Double    |
  |   UInt16   |   Double    |
  |   Int32    |    Int32    |
  |   UInt32   |   Double    |
  |   Int64    |    Int64    |
  |   UInt64   |   Double    |
  |   Double   |   Double    |
  |   Single   |   Double    |
inputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe any object to this cmdlet. It selects values randomly from the piped objects.
outputs:
- name: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Int64" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Double" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns an integer or floating-point number, or an object selected randomly from a
    submitted collection.
links:
- text: Get-Random
  href: Get-Random.yml
syntaxes:
- Get-SecureRandom [[-Maximum] <Object>] [-Minimum <Object>] [-Count <Int32>] [<CommonParameters>]
- Get-SecureRandom [-InputObject] <Object[]> [-Count <Int32>] [<CommonParameters>]
- Get-SecureRandom [-InputObject] <Object[]> [-Shuffle] [<CommonParameters>]
examples:
- title: 'Example 1: Get a random integer'
  code: |-
    Get-SecureRandom

    3951433
  description: ""
  summary: |+
    This command gets a random integer between 0 (zero) and **Int32.MaxValue**.

- title: 'Example 2: Get a random integer between 0 and 99'
  code: |-
    Get-SecureRandom -Maximum 100

    47
  description: ""
  summary: ""
- title: 'Example 3: Get a random integer between -100 and 99'
  code: |-
    Get-SecureRandom -Minimum -100 -Maximum 100

    56
  description: ""
  summary: ""
- title: 'Example 4: Get a random floating-point number'
  code: |-
    Get-SecureRandom -Minimum 10.7 -Maximum 20.93

    18.08467273887
  description: ""
  summary: |+
    This command gets a random floating-point number greater than or equal to 10.7 and less than 20.93.

- title: 'Example 5: Get a random integer from an array'
  code: |-
    1, 2, 3, 5, 8, 13 | Get-SecureRandom

    8
  description: ""
  summary: |+
    This command gets a randomly selected number from the specified array.

- title: 'Example 6: Get several random integers from an array'
  code: |-
    1, 2, 3, 5, 8, 13 | Get-SecureRandom -Count 3

    3
    1
    13
  description: ""
  summary: |+
    This command gets three randomly selected numbers in random order from an array.

- title: 'Example 7: Randomize an entire collection'
  code: |-
    1, 2, 3, 5, 8, 13 | Get-SecureRandom -Shuffle

    2
    3
    5
    1
    8
    13
  description: ""
  summary: |+
    You can use the **Shuffle** parameter to return the entire collection in
    a random order.

- title: 'Example 8: Get a random non-numeric value'
  code: |-
    "red", "yellow", "blue" | Get-SecureRandom

    yellow
  description: ""
  summary: |+
    This command returns a random value from a non-numeric collection.

- title: 'Example 9: Get random files'
  code: |-
    $Files = Get-ChildItem -Path C:\* -Recurse
    $Sample = $Files | Get-SecureRandom -Count 50
  description: ""
  summary: |+
    These commands get a randomly selected sample of 50 files from the `C:` drive of the local computer.

- title: 'Example 10: Roll fair dice'
  code: |-
    1..1200 | ForEach-Object {
        1..6 | Get-SecureRandom
    } | Group-Object | Select-Object Name,Count

    Name Count
    ---- -----
    1      206
    2      199
    3      196
    4      226
    5      185
    6      188
  description: ""
  summary: |+
    This example rolls a fair die 1200 times and counts the outcomes. The first command,
    `ForEach-Object` repeats the call to `Get-SecureRandom` from the piped in numbers (1-6). The results
    are grouped by their value with `Group-Object` and formatted as a table with `Select-Object`.

- title: 'Example 11: Use the Count parameter'
  code: |-
    Get-SecureRandom -Count 3 -Maximum 10

    9
    0
    8
  description: ""
  summary: |+
    You can use the **Count** parameter without piping objects to `Get-SecureRandom`. The following
    example gets three random numbers less than 10.

- title: 'Example 12: Use the InputObject parameter with an empty string or $null'
  code: |-
    Get-SecureRandom -InputObject @('a','',$null)
  description: |-
    `Get-SecureRandom` returns either `a`, empty string, or `$null`. The empty sting displays as a blank
    line and `$null` returns to a PowerShell prompt.
  summary: |+
    In this example, the **InputObject** parameter specifies an array that contains an empty string
    (`''`) and `$null`.

parameters:
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Count
  description: |+
    Specifies the number of random objects to return. The default is 1.

    When used with `InputObject` containing a collection:

    - Each randomly selected item is returned only once.
    - If the value of **Count** exceeds the number of objects in the collection, all objects in the
      collection are returned in random order.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies a collection of objects. `Get-SecureRandom` gets randomly selected objects in random order
    from the collection up to the number specified by **Count**. Enter the objects, a variable that
    contains the objects, or a command or expression that gets the objects. You can also pipe a
    collection of objects to `Get-SecureRandom`.

    The **InputObject** parameter accepts arrays that can contain an empty
    string or `$null`. The array can be sent down the pipeline or as an **InputObject** parameter value.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Maximum
  description: |+
    Specifies a maximum value for the random number. `Get-SecureRandom` returns a value that's less than
    the maximum (not equal). Enter an integer, a double-precision floating-point number, or an object
    that can be converted to an integer or double, such as a numeric string ("100").

    The value of **Maximum** must be greater than (not equal to) the value of **Minimum**. If the value
    of **Maximum** or **Minimum** is a floating-point number, `Get-SecureRandom` returns a randomly
    selected floating-point number.

    On a 64-bit computer, if the value of **Minimum** is a 32-bit integer, the default value of
    **Maximum** is **Int32.MaxValue**.

    If the value of **Minimum** is a double (a floating-point number), the default value of **Maximum**
    is **Double.MaxValue**. Otherwise, the default value is **Int32.MaxValue**.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Minimum
  description: |+
    Specifies a minimum value for the random number. Enter an integer, a double-precision floating-point
    number, or an object that can be converted to an integer or double, such as a numeric string
    ("100"). The default value is 0 (zero).

    The value of **Minimum** must be less than (not equal to) the value of **Maximum**. If the value of
    **Maximum** or **Minimum** is a floating-point number, `Get-SecureRandom` returns a randomly
    selected floating-point number.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Shuffle
  isRequired: true
  description: |+
    Returns the entire collection in a randomized order.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Get-SecureRandom
name: Get-SecureRandom
description: |-
  The `Get-SecureRandom` cmdlet gets a randomly selected number. If you submit a collection of objects
  to `Get-SecureRandom`, it gets one or more randomly selected objects from the collection.

  Without parameters or input, a `Get-SecureRandom` command returns a randomly selected 32-bit
  unsigned integer between 0 (zero) and `[int32]::MaxValue`.

  You can use the parameters of `Get-SecureRandom` to specify the minimum and maximum values and the
  number of objects returned from a collection.

  `Get-SecureRandom` generates cryptographically secure randomness using the
  [RandomNumberGenerator](/dotnet/api/system.security.cryptography.randomnumbergenerator) class.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/25/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/get-securerandom?view=powershell-7.4&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-SecureRandom
