### YamlMime:PowershellCmdlet
summary: |-
  Tests whether a string is a valid JSON document
module: Microsoft.PowerShell.Utility
notes: |-
  Since PowerShell 6, PowerShell uses the Newtonsoft.Json assemblies for JSON functions. Newtonsoft's
  implementation includes several extensions to the JSON standard, such as support for comments and
  use of single quotes. For a full list of features, see the Newtonsoft documentation at
  [https://www.newtonsoft.com/json](https://www.newtonsoft.com/json).

  Beginning in PowerShell 7.4, `Test-Json` uses
  [JsonSchema.NET](https://www.nuget.org/packages/JsonSchema.Net) for schema validation. With this
  change, `Test-Json` no longer supports Draft 4 schemas. For more information about JSON schema
  specifications, see the documentation at
  [JSON-Schema.org](https://json-schema.org/specification.html).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a JSON string to this cmdlet.
outputs:
- name: <xref href="Boolean" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns `$true` if the JSON is valid and otherwise `$false`.
links:
- text: An Introduction to JavaScript Object Notation (JSON) in JavaScript and .NET
  href: /previous-versions/dotnet/articles/bb299886(v=msdn.10)
- text: Additional JSON Schema Details
  href: https://json-schema.org/
- text: ConvertTo-Json
  href: ConvertTo-Json.yml
- text: Invoke-WebRequest
  href: Invoke-WebRequest.yml
- text: Invoke-RestMethod
  href: Invoke-RestMethod.yml
syntaxes:
- Test-Json [-Json] <String> [<CommonParameters>]
- Test-Json [-Json] <string> [-Schema] <string> [<CommonParameters>]
- Test-Json [-Json] <string> [-SchemaFile] <string> [<CommonParameters>]
- Test-Json [-Path] <string> [<CommonParameters>]
- Test-Json [-Path] <string> [-Schema] <string> [<CommonParameters>]
- Test-Json [-Path] <string> [-SchemaFile] <string> [<CommonParameters>]
- Test-Json [-LiteralPath] <string> [<CommonParameters>]
- Test-Json [-LiteralPath] <string> [-Schema] <string> [<CommonParameters>]
- Test-Json [-LiteralPath] <string> [-SchemaFile] <string> [<CommonParameters>]
examples:
- title: 'Example 1: Test if an object is valid JSON'
  code: |-
    "{'name': 'Ashley', 'age': 25}" | Test-Json

    True
  description: ""
  summary: |+
    This example tests whether the input string is a valid JSON document.

- title: 'Example 2: Test an object against a provided schema'
  code: |-
    $schema = @'
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "http://example.com/root.json",
      "type": "object",
      "title": "The Root Schema",
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "name": {
          "$id": "#/properties/name",
          "type": "string",
          "title": "The Name Schema",
          "default": "",
          "examples": [
            "Ashley"
          ],
          "pattern": "^(.*)$"
        },
        "age": {
          "$id": "#/properties/age",
          "type": "integer",
          "title": "The Age Schema",
          "default": 0,
          "examples": [
            25
          ]
        }
      }
    }
    '@
    "{'name': 'Ashley', 'age': '25'}" | Test-Json -Schema $schema

    Test-Json : IntegerExpected: #/age
    At line:1 char:37
    + "{'name': 'Ashley', 'age': '25'}" | Test-Json -Schema $schema
    +                                     ~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Test-Json], Exception
    + FullyQualifiedErrorId : InvalidJsonAgainstSchema,Microsoft.PowerShell.Commands.TestJsonCommand
    False
  description: |-
    In this example, we get an error because the schema expects an integer for **age** but the JSON
    input we tested uses a string value instead.

    For more information, see [JSON Schema](https://json-schema.org/).
  summary: |+
    This example takes a string containing a JSON schema and compares it to an input string.

- title: 'Example 3: Test an object against a schema from file'
  code: |-
    Get-Content schema.json

    {
      "description":"A person",
      "type":"object",
      "properties":{
        "name":{
          "$ref":"definitions.json#/definitions/name"
        },
        "hobbies":{
          "$ref":"definitions.json#/definitions/hobbies"
        }
      }
    }

    Get-Content definitions.json

    {
      "definitions":{
        "name":{
          "type":"string"
        },
        "hobbies":{
          "type":"array",
          "items":{
            "type":"string"
          }
        }
      }
    }

    '{"name": "James", "hobbies": [".NET", "Blogging"]}' | Test-Json -SchemaFile 'schema.json'

    True
  description: |-
    For more information, see
    [Structuring a complex schema](https://json-schema.org/understanding-json-schema/structuring.html).
  summary: |+
    JSON schema can reference definitions using `$ref` keyword. The `$ref` can resolve to a URI that
    references another file. The **SchemaFile** parameter accepts literal path to the JSON schema file
    and allows JSON files to be validated against such schemas.

    In this example the `schema.json` file references `definitions.json`.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Json
  isRequired: true
  description: |+
    Specifies the JSON string to test for validity. Enter a variable that contains the string, or type a
    command or expression that gets the string. You can also pipe a string to `Test-Json`.

    The **Json** parameter is required.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to a JSON file. The value of **LiteralPath** is used exactly as it's typed. No
    characters are interpreted as wildcards. If the path includes escape characters, enclose it in
    single quotation marks. Single quotation marks tell PowerShell not to interpret any characters as
    escape sequences.

    This parameter was added in PowerShell 7.4.

  defaultValue: None
  position: Named
  aliases: PSPath, LP
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the path to a JSON file. This cmdlet gets the item at the specified location. Wildcard
    characters are permitted but the pattern must resolve to a single file.

    This parameter was added in PowerShell 7.4.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Schema
  description: |+
    Specifies a schema to validate the JSON input against. If passed, `Test-Json` validates that the
    JSON input conforms to the spec specified by the **Schema** parameter and return `$true` only if the
    input conforms to the provided schema.

    For more information, see [JSON Schema](https://json-schema.org/).

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: SchemaFile
  description: |+
    Specifies a schema file used to validate the JSON input. When used, the `Test-Json` returns `$true`
    only if the JSON input conforms to the schema defined in the file specified by the **SchemaFile**
    parameter.

    For more information, see [JSON Schema](https://json-schema.org/).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Test-Json
name: Test-Json
description: |-
  The `Test-Json` cmdlet tests whether a string is a valid JavaScript Object Notation (JSON) document
  and can optionally verify that JSON document against a provided schema.

  The verified string can then be used with the `ConvertFrom-Json` cmdlet convert a JSON-formatted
  string to a JSON object, which is easily managed in PowerShell or sent to another program or web
  service that access JSON input.

  Many web sites use JSON instead of XML to serialize data for communication between servers and
  web-based apps.

  This cmdlet was introduced in PowerShell 6.1
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/02/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/test-json?view=powershell-7.4&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-Json
