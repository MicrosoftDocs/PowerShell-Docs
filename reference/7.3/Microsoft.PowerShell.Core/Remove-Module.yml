### YamlMime:PowershellCmdlet
summary: |-
  Removes modules from the current session.
module: Microsoft.PowerShell.Core
notes: |-
  PowerShell includes the following aliases for `Remove-Module`:

  - All platforms:
    - `rmo`

  When you remove a module, there is an event is triggered that can be used to run some cleanup code.
  For more details, see [Example 5](#example-5-using-the-onremove-event).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a module name to this cmdlet.
- name: <xref href="System.Management.Automation.PSModuleInfo" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a module object to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns no output.
links:
- text: Get-Module
  href: Get-Module.yml
- text: Import-Module
  href: Import-Module.yml
- text: about_Modules
  href: About/about_Modules.md
syntaxes:
- Remove-Module [-Name] <String[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Remove-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Force] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- Remove-Module [-ModuleInfo] <PSModuleInfo[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Remove a module'
  code: |-
    Remove-Module -Name "BitsTransfer"
  description: |-
    This command removes the **BitsTransfer** module from the current session.
  summary: ""
- title: 'Example 2: Remove all modules'
  code: |-
    Get-Module | Remove-Module
  description: |-
    This command removes all modules from the current session.
  summary: ""
- title: 'Example 3: Remove modules by using the pipeline'
  code: |-
    "FileTransfer", "PSDiagnostics" | Remove-Module -Verbose

    VERBOSE: Performing operation "Remove-Module" on Target "filetransfer (Path: 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\filetransfer\filetransfer.psd1')".
    VERBOSE: Performing operation "Remove-Module" on Target "Microsoft.BackgroundIntelligentTransfer.Management (Path: 'C:\Windows\assembly\GAC_MSIL\Microsoft.BackgroundIntelligentTransfer.Management\1.0.0.0__31bf3856ad364e35\Microsoft.BackgroundIntelligentTransfe
    r.Management.dll')".
    VERBOSE: Performing operation "Remove-Module" on Target "psdiagnostics (Path: 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\psdiagnostics\psdiagnostics.psd1')".
    VERBOSE: Removing imported function 'Start-Trace'.
    VERBOSE: Removing imported function 'Stop-Trace'.
    VERBOSE: Removing imported function 'Enable-WSManTrace'.
    VERBOSE: Removing imported function 'Disable-WSManTrace'.
    VERBOSE: Removing imported function 'Enable-PSWSManCombinedTrace'.
    VERBOSE: Removing imported function 'Disable-PSWSManCombinedTrace'.
    VERBOSE: Removing imported function 'Set-LogProperties'.
    VERBOSE: Removing imported function 'Get-LogProperties'.
    VERBOSE: Removing imported function 'Enable-PSTrace'.
    VERBOSE: Removing imported function 'Disable-PSTrace'.
    VERBOSE: Performing operation "Remove-Module" on Target "PSDiagnostics (Path: 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\psdiagnostics\PSDiagnostics.psm1')".
  description: |-
    This command removes the **BitsTransfer** and **PSDiagnostics** modules from the current session.

    The command uses a pipeline operator (`|`) to send the module names to `Remove-Module`. It uses the
    **Verbose** common parameter to get detailed information about the members that are removed.

    The **Verbose** messages show the items that are removed. The messages differ because the
    BitsTransfer module includes an assembly that implements its cmdlets and a nested module with its
    own assembly. The PSDiagnostics module includes a module script file (`.psm1`) that exports
    functions.
  summary: ""
- title: 'Example 4: Remove a module using ModuleInfo'
  code: |-
    $a = Get-Module BitsTransfer
    Remove-Module -ModuleInfo $a
  description: |-
    This command uses the **ModuleInfo** parameter to remove the BitsTransfer module.
  summary: ""
- title: 'Example 5: Using the OnRemove event'
  code: |-
    $OnRemoveScript = {
        # perform cleanup
        $cachedSessions | Remove-PSSession
    }
    $ExecutionContext.SessionState.Module.OnRemove += $OnRemoveScript

    $registerEngineEventSplat = @{
        SourceIdentifier = ([System.Management.Automation.PsEngineEvent]::Exiting)
        Action = $OnRemoveScript
    }
    Register-EngineEvent @registerEngineEventSplat
  description: |-
    The `$OnRemoveScript` variable contains the script block that cleans up the resources. You register
    the script block by assigning it to `$ExecutionContext.SessionState.Module.OnRemove`. You can also
    use `Register-EngineEvent` to have the script block execute when the PowerShell session ends.

    For script-based modules, you would add this code to the `.PSM1` file or put it in a startup script
    that is listed in the **ScriptsToProcess** property of the module manifest.
  summary: |+
    When removing a module, there is an event trigger by the module that allows a module to react to
    being removed and perform some cleanup task, such as freeing resources.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Indicates that this cmdlet removes read-only modules. By default, `Remove-Module` removes only
    read-write modules.

    The **ReadOnly** and **ReadWrite** values are stored in **AccessMode** property of a module.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PowerShell.Commands.ModuleSpecification" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: FullyQualifiedName
  isRequired: true
  description: |+
    The value can be a module name, a full module specification, or a path to a module file.

    When the value is a path, the path can be fully qualified or relative. A relative path is resolved
    relative to the script that contains the using statement.

    When the value is a name or module specification, PowerShell searches the **PSModulePath** for the
    specified module.

    A module specification is a hashtable that has the following keys.

    - `ModuleName` - **Required** Specifies the module name.
    - `GUID` - **Optional** Specifies the GUID of the module.
    - It's also **Required** to specify at least one of the three below keys.
      - `ModuleVersion` - Specifies a minimum acceptable version of the module.
      - `MaximumVersion` - Specifies the maximum acceptable version of the module.
      - `RequiredVersion` - Specifies an exact, required version of the module. This can't be used with
        the other Version keys.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSModuleInfo" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ModuleInfo
  isRequired: true
  description: |+
    Specifies the module objects to remove. Enter a variable that contains a **PSModuleInfo** object or
    a command that gets a module object, such as a `Get-Module` command. You can also pipe module
    objects to `Remove-Module`.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies the names of modules to remove. Wildcard characters are permitted. You can also pipe name
    strings to `Remove-Module`.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Core.Remove-Module
name: Remove-Module
description: |-
  The `Remove-Module` cmdlet removes the members of a module, such as cmdlets and functions, from the
  current session.

  If the module includes an assembly (`.dll`), all members that are implemented by the assembly are
  removed, but the assembly isn't unloaded.

  This cmdlet doesn't uninstall the module or delete it from the computer. It affects only the current
  PowerShell session.
metadata:
  external help file: System.Management.Automation.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Core
  ms.date: 07/10/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.core/remove-module?view=powershell-7.3&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Remove-Module
