### YamlMime:PowershellCmdlet
summary: |-
  Performs an operation against each item in a collection of input objects.
module: Microsoft.PowerShell.Core
notes: |-
  - The `ForEach-Object` cmdlet works much like the **Foreach** statement, except that you cannot pipe
    input to a **Foreach** statement. For more information about the **Foreach** statement, see
    [about_Foreach](./About/about_Foreach.md).

  - Starting in PowerShell 4.0, `Where` and `ForEach` methods were added for use with collections. You
    can read more about these new methods here [about_arrays](./About/about_Arrays.md)

  - The `ForEach-Object -Parallel` parameter set uses PowerShell's internal API to run each script
    block. This is significantly more overhead than running `ForEach-Object` normally with sequential
    processing. It is important to use **Parallel** where the overhead of running in parallel is small
    compared to work the script block performs. For example:

    - Compute intensive scripts on multi-core machines
    - Scripts that spend time waiting for results or doing file operations

    Using the **Parallel** parameter can cause scripts to run much slower than normal. Especially if
    the parallel scripts are trivial. Experiment with **Parallel** to discover where it can be
    beneficial.

    > [!IMPORTANT]
    > The `ForEach-Object -Parallel` parameter set runs script blocks in parallel on separate process
    > threads. The `$using:` keyword allows passing variable references from the cmdlet invocation
    > thread to each running script block thread. Since the script blocks run in different threads,
    > the object variables passed by reference must be used safely. Generally it is safe to read from
    > referenced objects that don't change. But if the object state is being modified then you must
    > used thread safe objects, such as .Net **System.Collection.Concurrent** types (See Example 11).
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe any object to this cmdlet.
outputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns objects that are determined by the input.
links:
- text: Compare-Object
  href: ../Microsoft.PowerShell.Utility/Compare-Object.yml
- text: Where-Object
  href: Where-Object.yml
- text: Group-Object
  href: ../Microsoft.PowerShell.Utility/Group-Object.yml
- text: Measure-Object
  href: ../Microsoft.PowerShell.Utility/Measure-Object.yml
- text: New-Object
  href: ../Microsoft.PowerShell.Utility/New-Object.yml
- text: Select-Object
  href: ../Microsoft.PowerShell.Utility/Select-Object.yml
- text: Sort-Object
  href: ../Microsoft.PowerShell.Utility/Sort-Object.yml
- text: Tee-Object
  href: ../Microsoft.PowerShell.Utility/Tee-Object.yml
syntaxes:
- >-
  ForEach-Object [-InputObject <PSObject>] [-Begin <ScriptBlock>] [-Process] <ScriptBlock[]>

   [-End <ScriptBlock>] [-RemainingScripts <ScriptBlock[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  ForEach-Object [-InputObject <PSObject>] [-MemberName] <String> [-ArgumentList <Object[]>] [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  ForEach-Object -Parallel <scriptblock> [-InputObject <PSObject>] [-ThrottleLimit <int>]

  [-UseNewRunspace] [-TimeoutSeconds <int>] [-AsJob] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Divide integers in an array'
  code: |-
    30000, 56798, 12432 | ForEach-Object -Process {$_/1024}

    29.296875
    55.466796875
    12.140625
  description: ""
  summary: |+
    This example takes an array of three integers and divides each one of them by 1024.

- title: 'Example 2: Get the length of all the files in a directory'
  code: |-
    Get-ChildItem $PSHOME |
      ForEach-Object -Process {if (!$_.PSIsContainer) {$_.Name; $_.Length / 1024; " " }}
  description: |-
    If the object is not a directory, the script block gets the name of the file, divides the value of
    its **Length** property by 1024, and adds a space (" ") to separate it from the next entry. The
    cmdlet uses the **PSISContainer** property to determine whether an object is a directory.
  summary: |+
    This example processes the files and directories in the PowerShell installation directory `$PSHOME`.

- title: 'Example 3: Operate on the most recent System events'
  code: |-
    $Events = Get-EventLog -LogName System -Newest 1000
    $events | ForEach-Object -Begin {Get-Date} -Process {Out-File -FilePath Events.txt -Append -InputObject $_.Message} -End {Get-Date}
  description: |-
    `Get-EventLog` gets the 1000 most recent events from the System event log and stores them in the
    `$Events` variable. `$Events` is then piped to the `ForEach-Object` cmdlet. The **Begin** parameter
    displays the current date and time. Next, the **Process** parameter uses the `Out-File` cmdlet to
    create a text file that is named events.txt and stores the message property of each of the events in
    that file. Last, the **End** parameter is used to display the date and time after all of the
    processing has completed.
  summary: |+
    This example writes the 1000 most recent events from the System event log to a text file. The
    current time is displayed before and after processing the events.

- title: 'Example 4: Change the value of a Registry key'
  code: |-
    Get-ItemProperty -Path HKCU:\Network\* |
      ForEach-Object {Set-ItemProperty -Path $_.PSPath -Name RemotePath -Value $_.RemotePath.ToUpper();}
  description: |-
    You can use this format to change the form or content of a registry entry value.

    Each subkey in the **Network** key represents a mapped network drive that reconnects at sign on. The
    **RemotePath** entry contains the UNC path of the connected drive. For example, if you map the E:
    drive to `\\Server\Share`, an **E** subkey is created in `HKCU:\Network` with the **RemotePath**
    registry value set to `\\Server\Share`.

    The command uses the `Get-ItemProperty` cmdlet to get all of the subkeys of the **Network** key and
    the `Set-ItemProperty` cmdlet to change the value of the **RemotePath** registry entry in each key.
    In the `Set-ItemProperty` command, the path is the value of the **PSPath** property of the registry
    key. This is a property of the Microsoft .NET Framework object that represents the registry key, not
    a registry entry. The command uses the **ToUpper()** method of the **RemotePath** value, which is a
    string (REG_SZ).

    Because `Set-ItemProperty` is changing the property of each key, the `ForEach-Object` cmdlet is
    required to access the property.
  summary: |+
    This example changes the value of the **RemotePath** registry entry in all of the subkeys under the
    `HKCU:\Network` key to uppercase text.

- title: 'Example 5: Use the $Null automatic variable'
  code: |-
    1, 2, $null, 4 | ForEach-Object {"Hello"}

    Hello
    Hello
    Hello
    Hello
  description: |-
    Because PowerShell treats null as an explicit placeholder, the `ForEach-Object` cmdlet generates a
    value for `$Null`, just as it does for other objects that you pipe to it.
  summary: |+
    This example shows the effect of piping the `$Null` automatic variable to the `ForEach-Object`
    cmdlet.

- title: 'Example 6: Get property values'
  code: |-
    Get-Module -ListAvailable | ForEach-Object -MemberName Path
    Get-Module -ListAvailable | Foreach Path
  description: |-
    The second command is equivalent to the first. It uses the `Foreach` alias of the `ForEach-Object`
    cmdlet and omits the name of the **MemberName** parameter, which is optional.

    The `ForEach-Object` cmdlet is useful for getting property values, because it gets the value without
    changing the type, unlike the **Format** cmdlets or the `Select-Object` cmdlet, which change the
    property value type.
  summary: |+
    This example gets the value of the **Path** property of all installed PowerShell modules by using
    the **MemberName** parameter of the `ForEach-Object` cmdlet.

- title: 'Example 7: Split module names into component names'
  code: |-
    "Microsoft.PowerShell.Core", "Microsoft.PowerShell.Host" | ForEach-Object {$_.Split(".")}
    "Microsoft.PowerShell.Core", "Microsoft.PowerShell.Host" | ForEach-Object -MemberName Split -ArgumentList "."
    "Microsoft.PowerShell.Core", "Microsoft.PowerShell.Host" | Foreach Split "."

    Microsoft
    PowerShell
    Core
    Microsoft
    PowerShell
    Host
  description: |-
    The commands call the **Split** method of strings. The three commands use different syntax, but they
    are equivalent and interchangeable.

    The first command uses the traditional syntax, which includes a script block and the current object
    operator `$_`. It uses the dot syntax to specify the method and parentheses to enclose the delimiter
    argument.

    The second command uses the **MemberName** parameter to specify the **Split** method and the
    **ArgumentName** parameter to identify the dot (".") as the split delimiter.

    The third command uses the **Foreach** alias of the `ForEach-Object` cmdlet and omits the names of
    the **MemberName** and **ArgumentList** parameters, which are optional.
  summary: |+
    This example shows three ways to split two dot-separated module names into their component names.

- title: 'Example 8: Using ForEach-Object with two script blocks'
  code: |-
    1..2 | ForEach-Object { 'begin' } { 'process' }

    begin
    process
    process
  description: ""
  summary: |+
    In this example, we pass two script blocks positionally. All the script blocks bind to the
    **Process** parameter. However, they are treated as if they had been passed to the **Begin** and
    **Process** parameters.

- title: 'Example 9: Using ForEach-Object with more than two script blocks'
  code: |-
    1..2 | ForEach-Object { 'begin' } { 'process A' }  { 'process B' }  { 'end' }

    begin
    process A
    process B
    process A
    process B
    end
  description: |-
    > [!NOTE]
    > The first script block is always mapped to the `begin` block, the last block is mapped to the
    > `end` block, and the blocks in between are all mapped to the `process` block.
  summary: |+
    In this example, we pass two script blocks positionally. All the script blocks bind to the
    **Process** parameter. However, they are treated as if they had been passed to the **Begin**,
    **Process**, and **End** parameters.

- title: 'Example 10: Run multiple script blocks for each pipeline item'
  code: |-
    1..2 | ForEach-Object -Begin $null -Process { 'one' }, { 'two' }, { 'three' } -End $null

    one
    two
    three
    one
    two
    three
  description: ""
  summary: |+
    As shown in the previous example, multiple script blocks passed using the **Process** parameter get
    mapped to the **Begin** and **End** parameters. To avoid this mapping, you must provide explicit
    values for the **Begin** and **End** parameters.

- title: 'Example 11: Run slow script in parallel batches'
  code: |-
    $Message = "Output:"

    1..8 | ForEach-Object -Parallel {
        "$using:Message $_"
        Start-Sleep 1
    } -ThrottleLimit 4

    Output: 1
    Output: 2
    Output: 3
    Output: 4
    Output: 5
    Output: 6
    Output: 7
    Output: 8
  description: |-
    The **ThrottleLimit** parameter value is set to 4 so that the input is processed in batches of four.
    The `$using:` keyword is used to pass the `$Message` variable into each parallel script block.
  summary: |+
    This example runs a simple script block that evaluates a string and sleeps for one second.

- title: 'Example 12: Retrieve log entries in parallel'
  code: |-
    $logNames = 'Security','Application','System','Windows PowerShell','Microsoft-Windows-Store/Operational'

    $logEntries = $logNames | ForEach-Object -Parallel {
        Get-WinEvent -LogName $_ -MaxEvents 10000
    } -ThrottleLimit 5

    $logEntries.Count

    50000
  description: |-
    The **Parallel** parameter specifies the script block that is run in parallel for each input log
    name. The **ThrottleLimit** parameter ensures that all five script blocks run at the same time.
  summary: |+
    This example retrieves 50,000 log entries from 5 system logs on a local Windows machine.

- title: 'Example 13: Run in parallel as a job'
  code: |-
    $job = 1..10 | ForEach-Object -Parallel {
        "Output: $_"
        Start-Sleep 1
    } -ThrottleLimit 2 -AsJob

    $job | Receive-Job -Wait

    Output: 1
    Output: 2
    Output: 3
    Output: 4
    Output: 5
    Output: 6
    Output: 7
    Output: 8
    Output: 9
    Output: 10
  description: |-
    the `$job` variable receives the job object that collects output data and monitors running state.
    The job object is piped to `Receive-Job` with the **Wait** switch parameter. And this streams output
    to the console, just as if `ForEach-Object -Parallel` was run without **AsJob**.
  summary: |+
    This example runs a simple script block in parallel, creating two background jobs at a time.

- title: 'Example 14: Using thread safe variable references'
  code: |-
    $threadSafeDictionary = [System.Collections.Concurrent.ConcurrentDictionary[string,object]]::new()
    Get-Process | ForEach-Object -Parallel {
        $dict = $using:threadSafeDictionary
        $dict.TryAdd($_.ProcessName, $_)
    }

    $threadSafeDictionary["pwsh"]

    NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
     ------    -----      -----     ------      --  -- -----------
         82    82.87     130.85      15.55    2808   2 pwsh
  description: |-
    A single instance of a **ConcurrentDictionary** object is passed to each script block to collect the
    objects. Since the **ConcurrentDictionary** is thread safe, it is safe to be modified by each
    parallel script. A non-thread-safe object, such as **System.Collections.Generic.Dictionary**, would
    not be safe to use here.

    > [!NOTE]
    > This example is a very inefficient use of **Parallel** parameter. The script simply adds the input
    > object to a concurrent dictionary object. It is trivial and not worth the overhead of invoking
    > each script in a separate thread. Running `ForEach-Object` normally without the **Parallel**
    > switch is much more efficient and faster. This example is only intended to demonstrate how to use
    > thread safe variables.
  summary: |+
    This example invokes script blocks in parallel to collect uniquely named Process objects.

- title: 'Example 15: Writing errors with parallel execution'
  code: |-
    1..3 | ForEach-Object -Parallel {
        Write-Error "Error: $_"
    }

    Write-Error: Error: 1
    Write-Error: Error: 3
    Write-Error: Error: 2
  description: ""
  summary: |+
    This example writes to the error stream in parallel, where the order of written errors is random.

- title: 'Example 16: Terminating errors in parallel execution'
  code: |-
    1..5 | ForEach-Object -Parallel {
        if ($_ -eq 3)
        {
            throw "Terminating Error: $_"
        }

        Write-Output "Output: $_"
    }

    Exception: Terminating Error: 3
    Output: 1
    Output: 4
    Output: 2
    Output: 5
  description: |-
    `Output: 3` is never written because the parallel scriptblock for that iteration was terminated.
  summary: |+
    This example demonstrates a terminating error in one parallel running scriptblock.

parameters:
- type: <xref href="System.Object" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ArgumentList
  description: |+
    Specifies an array of arguments to a method call. For more information about the behavior of
    **ArgumentList**, see [about_Splatting](about/about_Splatting.md#splatting-with-arrays).

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: Named
  aliases: Args
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsJob
  description: |+
    Causes the parallel invocation to run as a PowerShell job. A single job object is returned instead
    of output from the running script blocks. The job object contains child jobs for each parallel
    script block that runs. The job object can be used by all PowerShell job cmdlets, to monitor running
    state and retrieve data.

    This parameter was introduced in PowerShell 7.0.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" />
  name: Begin
  description: |+
    Specifies a script block that runs before this cmdlet processes any input objects. This script block
    is only run once for the entire pipeline. For more information about the `begin` block, see
    [about_Functions](about/about_functions.md#piping-objects-to-functions).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" />
  name: End
  description: |+
    Specifies a script block that runs after this cmdlet processes all input objects. This script block
    is only run once for the entire pipeline. For more information about the `end` block, see
    [about_Functions](about/about_functions.md#piping-objects-to-functions).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  description: |+
    Specifies the input objects. `ForEach-Object` runs the script block or operation statement on each
    input object. Enter a variable that contains the objects, or type a command or expression that gets
    the objects.

    When you use the **InputObject** parameter with `ForEach-Object`, instead of piping command results
    to `ForEach-Object`, the **InputObject** value is treated as a single object. This is true even if
    the value is a collection that is the result of a command, such as `-InputObject (Get-Process)`.
    Because **InputObject** cannot return individual properties from an array or collection of objects,
    we recommend that if you use `ForEach-Object` to perform operations on a collection of objects for
    those objects that have specific values in defined properties, you use `ForEach-Object` in the
    pipeline, as shown in the examples in this topic.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MemberName
  isRequired: true
  description: |+
    Specifies the property to get or the method to call.

    Wildcard characters are permitted, but work only if the resulting string resolves to a unique value.
    For example, if you run `Get-Process | ForEach -MemberName *Name`, the wildcard pattern matches more
    than one member causing the command to fail.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  acceptWildcardCharacters: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" />
  name: Parallel
  isRequired: true
  description: |+
    Specifies the script block to be used for parallel processing of input objects. Enter a script block
    that describes the operation.

    This parameter was introduced in PowerShell 7.0.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Process
  isRequired: true
  description: |+
    Specifies the operation that is performed on each input object. This script block is run for every
    object in the pipeline. For more information about the `process` block, see
    [about_Functions](about/about_functions.md#piping-objects-to-functions).

    When you provide multiple script blocks to the **Process** parameter, the first script block is
    always mapped to the `begin` block. If there are only two script blocks, the second block is mapped
    to the `process` block. If there are three or more script blocks, first script block is always
    mapped to the `begin` block, the last block is mapped to the `end` block, and the blocks in between
    are all mapped to the `process` block.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: RemainingScripts
  description: |+
    Specifies all script blocks that are not taken by the **Process** parameter.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: ThrottleLimit
  description: |+
    Specifies the number of script blocks that in parallel. Input objects are blocked until
    the running script block count falls below the **ThrottleLimit**. The default value is `5`.

    This parameter was introduced in PowerShell 7.0.

  defaultValue: "5"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: TimeoutSeconds
  description: |+
    Specifies the number of seconds to wait for all input to be processed in parallel. After the
    specified timeout time, all running scripts are stopped. And any remaining input objects to be
    processed are ignored. Default value of `0` disables the timeout, and `ForEach-Object -Parallel` can
    run indefinitely. Typing <kbd>Ctrl</kbd>+<kbd>C</kbd> at the command line stops a running
    `ForEach-Object -Parallel` command. This parameter cannot be used along with the **AsJob**
    parameter.

    This parameter was introduced in PowerShell 7.0.

  defaultValue: "0"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Core.ForEach-Object
name: ForEach-Object
description: |-
  The `ForEach-Object` cmdlet performs an operation on each item in a collection of input objects. The
  input objects can be piped to the cmdlet or specified by using the **InputObject** parameter.

  Starting in Windows PowerShell 3.0, there are two different ways to construct a `ForEach-Object`
  command.

  - **Script block**. You can use a script block to specify the operation. Within the script block,
    use the `$_` variable to represent the current object. The script block is the value of the
    **Process** parameter. The script block can contain any PowerShell script.

    For example, the following command gets the value of the **ProcessName** property of each process
    on the computer.

    `Get-Process | ForEach-Object {$_.ProcessName}`

    `ForEach-Object` supports the `begin`, `process`, and `end` blocks as described in
    [about_functions](about/about_functions.md#piping-objects-to-functions).

    > [!NOTE]
    > The script blocks run in the caller's scope. Therefore the blocks have access to variables in
    > that scope and can create new variables that persist in that scope after the cmdlet completes.

  - **Operation statement**. You can also write an operation statement, which is much more like
    natural language. You can use the operation statement to specify a property value or call a
    method. Operation statements were introduced in Windows PowerShell 3.0.

    For example, the following command also gets the value of the **ProcessName** property of each
    process on the computer.

    `Get-Process | ForEach-Object ProcessName`

  - **Parallel running script block**. Beginning with PowerShell 7.0, a third parameter set is
    available that runs each script block in parallel. The **ThrottleLimit** parameter limits the
    number of parallel scripts running at a time. As before, use the `$_` variable to represent the
    current input object in the script block. Use the `$using:` keyword to pass variable references to
    the running script.

    In PowerShell 7, a new runspace is created for each loop iteration to ensure maximum isolation.
    This can be a large performance and resource hit if the work you are doing is small compared to
    creating new runspaces or if there are a lot of iterations performing significant work. As of
    PowerShell 7.1, runspaces from a runspace pool are reused by default. The runspace pool size is
    specified by the **ThrottleLimit** parameter. The default runspace pool size is 5. You can still
    create a new runspace for each iteration using the **UseNewRunspace** switch.

    By default, the parallel scriptblocks use the current working directory of the caller that started
    the parallel tasks.

    Non-terminating errors are written to the cmdlet error stream as they occur in parallel running
    scriptblocks. Because parallel scriptblock execution order cannot be determined, the order in
    which errors appear in the error stream is random. Likewise, messages written to other data
    streams, like warning, verbose, or information are written to those data streams in an
    indeterminate order.

    Terminating errors, such as exceptions, terminate the individual parallel instance of the
    scriptblocks in which they occur. A terminating error in one scriptblocks may not cause the
    termination of the `Foreach-Object` cmdlet. The other scriptblocks, running in parallel, continue
    to run unless they also encounter a terminating error. The terminating error is written to the
    error data stream as an **ErrorRecord** with a **FullyQualifiedErrorId** of `PSTaskException`.
    Terminating errors can be converted to non-terminating errors using PowerShell try/catch or trap
    blocks.
metadata:
  external help file: System.Management.Automation.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Core
  ms.date: 09/08/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.core/foreach-object?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: ForEach-Object
