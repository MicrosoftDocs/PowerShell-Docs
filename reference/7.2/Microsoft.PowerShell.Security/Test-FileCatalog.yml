### YamlMime:PowershellCmdlet
summary: |-
  `Test-FileCatalog` validates whether the hashes contained in a catalog file (.cat) matches the
  hashes of the actual files in order to validate their authenticity.

  This cmdlet is only supported on Windows.
module: Microsoft.PowerShell.Security
notes: |-
  This cmdlet is only available on Windows platforms.
inputs:
- name: <xref href="System.IO.DirectoryInfo" data-throw-if-not-resolved="False" /><span>[</span><xref href="], System.String[" data-throw-if-not-resolved="False" /><span>]</span>
  description: |-
    The pipeline accepts an array of strings or `DirectoryInfo` objects that represent paths to the
    files that need to be validated.
outputs:
- name: <xref href="System.Management.Automation.CatalogValidationStatus" data-throw-if-not-resolved="False" />
  description: |-
    The default return type containing a value of either `Valid` or `ValidationFailed`.
- name: <xref href="System.Management.Automation.CatalogInformation" data-throw-if-not-resolved="False" />
  description: |-
    A more detailed object returned when using `-Detailed` which can be used to analyze specific files
    that may or may not have passed validation, which hashes were expected vs. found, and the algorithm
    used in the catalog.
links:
- text: New-FileCatalog
  href: New-FileCatalog.yml
- text: PowerShellGet
  href: /powershell/module/PowerShellGet
syntaxes:
- >-
  Test-FileCatalog [-Detailed] [-FilesToSkip <String[]>] [-CatalogFilePath] <String> [[-Path] <String[]>]

   [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Create and validate a file catalog'
  code: |-
    New-FileCatalog -Path $PSHOME\Modules\Microsoft.PowerShell.Utility -CatalogFilePath \temp\Microsoft.PowerShell.Utility.cat -CatalogVersion 2.0

    Test-FileCatalog -CatalogFilePath \temp\Microsoft.PowerShell.Utility.cat -Path "$PSHome\Modules\Microsoft.PowerShell.Utility\"

    Valid
  description: ""
  summary: ""
- title: 'Example 2: Validate a file catalog with detailed output'
  code: |-
    Test-FileCatalog -Detailed -CatalogFilePath \temp\Microsoft.PowerShell.Utility.cat -Path "$PSHome\Modules\Microsoft.PowerShell.Utility\"

    Status        : Valid
    HashAlgorithm : SHA256
    CatalogItems  : {[Microsoft.PowerShell.Utility.psd1,
                    A7028BD54018AE519381CDF5BF91F3B0417BD9345478086089ACBFAD05C899FC], [Microsoft.PowerShell.Utility.psm1,
                    1127E8151FB86BCB683F932E8F6538552F7195816ED351A28AE07A753B8F20DE]}
    PathItems     : {[Microsoft.PowerShell.Utility.psd1,
                    A7028BD54018AE519381CDF5BF91F3B0417BD9345478086089ACBFAD05C899FC], [Microsoft.PowerShell.Utility.psm1,
                    1127E8151FB86BCB683F932E8F6538552F7195816ED351A28AE07A753B8F20DE]}
    Signature     : System.Management.Automation.Signature
  description: ""
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: CatalogFilePath
  isRequired: true
  description: |+
    A path to a catalog file (.cat) that contains the hashes to be used for validation.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Detailed
  description: |+
    Returns more information a more detailed `CatalogInformation` object that contains the files tested,
    their expected/actual hashes, and an Authenticode signature of the catalog file if it's signed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: FilesToSkip
  description: |+
    An array of paths that should not be tested as part of the validation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  description: |+
    A folder or array of files that should be validated against the catalog file.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Security.Test-FileCatalog
name: Test-FileCatalog
description: |-
  `Test-FileCatalog` validates the authenticity of files by comparing the file hashes of a catalog
  file (.cat) with the hashes of actual files on disk. If it detects any mismatches, it returns the
  status as ValidationFailed. Users can retrieve all this information by using the -Detailed
  parameter. It also displays signing status of catalog in Signature property which is equivalent to
  calling `Get-AuthenticodeSignature` cmdlet on the catalog file. Users can also skip any file during
  validation by using the -FilesToSkip parameter.

  This cmdlet is only supported on Windows.
metadata:
  external help file: Microsoft.PowerShell.Security.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Security
  ms.date: 11/02/2018
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.security/test-filecatalog?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-FileCatalog
