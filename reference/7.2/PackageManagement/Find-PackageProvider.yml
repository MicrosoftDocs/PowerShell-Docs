### YamlMime:PowershellCmdlet
summary: |-
  Returns a list of Package Management package providers available for installation.
module: PackageManagement
notes: |-
  > [!IMPORTANT]
  > As of April 2020, the PowerShell Gallery no longer supports Transport Layer Security (TLS)
  > versions 1.0 and 1.1. If you are not using TLS 1.2 or higher, you will receive an error when
  > trying to access the PowerShell Gallery. Use the following command to ensure you are using TLS
  > 1.2:
  >
  > `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`
  >
  > For more information, see the
  > [announcement](https://devblogs.microsoft.com/powershell/powershell-gallery-tls-support/) in the
  > PowerShell blog.
outputs:
- name: <xref href="Microsoft.PackageManagement.Packaging.SoftwareIdentity" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns a **SoftwareIdentity** object.
    A **SoftwareIdentity** object can be piped into **Install-PackageProvider** to install the results of **Find-PackageProvider**.
links:
- text: about_PackageManagement
  href: ../Microsoft.PowerShell.Core/About/about_PackageManagement.md
- text: Unregister-PackageSource
  href: Unregister-PackageSource.yml
- text: Get-PackageSource
  href: Get-PackageSource.yml
- text: Register-PackageSource
  href: Register-PackageSource.yml
- text: Install-PackageProvider
  href: Install-PackageProvider.yml
syntaxes:
- >-
  Find-PackageProvider [[-Name] <String[]>] [-AllVersions] [-Source <String[]>] [-IncludeDependencies]

   [-Credential <PSCredential>] [-Proxy <Uri>] [-ProxyCredential <PSCredential>] [-RequiredVersion <String>]

   [-MinimumVersion <String>] [-MaximumVersion <String>] [-Force] [-ForceBootstrap] [<CommonParameters>]
examples:
- title: 'Example 1: Find all available package providers'
  code: |-
    PS C:\> Find-PackageProvider
  description: |-
    This command gets a list of all package providers that are available on the repositories supported by Package Management.
    By default, those package providers are available on the PowerShell Gallery and by using the Package Management bootstrapping application.
  summary: ""
- title: 'Example 2: Find all versions of a provider'
  code: |-
    PS C:\> Find-PackageProvider -Name "Nuget" -AllVersions
  description: |-
    This command finds all versions of the package provider named Nuget.
  summary: ""
- title: 'Example 3: Find a provider from a specified source'
  code: |-
    PS C:\> Find-PackageProvider -Name "Gistprovider" -Source "PSGallery"
  description: |-
    This command finds a package provider available by using a specified package source.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllVersions
  description: |+
    Indicates that this cmdlet returns all available versions of the package provider.
    By default, **Find-PackageProvider** only returns the newest available version.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to search for package providers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.
    Currently, this is equivalent to the *ForceBootstrap* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceBootstrap
  description: |+
    Indicates that this cmdlet forces Package Management to automatically install the package provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: IncludeDependencies
  description: |+
    Indicates that this cmdlet includes dependencies.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum allowed version of the package provider that you want to find.
    If you do not add this parameter, **Find-PackageProvider** finds the highest available version of the provider.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum allowed version of the package provider that you want to find.
    If you do not add this parameter, **Find-PackageProvider** finds the highest available version of the package that also satisfies any maximum specified version specified by the *MaximumVersion* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  description: |+
    Specifies one or more package provider module names, or provider names with wildcard characters.
    Separate multiple package names with commas.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: Proxy
  description: |+
    Specifies a proxy server for the request, rather than connecting directly to the Internet resource.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: ProxyCredential
  description: |+
    Specifies a user account that has permission to use the proxy server that is specified by the **Proxy** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact allowed version of the package provider that you want to find.
    If you do not add this parameter, **Find-PackageProvider** finds the highest available version of the provider that also satisfies any maximum version specified by the *MaximumVersion* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Source
  description: |+
    Specifies one or more package sources.
    You can get a list of available package sources by using the Get-PackageSource cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: PackageManagement.Find-PackageProvider
name: Find-PackageProvider
description: |-
  The **Find-PackageProvider** cmdlet finds matching PackageManagement providers that are available in package sources registered with PowerShellGet.
  These are package providers available for installation with the Install-PackageProvider cmdlet.
  By default, this includes modules available in the PowerShell Gallery with the **PackageManagement** and **Provider** tags.

  **Find-PackageProvider** also finds matching Package Management providers that are available in the Package Management Azure Blob store.
  Use the bootstrapper provider to find and install them.
metadata:
  external help file: Microsoft.PowerShell.PackageManagement.dll-Help.xml
  Locale: en-US
  Module Name: PackageManagement
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/packagemanagement/find-packageprovider?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Find-PackageProvider
