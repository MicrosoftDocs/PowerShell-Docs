### YamlMime:PowershellCmdlet
summary: |-
  Gets the services on the computer.
module: Microsoft.PowerShell.Management
notes: |-
  This cmdlet is only available on Windows platforms.

  Beginning in PowerShell 6.0, the following properties are added to the **ServiceController**
  objects: **UserName**, **Description**, **DelayedAutoStart**, **BinaryPathName**, and
  **StartupType** .

  You can also refer to `Get-Service` by its built-in alias, `gsv`. For more information, see
  [about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).

  This cmdlet can display services only when the current user has permission to see them. If this
  cmdlet does not display services, you might not have permission to see them.

  To find the service name and display name of each service on your system, type `Get-Service`. The
  service names appear in the Name column, and the display names appear in the **DisplayName** column.

  When you sort in ascending order by the **Status** property's value, Stopped services appear before
  Running services. The service's **Status** property is an enumerated value and the status names
  represent integer values. The sort order is based on the integer value, not the name. Stopped
  appears before because Running because Stopped has a value of 1, and Running has a value of 4. For
  more information, see
  [ServiceControllerStatus](/dotnet/api/system.serviceprocess.servicecontrollerstatus).
inputs:
- name: <xref href="System.ServiceProcess.ServiceController, System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a service object or a service name to this cmdlet.
outputs:
- name: <xref href="System.ServiceProcess.ServiceController" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns objects that represent the services on the computer.
links:
- text: New-Service
  href: New-Service.yml
- text: Restart-Service
  href: Restart-Service.yml
- text: Resume-Service
  href: Resume-Service.yml
- text: Set-Service
  href: Set-Service.yml
- text: Start-Service
  href: Start-Service.yml
- text: Stop-Service
  href: Stop-Service.yml
- text: Suspend-Service
  href: Suspend-Service.yml
- text: Remove-Service
  href: Remove-Service.yml
syntaxes:
- >-
  Get-Service [[-Name] <String[]>] [-DependentServices] [-RequiredServices] [-Include <String[]>]

   [-Exclude <String[]>] [<CommonParameters>]
- >-
  Get-Service [-DependentServices] [-RequiredServices] -DisplayName <String[]> [-Include <String[]>]

   [-Exclude <String[]>] [<CommonParameters>]
- >-
  Get-Service [-DependentServices] [-RequiredServices] [-Include <String[]>] [-Exclude <String[]>]

   [-InputObject <ServiceController[]>] [<CommonParameters>]
examples:
- title: 'Example 1: Get all services on the computer'
  code: |-
    Get-Service
  description: ""
  summary: |+
    This example gets all of the services on the computer. It behaves as though you typed
    `Get-Service *`. The default display shows the status, service name, and display name of each
    service.

- title: 'Example 2: Get services that begin with a search string'
  code: |-
    Get-Service "wmi*"
  description: ""
  summary: |+
    This example retrieves services with service names that begin with WMI (Windows Management
    Instrumentation).

- title: 'Example 3: Display services that include a search string'
  code: |-
    Get-Service -Displayname "*network*"
  description: ""
  summary: |+
    This example displays services with a display name that includes the word network. Searching the
    display name finds network-related services even when the service name doesn't include Net, such as
    xmlprov, the Network Provisioning Service.

- title: 'Example 4: Get services that begin with a search string and an exclusion'
  code: |-
    Get-Service -Name "win*" -Exclude "WinRM"
  description: ""
  summary: |+
    This example only gets the services with service names that begin with **win**, except for the WinRM
    service.

- title: 'Example 5: Display services that are currently active'
  code: |-
    Get-Service | Where-Object {$_.Status -eq "Running"}
  description: |-
    `Get-Service` gets all the services on the computer and sends the objects down the pipeline. The
    `Where-Object` cmdlet, selects only the services with a **Status** property that equals Running.

    Status is only one property of service objects. To see all of the properties, type
    `Get-Service | Get-Member`.
  summary: |+
    This example displays only the services with a status of Running.

- title: 'Example 6: List the services on the computer that have dependent services'
  code: |-
    Get-Service |
      Where-Object {$_.DependentServices} |
        Format-List -Property Name, DependentServices, @{
          Label="NoOfDependentServices"; Expression={$_.dependentservices.count}
        }

    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1

    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...
  description: |-
    The `Get-Service` cmdlet gets all the services on the computer and sends the objects down the
    pipeline. The `Where-Object` cmdlet selects the services whose **DependentServices** property isn't
    null.

    The results are sent down the pipeline to the `Format-List` cmdlet. The **Property** parameter
    displays the name of the service, the name of the dependent services, and a calculated property that
    displays the number of dependent services for each service.
  summary: |+
    This example gets services that have dependent services.

- title: 'Example 7: Sort services by property value'
  code: |-
    Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
  description: ""
  summary: |+
    This example shows that when you sort services in ascending order by the value of their **Status**
    property, stopped services appear before running services. The reason is because the value of
    **Status** is an enumeration, in which Stopped has a value of 1, and Running has a value of 4. For
    more information, see
    [ServiceControllerStatus](/dotnet/api/system.serviceprocess.servicecontrollerstatus).

    To list running services first, use the **Descending** parameter of the `Sort-Object` cmdlet.

- title: 'Example 8: Get the dependent services of a service'
  code: |-
    Get-Service "WinRM" -RequiredServices
  description: ""
  summary: |+
    This example gets the services that the WinRM service requires. The value of the service's
    **ServicesDependedOn** property is returned.

- title: 'Example 9: Get a service through the pipeline operator'
  code: |-
    "WinRM" | Get-Service
  description: ""
  summary: |+
    This example gets the WinRM service on the local computer. The service name string, enclosed in
    quotation marks, is sent down the pipeline to `Get-Service`.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: DependentServices
  description: |+
    Indicates that this cmdlet gets only the services that depend upon the specified service.

  defaultValue: "False"
  position: Named
  aliases: DS
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DisplayName
  isRequired: true
  description: |+
    Specifies, as a string array, the display names of services to be retrieved. Wildcards are
    permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies, as a string array, a service or services that this cmdlet excludes from the operation.
    The value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such
    as `s*`. Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies, as a string array, a service or services that this cmdlet includes in the operation. The
    value of this parameter qualifies the **Name** parameter. Enter a name element or pattern, such as
    `s*`. Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.ServiceProcess.ServiceController" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  description: |+
    Specifies **ServiceController** objects representing the services to be retrieved. Enter a variable
    that contains the objects, or type a command or expression that gets the objects. You can pipe a
    service object to this cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  description: |+
    Specifies the service names of services to be retrieved. Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ServiceName
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: RequiredServices
  description: |+
    Indicates that this cmdlet gets only the services that this service requires. This parameter gets
    the value of the **ServicesDependedOn** property of the service.

  defaultValue: "False"
  acceptWildcardCharacters: true
  position: Named
  aliases: SDO, ServicesDependedOn
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Get-Service
name: Get-Service
description: |-
  The `Get-Service` cmdlet gets objects that represent the services on a computer, including running
  and stopped services. By default, when `Get-Service` is run without parameters, all the local
  computer's services are returned.

  You can direct this cmdlet to get only particular services by specifying the service name or the
  display name of the services, or you can pipe service objects to this cmdlet.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 10/30/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/get-service?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-Service
