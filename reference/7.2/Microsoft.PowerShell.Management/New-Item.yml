### YamlMime:PowershellCmdlet
summary: |-
  Creates a new item.
module: Microsoft.PowerShell.Management
notes: |-
  PowerShell includes the following aliases for `New-Item`:

  - All platforms:
    - `ni`

  `New-Item` is designed to work with the data exposed by any provider. To list the providers
  available in your session, type `Get-PsProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a value for the new item to this cmdlet.
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns the item that it creates.
links:
- text: Clear-Item
  href: Clear-Item.yml
- text: Copy-Item
  href: Copy-Item.yml
- text: Get-Item
  href: Get-Item.yml
- text: Invoke-Item
  href: Invoke-Item.yml
- text: Move-Item
  href: Move-Item.yml
- text: Remove-Item
  href: Remove-Item.yml
- text: Rename-Item
  href: Rename-Item.yml
- text: Set-Item
  href: Set-Item.yml
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
syntaxes:
- >-
  New-Item [-Path] <String[]> [-ItemType <String>] [-Value <Object>] [-Force]

   [-Credential <PSCredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-Item [[-Path] <String[]>] -Name <String> [-ItemType <String>] [-Value <Object>] [-Force]

   [-Credential <PSCredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-Item [-Path] <string[]> -ConnectionURI <uri> [-ItemType <string>] [-Value <Object>] [-Force]

   [-Credential <pscredential>] [-WhatIf] [-Confirm] [-OptionSet <hashtable>]

   [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>]

   [-SessionOption <SessionOption>] [-Port <int>] [<CommonParameters>]
- >-
  New-Item [[-Path] <string[]>] -Name <string> [-ItemType <string>] [-Value <Object>] [-Force]

   [-Credential <pscredential>] [-WhatIf] [-Confirm] [-OptionSet <hashtable>]

   [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>]

   [-SessionOption <SessionOption>] [-ApplicationName <string>] [-Port <int>] [-UseSSL]

   [<CommonParameters>]
- >-
  New-Item [-Path] <string[]> [-ItemType <string>] [-Value <Object>] [-Force]

   [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Options <ScopedItemOptions>]

   [<CommonParameters>]
- >-
  New-Item [[-Path] <string[]>] -Name <string> [-ItemType <string>] [-Value <Object>] [-Force]

   [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Options <ScopedItemOptions>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Create a file in the current directory'
  code: |-
    New-Item -Path . -Name "testfile1.txt" -ItemType "file" -Value "This is a text string."
  description: ""
  summary: |+
    This command creates a text file that is named "testfile1.txt" in the current directory. The dot
    ('.') in the value of the **Path** parameter indicates the current directory. The quoted text that
    follows the **Value** parameter is added to the file as content.

- title: 'Example 2: Create a directory'
  code: |-
    New-Item -Path "c:\" -Name "logfiles" -ItemType "directory"
  description: ""
  summary: |+
    This command creates a directory named "Logfiles" in the `C:` drive. The **ItemType** parameter
    specifies that the new item is a directory, not a file or other file system object.

- title: 'Example 3: Create a profile'
  code: |-
    New-Item -Path $profile -ItemType "file" -Force
  description: ""
  summary: |+
    This command creates a PowerShell profile in the path that is specified by the `$profile` variable.

    You can use profiles to customize PowerShell. `$profile` is an automatic (built-in) variable that
    stores the path and file name of the "CurrentUser/CurrentHost" profile. By default, the profile does
    not exist, even though PowerShell stores a path and file name for it.

    In this command, the `$profile` variable represents the path of the file. **ItemType** parameter
    specifies that the command creates a file. The **Force** parameter lets you create a file in the
    profile path, even when the directories in the path do not exist.

    After you create a profile, you can enter aliases, functions, and scripts in the profile to
    customize your shell.

    For more information, see [about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md)
    and [about_Profiles](../Microsoft.PowerShell.Core/About/about_Profiles.md).

- title: 'Example 4: Create a directory in a different directory'
  code: |-
    New-Item -ItemType "directory" -Path "c:\ps-test\scripts"
  description: ""
  summary: |+
    This example creates a new Scripts directory in the "C:\PS-Test" directory.

    The name of the new directory item, "Scripts", is included in the value of **Path** parameter,
    instead of being specified in the value of **Name**. As indicated by the syntax, either command form
    is valid.

- title: 'Example 5: Create multiple files'
  code: |-
    New-Item -ItemType "file" -Path "c:\ps-test\test.txt", "c:\ps-test\Logs\test.log"
  description: ""
  summary: |+
    This example creates files in two different directories. Because **Path** takes multiple strings,
    you can use it to create multiple items.

- title: 'Example 6: Use wildcards to create files in multiple directories'
  code: |-
    Get-ChildItem -Path C:\Temp\

    Directory:  C:\Temp

    Mode                LastWriteTime     Length Name
    ----                -------------     ------ ----
    d-----        5/15/2019   6:45 AM        1   One
    d-----        5/15/2019   6:45 AM        1   Two
    d-----        5/15/2019   6:45 AM        1   Three

    New-Item -Path C:\Temp\* -Name temp.txt -ItemType File | Select-Object FullName

    FullName
    --------
    C:\Temp\One\temp.txt
    C:\Temp\Three\temp.txt
    C:\Temp\Two\temp.txt
  description: |-
    The `Get-ChildItem` cmdlet shows three directories under the `C:\Temp` directory. Using wildcards
    the `New-Item` cmdlet creates a `temp.txt` file in all of the directories under the current
    directory. The `New-Item` cmdlet outputs the items you created, which is piped to `Select-Object`
    to verify the paths of the newly created files.
  summary: |+
    The `New-Item` cmdlet supports wildcards in the **Path** parameter. The following command creates a
    `temp.txt` file in all of the directories specified by the wildcards in the **Path** parameter.

- title: 'Example 7: Create a symbolic link to a file or folder'
  code: |-
    $link = New-Item -ItemType SymbolicLink -Path .\link -Target .\Notice.txt
    $link | Select-Object LinkType, Target

    LinkType     Target
    --------     ------
    SymbolicLink {.\Notice.txt}
  description: |-
    In this example, **Target** is an alias for the **Value** parameter. The target of the symbolic link
    can be a relative path. Prior to PowerShell v6.2, the target must be a fully-qualified path.

    Beginning in PowerShell 7.1, you can now create to a **SymbolicLink** to a folder on Windows using a
    relative path.
  summary: |+
    This example creates a symbolic link to the Notice.txt file in the current folder.

- title: 'Example 8: Use the -Force parameter to attempt to recreate folders'
  code: |-
    PS> New-Item -Path .\TestFolder -ItemType Directory
    PS> New-Item -Path .\TestFolder\TestFile.txt -ItemType File

    PS> New-Item -Path .\TestFolder -ItemType Directory -Force

        Directory: C:\
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    d-----         5/1/2020   8:03 AM                TestFolder

    PS> Get-ChildItem .\TestFolder\

        Directory: C:\TestFolder
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a----         5/1/2020   8:03 AM              0 TestFile.txt
  description: ""
  summary: |+
    This example creates a folder with a file inside. Then, attempts to create the same folder using
    `-Force`. It will not overwrite the folder but simply return the existing folder object with the
    file created intact.

- title: 'Example 9: Use the -Force parameter to overwrite existing files'
  code: |-
    PS> New-Item ./TestFile.txt -ItemType File -Value 'This is just a test file'

        Directory: C:\Source\Test
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a----         5/1/2020   8:32 AM             24 TestFile.txt

    New-Item ./TestFile.txt -ItemType File -Force

        Directory: C:\Source\Test
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a----         5/1/2020   8:32 AM              0 TestFile.txt
  description: |-
    > [!NOTE]
    > When using `New-Item` with the `-Force` switch to create registry keys, the command will behave
    > the same as when overwriting a file. If the registry key already exists, the key and all
    > properties and values will be overwritten with an empty registry key.
  summary: |+
    This example creates a file with a value and then recreates the file using `-Force`. This overwrites
    The existing file and it will lose it's content as you can see by the length property

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ApplicationName
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies the application name in the connection. The default value of the **ApplicationName**
    parameter is **WSMAN**.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.WSMan.Management.AuthenticationMechanism" data-throw-if-not-resolved="False" />
  name: Authentication
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies the authentication mechanism to be used at the server.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies the digital public key certificate (X509) of a user account that has permission to perform
    this WSMan action. Enter the certificate thumbprint of the certificate.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: ConnectionURI
  isRequired: true
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies the connection endpoint for WSMan.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter isn't supported by any providers installed with PowerShell. To impersonate another
    > user or elevate your credentials when running this cmdlet, use `Invoke-Command`.

  defaultValue: Current user
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces this cmdlet to create an item that writes over an existing read-only item. Implementation
    varies from provider to provider. Even using the **Force** parameter, the cmdlet can't override
    security restrictions.

    You can't use **Force** to overwrite an existing Junction. Attempts to overwrite an existing
    Junction fail with a "cannot be removed because it is not empty" error. You must remove the
    existing Junction before creating a new one.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ItemType
  description: |+
    Specifies the provider-specified type of the new item. The available values of this parameter depend
    on the current provider you are using.

    If your location is in a `FileSystem` drive, the following values are allowed:

    - File
    - Directory
    - SymbolicLink
    - Junction
    - HardLink

    > [!NOTE]
    > Creating a `SymbolicLink` type on Windows requires elevation as administrator. However, Windows 10
    > (build 14972 or newer) with Developer Mode enabled no longer requires elevation creating symbolic
    > links.

    In a `Certificate` drive, these are the values you can specify:

    - Certificate Provider
    - Certificate
    - Store
    - StoreLocation

    For more information see [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Type
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the new item. You can specify the name of the new item in the **Name** or
    **Path** parameter value, and you can specify the path of the new item in **Name** or **Path**
    value. Items names passed using the **Name** parameter are created relative to the value of the
    **Path** parameter.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScopedItemOptions" data-throw-if-not-resolved="False" />
  name: Options
  description: |+
    This is a dynamic parameter made available by the **Alias** provider. For more information, see
    [New-Alias](../Microsoft.PowerShell.Utility/New-Alias.yml).

    Specifies the value of the **Options** property of an alias.

    Valid values are:

    - `None`: The alias has no constraints (default value)
    - `ReadOnly`: The alias can be deleted but can't be changed without using the **Force** parameter
    - `Constant`: The alias can't be deleted or changed
    - `Private`: The alias is available only in the current scope
    - `AllScope`: The alias is copied to any new scopes that are created
    - `Unspecified`: The option isn't specified

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: OptionSet
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Passes a set of switches to a service to modify or refine the nature of the request.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: OS
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  description: |+
    Specifies the path of the location of the new item. The default is the current location when
    **Path** is omitted. You can specify the name of the new item in **Name**, or include it in
    **Path**. Items names passed using the **Name** parameter are created relative to the value of the
    **Path** parameter.

    For this cmdlet, the **Path** parameter works like the **LiteralPath** parameter of other cmdlets.
    Wildcard characters are not interpreted. All characters are passed to the location's provider. The
    provider may not support all characters. For example, you can't create a filename that contains an
    asterisk (`*`) character.

  defaultValue: Current location
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Port
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies the port to use when the client connects to the WinRM service.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.WSMan.Management.SessionOption" data-throw-if-not-resolved="False" />
  name: SessionOption
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Defines a set of extended options for the WS-Management session.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: SO
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseSSL
  description: |+
    This is a dynamic parameter made available by the **WSMan** provider. The **WSMan** provider and
    this parameter are only available on Windows.

    Specifies that the Secure Sockets Layer (SSL) protocol should be used to establish a connection to
    the remote computer. By default, SSL isn't used.

    For more information, see [New-WSManInstance](../Microsoft.WSMan.Management/New-WSManInstance.yml).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Value
  description: |+
    Specifies the value of the new item. You can also pipe a value to `New-Item`.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Target
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.New-Item
name: New-Item
description: |-
  The `New-Item` cmdlet creates a new item and sets its value. The types of items that can be created
  depend on the location of the item. For example, in the file system, `New-Item` creates files and
  folders. In the registry, `New-Item` creates registry keys and entries.

  `New-Item` can also set the value of the items that it creates. For example, when it creates a new
  file, `New-Item` can add initial content to the file.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 06/30/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.management/new-item?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: New-Item
