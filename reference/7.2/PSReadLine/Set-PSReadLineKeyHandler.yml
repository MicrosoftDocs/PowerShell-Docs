### YamlMime:PowershellCmdlet
summary: |-
  Binds keys to user-defined or PSReadLine key handler functions.
module: PSReadLine
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You can't pipe objects to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns no output.
links:
- text: Get-PSReadLineKeyHandler
  href: Get-PSReadLineKeyHandler.yml
- text: Remove-PSReadLineKeyHandler
  href: Remove-PSReadLineKeyHandler.yml
- text: Get-PSReadLineOption
  href: Get-PSReadLineOption.yml
- text: Set-PSReadLineOption
  href: Set-PSReadLineOption.yml
syntaxes:
- >-
  Set-PSReadLineKeyHandler [-ScriptBlock] <ScriptBlock> [-BriefDescription <String>]

   [-Description <String>] [-Chord] <String[]> [-ViMode <ViMode>] [<CommonParameters>]
- >-
  Set-PSReadLineKeyHandler [-Chord] <String[]> [-ViMode <ViMode>] [-Function] <String>

   [<CommonParameters>]
examples:
- title: 'Example 1: Bind the arrow key to a function'
  code: |-
    Set-PSReadLineKeyHandler -Chord UpArrow -Function HistorySearchBackward
  description: ""
  summary: |+
    This command binds the up arrow key to the **HistorySearchBackward** function. This function
    searches command history for command lines that start with the current contents of the command line.

- title: 'Example 2: Bind a key to a script block'
  code: |-
    Set-PSReadLineKeyHandler -Chord Ctrl+B -ScriptBlock {
        [Microsoft.PowerShell.PSConsoleReadLine]::RevertLine()
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert('build')
        [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()
    }
  description: ""
  summary: |+
    This example shows how a single key can be used to run a command. The command binds the key `Ctrl+B`
    to a script block that clears the line, inserts the word "build", and then accepts the line.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: BriefDescription
  description: |+
    A brief description of the key binding. This description is displayed by the
    `Get-PSReadLineKeyHandler` cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Chord
  isRequired: true
  description: |+
    The key or sequence of keys to be bound to a function or script block. Use a single string to
    specify a single binding. If the binding is a sequence of keys, separate the keys by a comma, as in
    the following example:

    `Ctrl+X,Ctrl+L`

    > [!NOTE]
    > As of PSReadLine 2.0.0, the **Chord** parameter is **case-sensitive**. Meaning,
    > <kbd>Ctrl</kbd>+<kbd>X</kbd> and <kbd>Ctrl</kbd>+<kbd>x</kbd> create different bindings.

    This parameter accepts an array of strings. Each string is a separate binding, not a sequence of
    keys for a single binding.

  defaultValue: None
  position: "0"
  aliases: Key
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Specifies a more detailed description of the key binding that is visible in the output of the
    `Get-PSReadLineKeyHandler` cmdlet.

  defaultValue: None
  position: Named
  aliases: LongDescription
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Function
  isRequired: true
  description: |+
    Specifies the name of an existing key handler provided by PSReadLine. This parameter lets you rebind
    existing key bindings, or bind a handler that is currently unbound.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" />
  name: ScriptBlock
  isRequired: true
  description: |+
    Specifies a script block value to run when the chord is entered. PSReadLine passes one or two
    parameters to this script block. The first parameter is a **ConsoleKeyInfo** object representing the
    key pressed. The second argument can be any object depending on the context.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PowerShell.ViMode" data-throw-if-not-resolved="False" />
  name: ViMode
  description: |+
    Specify which vi mode the binding applies to.

    Valid values are:

    - `Insert`
    - `Command`

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: PSReadLine.Set-PSReadLineKeyHandler
name: Set-PSReadLineKeyHandler
description: |-
  The `Set-PSReadLineKeyHandler` cmdlet customizes the result when a key or sequence of keys is
  pressed. With user-defined key bindings, you can do almost anything that is possible from within a
  PowerShell script.
metadata:
  external help file: Microsoft.PowerShell.PSReadLine2.dll-Help.xml
  Locale: en-US
  Module Name: PSReadLine
  ms.date: 12/13/2022
  online version: https://learn.microsoft.com/powershell/module/psreadline/set-psreadlinekeyhandler?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-PSReadLineKeyHandler
