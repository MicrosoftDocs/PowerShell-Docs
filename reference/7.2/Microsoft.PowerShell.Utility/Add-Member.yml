### YamlMime:PowershellCmdlet
summary: |-
  Adds custom properties and methods to an instance of a PowerShell object.
module: Microsoft.PowerShell.Utility
notes: |-
  You can add members only to **PSObject** type objects. To determine whether an object is a
  **PSObject** object, use the `-is` operator. For instance, to test an object stored in the `$obj`
  variable, type `$obj -is [psobject]`.

  **PSObject** type objects maintain their list of members in the order that the members were added to
  the object.

  The names of the **MemberType**, **Name**, **Value**, and **SecondValue** parameters are optional.
  If you omit the parameter names, the unnamed parameter values must appear in this order:
  **MemberType**, **Name**, **Value**, and **SecondValue**.

  If you include the parameter names, the parameters can appear in any order.

  You can use the `$this` automatic variable in script blocks that define the values of new properties
  and methods. The `$this` variable refers to the instance of the object to which the properties and
  methods are being added. For more information about the `$this` variable, see
  [about_Automatic_Variables](../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md).
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe any object to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    By default, this cmdlet returns no output.
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, this cmdlet returns the newly extended object.
links:
- text: Export-Clixml
  href: Export-Clixml.yml
- text: Get-Member
  href: Get-Member.yml
- text: Import-Clixml
  href: Import-Clixml.yml
- text: New-Object
  href: New-Object.yml
- text: about_Automatic_Variables
  href: ../Microsoft.PowerShell.Core/About/about_Automatic_Variables.md
- text: System.Type.GetMethod()
  href: /dotnet/api/system.type.getmethod
syntaxes:
- Add-Member -InputObject <PSObject> -TypeName <String> [-PassThru] [<CommonParameters>]
- >-
  Add-Member -InputObject <PSObject> [-TypeName <String>] [-Force] [-PassThru]

   [-NotePropertyMembers] <IDictionary> [<CommonParameters>]
- >-
  Add-Member -InputObject <PSObject> [-TypeName <String>] [-Force] [-PassThru]

   [-NotePropertyName] <String> [-NotePropertyValue] <Object> [<CommonParameters>]
- >-
  Add-Member -InputObject <PSObject> [-MemberType] <PSMemberTypes> [-Name] <String>

   [[-Value] <Object>] [[-SecondValue] <Object>] [-TypeName <String>] [-Force] [-PassThru]

   [<CommonParameters>]
examples:
- title: 'Example 1: Add a note property to a PSObject'
  code: |-
    $A = Get-ChildItem c:\ps-test\test.txt
    $A | Add-Member -NotePropertyName Status -NotePropertyValue Done
    $A.Status

    Done
  description: ""
  summary: |+
    The following example adds a **Status** note property with a value of "Done" to the **FileInfo**
    object that represents the `Test.txt` file.

    The first command uses the `Get-ChildItem` cmdlet to get a **FileInfo** object representing
    the `Test.txt` file. It saves it in the `$a` variable.

    The second command adds the note property to the object in `$a`.

    The third command uses dot notation to get the value of the **Status** property of the object in
    `$a`. As the output shows, the value is `Done`.

- title: 'Example 2: Add an alias property to a PSObject'
  code: |-
    $A = Get-ChildItem C:\Temp\test.txt
    $A | Add-Member -MemberType AliasProperty -Name Size -Value Length
    $A.Size

    2394
  description: ""
  summary: |+
    The following example adds a **Size** alias property to the object that represents the `Test.txt`
    file. The new property is an alias for the **Length** property.

    The first command uses the `Get-ChildItem` cmdlet to get the `Test.txt` **FileInfo** object.

    The second command adds the **Size** alias property. The third command uses dot notation to get the
    value of the new **Size** property.

- title: 'Example 3: Add a StringUse note property to a string'
  code: |-
    $A = "A string"
    $A | Add-Member -NotePropertyMembers @{StringUse="Display"}
    $A.StringUse

    Display
  description: ""
  summary: |+
    This example adds the **StringUse** note property to a string. Because `Add-Member` can't add types
    to **String** input objects, you can specify the **PassThru** parameter to generate an output
    object. The last command in the example displays the new property.

    This example uses the **NotePropertyMembers** parameter. The value of the **NotePropertyMembers**
    parameter is a hash table. The key is the note property name, **StringUse**, and the value is the
    note property value, **Display**.

- title: 'Example 4: Add a script method to a FileInfo object'
  code: |-
    $A = Get-ChildItem C:\Temp\test.txt
    $S = {[math]::Round(($this.Length / 1MB), 2)}
    $A | Add-Member -MemberType ScriptMethod -Name "SizeInMB" -Value $S
    $A.SizeInMB()

    0.43
  description: ""
  summary: |+
    This example adds the **SizeInMB** script method to a **FileInfo** object that calculates the file
    size to the nearest MegaByte. The second command creates a **ScriptBlock** that uses the **Round**
    static method from the `[math]` type to round the file size to the second decimal place.

    The **Value** parameter also uses the `$This` automatic variable, which represents the current
    object. The `$This` variable is valid only in script blocks that define new properties and methods.

    The last command uses dot notation to call the new **SizeInMB** script method on the object in the
    `$A` variable.

- title: 'Example 5: Create a custom object'
  code: |-
    $Asset = New-Object -TypeName PSObject
    $d = [ordered]@{Name="Server30"; System="Server Core"; PSVersion="4.0"}
    $Asset | Add-Member -NotePropertyMembers $d -TypeName Asset
    $Asset | Get-Member -MemberType Properties

    TypeName: Asset

    Name        MemberType   Definition
    ----        ----------   ----------
    Name        NoteProperty string Name=Server30
    PSVersion   NoteProperty string PSVersion=4.0
    System      NoteProperty string System=Server Core

    $Asset.PSObject.Properties | Format-Table Name, MemberType, TypeNameOfValue, Value

    Name        MemberType TypeNameOfValue Value
    ----        ---------- --------------- -----
    Name      NoteProperty System.String   Server30
    System    NoteProperty System.String   Server Core
    PSVersion NoteProperty System.String   4.0
  description: |-
    Inspecting the the raw list of properties shows the properties in the order that they were added to
    the object. `Format-Table` is used in this example to create output similar to `Get-Member`.
  summary: |+
    This example creates an **Asset** custom object.

    The `New-Object` cmdlet creates a **PSObject** that is saved in the `$Asset` variable. The
    `[ordered]` type accelerator creates an ordered dictionary that is stored in the `$d` variable.
    Piping `$Asset` to `Add-Member` adds the key-value pairs in the dictionary to the object as
    **NoteProperty** members. **TypeName** parameter assigns the type `Asset` to the **PSObject**. The
    `Get-Member` cmdlet shows the type and properties of the object. However, the properties are listed
    in alphabetical order, not in the order that they were added.

- title: 'Example 6: Add an AliasProperty to an object'
  code: |-
    $obj = [pscustomobject]@{
          Name = 'Doris'
          Age = '20'
    }
    $obj | Add-Member -MemberType AliasProperty -Name 'intAge' -Value age -SecondValue uint32
    $obj | Get-Member
    $obj

    TypeName: System.Management.Automation.PSCustomObject

    Name        MemberType    Definition
    ----        ----------    ----------
    intAge      AliasProperty intAge = (System.UInt32)age
    Equals      Method        bool Equals(System.Object obj)
    GetHashCode Method        int GetHashCode()
    GetType     Method        type GetType()
    ToString    Method        string ToString()
    Age         NoteProperty  string Age=20
    Name        NoteProperty  string Name=Doris

    Name   : Doris
    Age    : 20
    intAge : 20

    $obj.Age + 1
    $obj.intAge + 1

    201
    21
  description: |-
    The **intAge** property is an **AliasProperty** for the **Age** property, but the type is guaranteed
    to be **uint32**.
  summary: |+
    In this example we create a custom object that contains two **NoteProperty** members. The type for a
    **NoteProperty** reflects the type of the value stored in the property. In this case, the **Age**
    property is a string.

- title: 'Example 7: Add get and set methods to a custom object'
  code: |-
    $user = [pscustomobject]@{
        Name      = 'User1'
        Age       = 29
        StartDate = [datetime]'2019-05-05'
        Position  = [pscustomobject]@{
            DepartmentName = 'IT'
            Role = 'Manager'
        }
    }
    $addMemberSplat = @{
        MemberType = 'ScriptProperty'
        Name = 'Title'
        Value = { $this.Position.Role }                  # getter
        SecondValue = { $this.Position.Role = $args[0] } # setter
    }
    $user | Add-Member @addMemberSplat
    $user | Get-Member

    TypeName: System.Management.Automation.PSCustomObject

    Name        MemberType     Definition
    ----        ----------     ----------
    Equals      Method         bool Equals(System.Object obj)
    GetHashCode Method         int GetHashCode()
    GetType     Method         type GetType()
    ToString    Method         string ToString()
    Age         NoteProperty   int Age=29
    Name        NoteProperty   string Name=User1
    Position    NoteProperty   System.Management.Automation.PSCustomObject Position=@{DepartmentName=IT; Role=Manager}
    StartDate   NoteProperty   datetime StartDate=5/5/2019 12:00:00 AM
    Title       ScriptProperty System.Object Title {get= $this.Position.Role ;set= $this.Position.Role = $args[0] ;}

    $user.Title = 'Dev Manager'

    Name      : User1
    Age       : 29
    StartDate : 5/5/2019 12:00:00 AM
    Position  : @{DepartmentName=IT; Role=Dev Manager}
    Title     : Dev Manager
  description: |-
    Notice that the **Title** property is a **ScriptProperty** that has a **Get** and **Set** method.
    When we assign a new value to the **Title** property, the **Set** method is called and changes the
    value of the **Role** property in the **Position** property.
  summary: |+
    This examples shows how to define **Get** and **Set** methods that access a deeply nested property.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Indicates that this cmdlet adds a new member even the object has a custom member with the same name.
    You can't use the **Force** parameter to replace a standard member of a type.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the object to which the new member is added. Enter a variable that contains the objects,
    or type a command or expression that gets the objects.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSMemberTypes" data-throw-if-not-resolved="False" />
  name: MemberType
  isRequired: true
  description: |+
    Specifies the type of the member to add. This parameter is required. The acceptable values for this
    parameter are:

    - AliasProperty
    - CodeMethod
    - CodeProperty
    - NoteProperty
    - ScriptMethod
    - ScriptProperty

    For information about these values, see
    [PSMemberTypes Enumeration](xref:System.Management.Automation.PSMemberTypes) in the PowerShell SDK.

    Not all objects have every type of member. If you specify a member type that the object doesn't
    have, PowerShell returns an error.

  defaultValue: None
  position: "0"
  aliases: Type
  parameterValueGroup: AliasProperty, CodeMethod, CodeProperty, NoteProperty, ScriptMethod, ScriptProperty
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the member that this cmdlet adds.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="False" />
  name: NotePropertyMembers
  isRequired: true
  description: |+
    Specifies a hashtable or ordered dictionary that contains key-value pair representing
    **NoteProperty** names and their values. For more information about hash tables and ordered
    dictionaries in PowerShell, see
    [about_Hash_Tables](../Microsoft.PowerShell.Core/About/about_Hash_Tables.md).

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: NotePropertyName
  isRequired: true
  description: |+
    Specifies the note property name.

    Use this parameter with the **NotePropertyValue** parameter. This parameter is optional.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: NotePropertyValue
  isRequired: true
  description: |+
    Specifies the note property value.

    Use this parameter with the **NotePropertyName** parameter. This parameter is optional.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working. By default, this cmdlet doesn't
    generate any output.

    For most objects, `Add-Member` adds the new members to the input object. However, when the input
    object is a string, `Add-Member` can't add the member to the input object. For these objects, use
    the **PassThru** parameter to create an output object.

    In Windows PowerShell 2.0, `Add-Member` added members only to the **PSObject** wrapper of objects,
    not to the object. Use the **PassThru** parameter to create an output object for any object that has
    a **PSObject** wrapper.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: SecondValue
  description: |+
    Specifies optional additional information about **AliasProperty**, **ScriptProperty**, or
    **CodeProperty** members.

    If used when adding an **AliasProperty**, this parameter must be a data type. A conversion to the
    specified data type is added to the value of the **AliasProperty**. For example, if you add an
    **AliasProperty** that provides an alternate name for a string property, you can also specify a
    **SecondValue** parameter of **System.Int32** to indicate that the value of that string property
    should be converted to an integer when accessed using the corresponding **AliasProperty**.

    For a **CodeProperty**, the value must be a reference to a method that implements a **Set**
    accessor. Use the `GetMethod()` method of a type reference to get a reference to a method. The
    method must take a single parameter that's a **PSObject**. The **Get** accessor is assigned using
    the **Value** parameter.

    For a **ScriptProperty**, the value must be a script block that implements a **Set** accessor. The
    **Get** accessor is assigned using the **Value** parameter.

  defaultValue: None
  position: "3"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: TypeName
  description: |+
    Specifies a name for the type.

    When the type is a class in the **System** namespace or a type that has a type accelerator, you can
    enter the short name of the type. Otherwise, the full type name is required. This parameter is
    effective only when the **InputObject** is a **PSObject**.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Value
  description: |+
    Specifies the initial value of the added member. If you add an **AliasProperty**, **CodeProperty**,
    or **ScriptProperty** member, you can supply additional information using the **SecondValue**
    parameter.

    - For an **AliasProperty**, the value must be the name of the property being aliased.
    - For a **CodeMethod**, the value must be a reference to a method. Use the `GetMethod()` method of
      a type reference to get a reference to a method.
    - For a **CodeProperty**, the value must be a reference to a method that implements a **Get**
      accessor. Use the `GetMethod()` method of a type reference to get a reference to a method.
      reference. The method must take a single parameter that's a **PSObject**. The **Set** accessor is
      assigned using the **SecondValue** parameter.
    - For a **ScriptMethod**, the value must be a script block.
    - For a **ScriptProperty**, the value must be a script block that implements a **Get** accessor. The
      **Set** accessor is assigned using the **SecondValue** parameter.

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Add-Member
name: Add-Member
description: |-
  The `Add-Member` cmdlet lets you add members (properties and methods) to an instance of a PowerShell
  object. For instance, you can add a **NoteProperty** member that contains a description of the
  object or a **ScriptMethod** member that runs a script to change the object.

  To use `Add-Member`, pipe the object to `Add-Member`, or use the **InputObject** parameter to
  specify the object.

  The **MemberType** parameter indicates the type of member that you want to add. The **Name**
  parameter assigns a name to the new member, and the **Value** parameter sets the value of the
  member.

  The properties and methods that you add are added only to the particular instance of the object that
  you specify. `Add-Member` doesn't change the object type. To create a new object type, use the
  `Add-Type` cmdlet.

  You can also use the `Export-Clixml` cmdlet to save the instance of the object, including the
  additional members, in a file. Then you can use the `Import-Clixml` cmdlet to re-create the instance
  of the object from the information that's stored in the exported file.

  Beginning in Windows PowerShell 3.0, `Add-Member` has new features that make it easier to add note
  properties to objects. You can use the **NotePropertyName** and **NotePropertyValue** parameters to
  define a note property or use the **NotePropertyMembers** parameter, which takes a hash table of
  note property names and values.

  Also, beginning in Windows PowerShell 3.0, the **PassThru** parameter, which generates an output
  object, is needed less frequently. `Add-Member` now adds the new members directly to the input
  object of more types. For more information, see the **PassThru** parameter description.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/14/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/add-member?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Add-Member
