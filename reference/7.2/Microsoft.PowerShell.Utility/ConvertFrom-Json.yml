### YamlMime:PowershellCmdlet
summary: |-
  Converts a JSON-formatted string to a custom object or a hash table.
module: Microsoft.PowerShell.Utility
notes: |-
  This cmdlet is implemented using [Newtonsoft Json.NET](https://www.newtonsoft.com/json).

  Beginning in PowerShell 6, `ConvertTo-Json` attempts to convert strings formatted as timestamps to
  **DateTime** values. The converted value is a `[datetime]` instance with a `Kind` property set as
  follows:

  - `Unspecified`, if there is no time zone information in the input string.
  - `Utc`, if the time zone information is a trailing `Z`.
  - `Local`, if the time zone information is given as a trailing UTC _offset_ like `+02:00`. The
    offset is properly converted to the caller's configured time zone. The default output formatting
    doesn't indicate the original time zone offset.

  The **PSObject** type maintains the order of the properties as presented in the JSON string. While
  the key-value pairs are added to the **Hashtable** in the order presented in the JSON string,
  **Hashtable** objects don't maintain that order.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a JSON string to `ConvertFrom-Json`.
outputs:
- name: <xref href="PSCustomObject" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: An Introduction to JavaScript Object Notation (JSON) in JavaScript and .NET
  href: /previous-versions/dotnet/articles/bb299886(v=msdn.10)
- text: ConvertTo-Json
  href: ConvertTo-Json.yml
- text: Invoke-WebRequest
  href: Invoke-WebRequest.yml
- text: Invoke-RestMethod
  href: Invoke-RestMethod.yml
syntaxes:
- ConvertFrom-Json [-InputObject] <String> [-AsHashtable] [-Depth <Int32>] [-NoEnumerate] [<CommonParameters>]
examples:
- title: 'Example 1: Convert a DateTime object to a JSON object'
  code: |-
    Get-Date | Select-Object -Property * | ConvertTo-Json | ConvertFrom-Json

    DisplayHint : 2
    DateTime    : Friday, January 13, 2012 8:06:31 PM
    Date        : 1/13/2012 8:00:00 AM
    Day         : 13
    DayOfWeek   : 5
    DayOfYear   : 13
    Hour        : 20
    Kind        : 2
    Millisecond : 400
    Minute      : 6
    Month       : 1
    Second      : 31
    Ticks       : 634620819914009002
    TimeOfDay   : @{Ticks=723914009002; Days=0; Hours=20; Milliseconds=400; Minutes=6; Seconds=31; TotalDays=0.83786343634490734; TotalHours=20.108722472277776; TotalMilliseconds=72391400.900200009; TotalMinutes=1206.5233483366667;TotalSeconds=72391.4009002}
    Year        : 2012
  description: |-
    The example uses the `Select-Object` cmdlet to get all of the properties of the **DateTime**
    object. It uses the `ConvertTo-Json` cmdlet to convert the **DateTime** object to a string
    formatted as a JSON object and the `ConvertFrom-Json` cmdlet to convert the JSON-formatted string
    to a **PSCustomObject** object.
  summary: |+
    This command uses the `ConvertTo-Json` and `ConvertFrom-Json` cmdlets to convert a **DateTime**
    object from the `Get-Date` cmdlet to a JSON object then to a **PSCustomObject**.

- title: 'Example 2: Get JSON strings from a web service and convert them to PowerShell objects'
  code: |-
    # Ensures that Invoke-WebRequest uses TLS 1.2
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $j = Invoke-WebRequest 'https://api.github.com/repos/PowerShell/PowerShell/issues' | ConvertFrom-Json
  description: |-
    You can also use the `Invoke-RestMethod` cmdlet, which automatically converts JSON content to
    objects.
  summary: |+
    This command uses the `Invoke-WebRequest` cmdlet to get JSON strings from a web service
    and then it uses the `ConvertFrom-Json` cmdlet to convert JSON content to objects
    that can be managed in PowerShell.

- title: 'Example 3: Convert a JSON string to a custom object'
  code: |-
    Get-Content -Raw JsonFile.JSON | ConvertFrom-Json
  description: |-
    The command uses Get-Content cmdlet to get the strings in a JSON file. The **Raw** parameter
    returns the whole file as a single JSON object. Then it uses the pipeline operator to send the
    delimited string to the `ConvertFrom-Json` cmdlet, which converts it to a custom object.
  summary: |+
    This example shows how to use the `ConvertFrom-Json` cmdlet to convert a JSON file to a PowerShell
    custom object.

- title: 'Example 4: Convert a JSON string to a hash table'
  code: |-
    '{ "key":"value1", "Key":"value2" }' | ConvertFrom-Json -AsHashtable
  description: |-
    The JSON string contains two key value pairs with keys that differ only in casing. Without the
    switch, the command would have thrown an error.
  summary: |+
    This command shows an example where the `-AsHashtable` switch can overcome limitations of the
    command.

- title: 'Example 5: Round-trip a single element array'
  code: |-
    Write-Output "With -NoEnumerate: $('[1]' | ConvertFrom-Json -NoEnumerate | ConvertTo-Json -Compress)"
    Write-Output "Without -NoEnumerate: $('[1]' | ConvertFrom-Json | ConvertTo-Json -Compress)"

    With -NoEnumerate: [1]
    Without -NoEnumerate: 1
  description: |-
    The JSON string contains an array with a single element. Without the switch, converting the JSON to
    a PSObject and then converting it back with the `ConvertTo-Json` command results in a single
    integer.
  summary: |+
    This command shows an example where the `-NoEnumerate` switch is used to round-trip a single element
    JSON array.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsHashtable
  description: |+
    Converts the JSON to a hash table object. This switch was introduced in PowerShell 6.0. There are
    several scenarios where it can overcome some limitations of the `ConvertFrom-Json` cmdlet.

    - Without this switch, when two or more keys in a JSON object are case-insensitively identical, they
      are treated as identical keys. In that case, only the last of those case-insensitively identical
      keys is included in the converted object.
    - Without this switch, the cmdlet throws an error whenever the JSON contains a key that's an empty
      string. **PSCustomObject** can't have property names that are empty strings. For example, this can
      occur in `project.lock.json` files.
    - Hash tables can be processed faster for certain data structures.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Depth
  description: |+
    Gets or sets the maximum depth the JSON input is allowed to have. The default is 1024.

    This parameter was introduced in PowerShell 6.2.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the JSON strings to convert to JSON objects. Enter a variable that contains the string,
    or type a command or expression that gets the string. You can also pipe a string to
    `ConvertFrom-Json`.

    The **InputObject** parameter is required, but its value can be an empty string. When the input
    object is an empty string, `ConvertFrom-Json` doesn't generate any output. The **InputObject**
    value can't be `$null`.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoEnumerate
  description: |+
    Specifies that output isn't enumerated.

    Setting this parameter causes arrays to be sent as a single object instead of sending every element
    separately. This guarantees that JSON can be round-tripped via `ConvertTo-Json`.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.ConvertFrom-Json
name: ConvertFrom-Json
description: |-
  The `ConvertFrom-Json` cmdlet converts a JavaScript Object Notation (JSON) formatted string to a
  custom **PSObject** or **Hashtable** object that has a property for each field in the JSON string.
  JSON is commonly used by web sites to provide a textual representation of objects. The cmdlet adds
  the properties to the new object as it processes each line of the JSON string.

  The JSON standard allows duplicate key names, which are prohibited in **PSObject** end **Hashtable**
  types. For example, if the JSON string contains duplicate keys, only the last key is used by this
  cmdlet. See other examples below.

  To generate a JSON string from any object, use the `ConvertTo-Json` cmdlet.

  This cmdlet was introduced in PowerShell 3.0.

  > [!NOTE]
  > Beginning with PowerShell 6, the cmdlet supports JSON with comments. JSON comments start with two
  > forward slashes (`//`) characters. JSON comments aren't captured in the objects output by the
  > cmdlet. Prior to PowerShell 6, `ConvertFrom-Json` would return an error when it encountered a JSON
  > comment.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 11/29/2022
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/convertfrom-json?view=powershell-7.2&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: ConvertFrom-Json
