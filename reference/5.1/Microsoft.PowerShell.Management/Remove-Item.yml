### YamlMime:PowershellCmdlet
summary: |-
  Deletes the specified items.
module: Microsoft.PowerShell.Management
notes: |-
  The `Remove-Item` cmdlet is designed to work with the data exposed by any provider. To list the
  providers available in your session, type `Get-PsProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).

  When you try to delete a folder that contains items without using the **Recurse** parameter, the
  cmdlet prompts for confirmation. Using `-Confirm:$false` does not suppress the prompt. This is by
  design.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains a path, but not a literal path, to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not return any output.
links:
- text: Clear-Item
  href: Clear-Item.yml
- text: Copy-Item
  href: Copy-Item.yml
- text: Get-Item
  href: Get-Item.yml
- text: Invoke-Item
  href: Invoke-Item.yml
- text: Move-Item
  href: Move-Item.yml
- text: New-Item
  href: New-Item.yml
- text: Remove-ItemProperty
  href: Remove-ItemProperty.yml
- text: Rename-Item
  href: Rename-Item.yml
- text: Set-Item
  href: Set-Item.yml
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
- text: about_Preference_Variables
  href: ../microsoft.powershell.core/about/about_preference_variables.md#confirmpreference
- text: about_Functions_CmdletBindingAttribute
  href: ../microsoft.powershell.core/about/about_functions_cmdletbindingattribute.md?#confirmimpact
syntaxes:
- >-
  Remove-Item [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Recurse]

   [-Force] [-Credential <PSCredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <String[]>]

   [<CommonParameters>]
- >-
  Remove-Item -LiteralPath <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Recurse]

   [-Force] [-Credential <PSCredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <String[]>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Delete files that have any file name extension'
  code: |-
    Remove-Item C:\Test\*.*
  description: ""
  summary: |+
    This example deletes all of the files that have names that include a dot (`.`) from the `C:\Test`
    folder. Because the command specifies a dot, the command does not delete folders or files that have
    no file name extension.

- title: 'Example 2: Delete some of the document files in a folder'
  code: |-
    Remove-Item * -Include *.doc -Exclude *1*
  description: |-
    It uses the wildcard character (`*`) to specify the contents of the current folder. It uses the
    **Include** and **Exclude** parameters to specify the files to delete.
  summary: |+
    This example deletes from the current folder all files that have a `.doc` file name extension and a
    name that does not include `*1*`.

- title: 'Example 3: Delete hidden, read-only files'
  code: |-
    Remove-Item -Path C:\Test\hidden-RO-file.txt -Force
  description: |-
    It uses the **Path** parameter to specify the file. It uses the **Force**
    parameter to delete it. Without **Force**, you cannot delete _read-only_ or
    _hidden_ files.
  summary: |+
    This command deletes a file that is both *hidden* and *read-only*.

- title: 'Example 4: Delete files in subfolders recursively'
  code: |-
    Get-ChildItem * -Include *.csv -Recurse | Remove-Item
  description: |-
    In the `Get-ChildItem` command, **Path** has a value of (`*`), which represents the contents of the
    current folder. It uses **Include** to specify the CSV file type, and it uses **Recurse** to make
    the retrieval recursive. If you try to specify the file type the path, such as `-Path *.csv`, the
    cmdlet interprets the subject of the search to be a file that has no child items, and **Recurse**
    fails.
  summary: |+
    This command deletes all of the CSV files in the current folder and all subfolders recursively.

    Because the **Recurse** parameter in `Remove-Item` has a known issue, the command in this example
    uses `Get-ChildItem` to get the desired files, and then uses the pipeline operator to pass them to
    `Remove-Item`.

- title: 'Example 5: Delete subkeys recursively'
  code: |-
    Remove-Item HKLM:\Software\MyCompany\OldApp -Recurse
  description: ""
  summary: |+
    This command deletes the "OldApp" registry key and all its subkeys and values. It uses `Remove-Item`
    to remove the key. The path is specified, but the optional parameter name (**Path**) is omitted.

    The **Recurse** parameter deletes all of the contents of the "OldApp" key recursively. If the key
    contains subkeys and you omit the **Recurse** parameter, you are prompted to confirm that you want
    to delete the contents of the key.

- title: 'Example 6: Deleting files with special characters'
  code: |-
    Get-ChildItem

    Directory: C:\temp\Downloads

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a---          6/1/2018  12:19 PM           1362 myFile.txt
    -a---          6/1/2018  12:30 PM           1132 myFile[1].txt
    -a---          6/1/2018  12:19 PM           1283 myFile[2].txt
    -a---          6/1/2018  12:19 PM           1432 myFile[3].txt

    Get-ChildItem | Where-Object Name -Like '*`[*'

    Directory: C:\temp\Downloads

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a---          6/1/2018  12:30 PM           1132 myFile[1].txt
    -a---          6/1/2018  12:19 PM           1283 myFile[2].txt
    -a---          6/1/2018  12:19 PM           1432 myFile[3].txt

    Get-ChildItem | Where-Object Name -Like '*`[*' | ForEach-Object { Remove-Item -LiteralPath $_.Name }
    Get-ChildItem

    Directory: C:\temp\Downloads

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    -a---          6/1/2018  12:19 PM           1362 myFile.txt
  description: ""
  summary: |+
    The following example shows how to delete files that contain special characters like brackets or
    parentheses.

- title: 'Example 7: Remove an alternate data stream'
  code: |-
    Get-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier

    FileName: \\C:\Test\Copy-Script.ps1

    Stream                   Length
    ------                   ------
    Zone.Identifier              26

    Remove-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier
    Get-Item C:\Test\Copy-Script.ps1 -Stream Zone.Identifier

    Get-Item : Could not open alternate data stream 'Zone.Identifier' of file 'C:\Test\Copy-Script.ps1'.
    At line:1 char:1
    + Get-Item 'C:\Test\Copy-Script.ps1' -Stream Zone.Identifier
    + [!INCLUDE[]()][!INCLUDE[]()][!INCLUDE[]()][!INCLUDE[]()][!INCLUDE[]()]~~
        + CategoryInfo          : ObjectNotFound: (C:\Test\Copy-Script.ps1:String) [Get-Item], FileNotFoundE
       xception
        + FullyQualifiedErrorId : AlternateDataStreamNotFound,Microsoft.PowerShell.Commands.GetItemCommand
  description: |-
    The **Stream** parameter `Get-Item` gets the **Zone.Identifier** stream of the `Copy-Script.ps1`
    file. `Remove-Item` uses the **Stream** parameter to remove the **Zone.Identifier** stream of the
    file. Finally, the `Get-Item` cmdlet shows that the **Zone.Identifier** stream was deleted.
  summary: |+
    This example shows how to use the **Stream** dynamic parameter of the `Remove-Item` cmdlet to delete
    an alternate data stream. The stream parameter is introduced in Windows PowerShell 3.0.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet. For more information, see the following
    articles:

    - [about_Preference_Variables](../microsoft.powershell.core/about/about_preference_variables.md#confirmpreference)
    - [about_Functions_CmdletBindingAttribute](../microsoft.powershell.core/about/about_functions_cmdletbindingattribute.md?#confirmimpact)

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter is not supported by any providers installed with PowerShell.
    > To impersonate another user, or elevate your credentials when running this cmdlet,
    > use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.yml).

  defaultValue: Current user
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Specifies a filter to qualify the **Path** parameter. The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md)
    provider is the only installed PowerShell provider that supports the use of filters. You can find
    the syntax for the **FileSystem** filter language in [about_Wildcards](../Microsoft.PowerShell.Core/About/about_Wildcards.md).
    Filters are more efficient than other parameters, because the provider applies them when the cmdlet
    gets the objects rather than having PowerShell filter the objects after they are retrieved.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the cmdlet to remove items that cannot otherwise be changed, such as hidden or read-only
    files or read-only aliases or variables. The cmdlet cannot remove constant aliases or variables.
    Implementation varies from provider to provider. For more information, see
    [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
    parameter, the cmdlet cannot override security restrictions.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `"*.txt"`. Wildcard characters are permitted. The **Include** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it is
    typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
    it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
    as escape sequences.

    For more information, see [about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies a path of the items being removed.
    Wildcard characters are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Recurse
  description: |+
    Indicates that this cmdlet deletes the items in the specified locations and in all child items of
    the locations.

    When it is used with the **Include** parameter, the **Recurse** parameter might not delete all
    subfolders or all child items. This is a known issue. As a workaround, try piping results of the
    `Get-ChildItem -Recurse` command to `Remove-Item`, as described in "Example 4" in this topic.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Stream
  description: |+
    The **Stream** parameter is a dynamic parameter that the FileSystem provider adds to `Remove-Item`.
    This parameter works only in file system drives.

    You can use `Remove-Item` to delete an alternative data stream. However, it is not the recommended
    way to eliminate security checks that block files that are downloaded from the Internet. If you
    verify that a downloaded file is safe, use the `Unblock-File` cmdlet.

    This parameter was introduced in Windows PowerShell 3.0.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseTransaction
  description: |+
    Includes the command in the active transaction.
    This parameter is valid only when a transaction is in progress.
    For more information, see [about_Transactions](../Microsoft.PowerShell.Core/About/about_Transactions.md)

  defaultValue: "False"
  position: Named
  aliases: usetx
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Remove-Item
name: Remove-Item
description: |-
  The `Remove-Item` cmdlet deletes one or more items. Because it is supported by many providers, it
  can delete many different types of items, including files, folders, registry keys, variables,
  aliases, and functions.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 04/07/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/remove-item?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Remove-Item
