### YamlMime:PowershellCmdlet
summary: |-
  Starts one or more processes on the local computer.
module: Microsoft.PowerShell.Management
notes: |-
  Windows PowerShell includes the following aliases for `Start-Process`:

  - `saps`
  - `start`

  Native commands are executable files installed in the operating system. These executables can be run
  from any command-line shell, like PowerShell. Usually you run the command exactly as you would in
  `bash` or `cmd.exe`. The `Start-Process` cmdlet can be used to run any native commands, but should
  only be used when you need to control how the command is executed.

  By default, `Start-Process` launches a process _asynchronously_. Control is instantly returned to
  PowerShell even if the new process is still running.

  - On the local system, the launched process lives on independent from the calling process.
  - On a remote system, the new process is terminated when the remote session ends, immediately
    following the `Start-Process` command. Therefore, you can't use `Start-Process` in a remote
    session expecting the launched process to outlive the session.

  If you do need to use `Start-Process` in a remote session, invoke it with the **Wait** parameter. Or
  you could use other methods to create a new process on the remote system.

  When using the **Wait** parameter, `Start-Process` waits for the process tree (the process and all
  its descendants) to exit before returning control. This is different than the behavior of the
  `Wait-Process` cmdlet, which only waits for the specified processes to exit.

  On Windows, the most common use case for `Start-Process` is to use the **Wait** parameter to block
  progress until the new process exits. On non-Windows system, this is rarely needed since the default
  behavior for command-line applications is equivalent to `Start-Process -Wait`.

  This cmdlet is implemented using the **Start** method of the **System.Diagnostics.Process**
  class. For more information about this method, see
  [Process.Start Method](/dotnet/api/system.diagnostics.process.start#overloads).
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You can't pipe objects to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    By default, this cmdlet returns no output.
- name: <xref href="System.Diagnostics.Process" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, this cmdlet returns a **Process** object.
links:
- text: about_Quoting_Rules
  href: ../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md
- text: Debug-Process
  href: Debug-Process.yml
- text: Get-Process
  href: Get-Process.yml
- text: Start-Service
  href: Start-Service.yml
- text: Stop-Process
  href: Stop-Process.yml
- text: Wait-Process
  href: Wait-Process.yml
syntaxes:
- >-
  Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-Credential <pscredential>]

   [-WorkingDirectory <string>] [-LoadUserProfile] [-NoNewWindow] [-PassThru]

   [-RedirectStandardError <string>] [-RedirectStandardInput <string>]

   [-RedirectStandardOutput <string>] [-WindowStyle <ProcessWindowStyle>] [-Wait]

   [-UseNewEnvironment] [<CommonParameters>]
- >-
  Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-WorkingDirectory <string>]

   [-PassThru] [-Verb <string>] [-WindowStyle <ProcessWindowStyle>] [-Wait] [<CommonParameters>]
examples:
- title: 'Example 1: Start a process that uses default values'
  code: |-
    Start-Process -FilePath "sort.exe"
  description: ""
  summary: |+
    This example starts a process that uses the `Sort.exe` file in the current folder. The command uses
    all the default values, including the default window style, working folder, and credentials.

- title: 'Example 2: Print a text file'
  code: |-
    Start-Process -FilePath "myfile.txt" -WorkingDirectory "C:\PS-Test" -Verb Print
  description: ""
  summary: |+
    This example starts a process that prints the `C:\PS-Test\MyFile.txt` file.

- title: 'Example 3: Start a process to sort items to a new file'
  code: |-
    $processOptions = @{
        FilePath = "sort.exe"
        RedirectStandardInput = "TestSort.txt"
        RedirectStandardOutput = "Sorted.txt"
        RedirectStandardError = "SortError.txt"
        UseNewEnvironment = $true
    }
    Start-Process @processOptions
  description: |-
    This example uses splatting to pass parameters to the cmdlet. For more information, see
    [about_Splatting](../microsoft.powershell.core/about/about_splatting.md).
  summary: |+
    This example starts a process that sorts items in the `TestSort.txt` file and returns the sorted
    items in the `Sorted.txt` files. Any errors are written to the `SortError.txt` file. The
    **UseNewEnvironment** parameter specifies that the process runs with its own environment variables.

- title: 'Example 4: Start a process in a maximized window'
  code: |-
    Start-Process -FilePath "notepad" -Wait -WindowStyle Maximized
  description: ""
  summary: |+
    This example starts the `Notepad.exe` process. It maximizes the window and retains the window until
    the process completes.

- title: 'Example 5: Start PowerShell as an administrator'
  code: |-
    Start-Process -FilePath "powershell" -Verb RunAs
  description: ""
  summary: |+
    This example starts PowerShell using the **Run as administrator** option.

- title: 'Example 6: Using different verbs to start a process'
  code: |-
    $startExe = New-Object System.Diagnostics.ProcessStartInfo -Args powershell.exe
    $startExe.verbs

    open
    runas
    runasuser
  description: |-
    The example uses `New-Object` to create a **System.Diagnostics.ProcessStartInfo** object for
    `powershell.exe`, the file that runs in the PowerShell process. The **Verbs** property of the
    **ProcessStartInfo** object shows that you can use the **Open** and `RunAs` verbs with
    `powershell.exe`, or with any process that runs a `.exe` file.
  summary: |+
    This example shows how to find the verbs that can be used when starting a process. The available
    verbs are determined by the filename extension of the file that runs in the process.

- title: 'Example 7: Specifying arguments to the process'
  code: |-
    Start-Process -FilePath "$env:comspec" -ArgumentList "/c dir `"%SystemDrive%\Program Files`""
    Start-Process -FilePath "$env:comspec" -ArgumentList "/c","dir","`"%SystemDrive%\Program Files`""
  description: ""
  summary: |+
    Both commands start the Windows command interpreter, issuing a `dir` command on the `Program Files`
    folder. Because this foldername contains a space, the value needs surrounded with escaped quotes.
    Note that the first command specifies a string as **ArgumentList**. The second command is a string
    array.

- title: 'Example 8: Run a command as an Administrator using alternate credentials'
  code: |-
    $cred = Get-Credential
    $args = '-noprofile -command "Start-Process cmd.exe -Verb RunAs -args /k"'
    Start-Process pwsh.exe -Credential $cred -WindowStyle Hidden -ArgumentList $args
  description: |-
    The example starts `cmd.exe` with elevated permissions from a PowerShell session that is running
    under alternate credentials.
  summary: |+
    On Windows, you can run `Start-Process -Verb RunAs` to start a process with elevated permissions.
    This elevates the current user's context. The **Credential** parameter allows you to specify an
    alternate username and password, allowing you to start a process in a different user content.
    However, the **Credential** and **Verb** parameters can't be used together.

    To start a process with elevated rights, using alternate credentials, you must first start
    PowerShell using the alternate credentials, then use `Start-Process` to start the process with
    elevated rights.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ArgumentList
  description: |+
    Specifies parameters or parameter values to use when this cmdlet starts the process. Arguments can
    be accepted as a single string with the arguments separated by spaces, or as an array of strings
    separated by commas. The cmdlet joins the array into a single string with each element of the array
    separated by a single space.

    The outer quotes of the PowerShell strings aren't included when the **ArgumentList** values are
    passed to the new process. If parameters or parameter values contain a space or quotes, they need to
    be surrounded with escaped double quotes. For more information, see
    [about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).

    For the best results, use a single **ArgumentList** value containing all the arguments and any
    needed quote characters.

  defaultValue: None
  position: "1"
  aliases: Args
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has permission to perform this action. By default, the cmdlet uses the
    credentials of the current user.

    Type a user name, such as **User01** or **Domain01\User01**, or enter a **PSCredential** object
    generated by the `Get-Credential` cmdlet. If you type a user name, you're prompted to enter the
    password.

    Credentials are stored in a [PSCredential](/dotnet/api/system.management.automation.pscredential)
    object and the password is stored as a [SecureString](/dotnet/api/system.security.securestring).

    > [!NOTE]
    > For more information about **SecureString** data protection, see
    > [How secure is SecureString?](/dotnet/api/system.security.securestring#how-secure-is-securestring).

  defaultValue: Current user
  position: Named
  aliases: RunAs
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FilePath
  isRequired: true
  description: |+
    Specifies the optional path and filename of the program that runs in the process. Enter the name of
    an executable file or of a document, such as a `.txt` or `.doc` file, that's associated with a
    program on the computer. This parameter is required.

    If you specify only a filename, use the **WorkingDirectory** parameter to specify the path.

  defaultValue: None
  position: "0"
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: LoadUserProfile
  description: |+
    Indicates that this cmdlet loads the Windows user profile stored in the `HKEY_USERS` registry key
    for the current user.

    This parameter doesn't affect the PowerShell profiles. For more information, see
    [about_Profiles](../Microsoft.PowerShell.Core/About/about_Profiles.md).

  defaultValue: None
  position: Named
  aliases: Lup
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoNewWindow
  description: |+
    Start the new process in the current console window. By default on Windows, PowerShell opens a new
    window.

    You can't use the **NoNewWindow** and **WindowStyle** parameters in the same command.

  defaultValue: None
  position: Named
  aliases: nnw
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns a process object for each process that the cmdlet started. By default, this cmdlet doesn't
    generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RedirectStandardError
  description: |+
    Specifies a file. This cmdlet sends any errors generated by the process to a file that you specify.
    Enter the path and filename. By default, the errors are displayed in the console.

  defaultValue: None
  position: Named
  aliases: RSE
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RedirectStandardInput
  description: |+
    Specifies a file. This cmdlet reads input from the specified file. Enter the path and filename of
    the input file. By default, the process gets its input from the keyboard.

  defaultValue: None
  position: Named
  aliases: RSI
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RedirectStandardOutput
  description: |+
    Specifies a file. This cmdlet sends the output generated by the process to a file that you specify.
    Enter the path and filename. By default, the output is displayed in the console.

  defaultValue: None
  position: Named
  aliases: RSO
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseNewEnvironment
  description: |+
    Indicates that this cmdlet uses new environment variables specified for the process. By default, the
    started process runs with the environment variables inherited from the parent process.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Verb
  description: |+
    Specifies a verb to use when this cmdlet starts the process. The verbs that are available are
    determined by the filename extension of the file that runs in the process.

    The following table shows the verbs for some common process file types.

    | File type |                     Verbs                     |
    | --------- | --------------------------------------------- |
    | .cmd      | `Edit`, `Open`, `Print`, `RunAs`, `RunAsUser` |
    | .exe      | `Open`, `RunAs`, `RunAsUser`                  |
    | .txt      | `Open`, `Print`, `PrintTo`                    |
    | .wav      | `Open`, `Play`                                |

    To find the verbs that can be used with the file that runs in a process, use the `New-Object` cmdlet
    to create a **System.Diagnostics.ProcessStartInfo** object for the file. The available verbs are in
    the **Verbs** property of the **ProcessStartInfo** object. For details, see the examples.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Wait
  description: |+
    Indicates that this cmdlet waits for the specified process and its descendants to complete before
    accepting more input. This parameter suppresses the command prompt or retains the window until the
    processes finish.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Diagnostics.ProcessWindowStyle" data-throw-if-not-resolved="False" />
  name: WindowStyle
  description: |+
    Specifies the state of the window that's used for the new process. The default value is `Normal`.
    The acceptable values for this parameter are:

    - `Normal`
    - `Hidden`
    - `Minimized`
    - `Maximized`

    You can't use the **WindowStyle** and **NoNewWindow** parameters in the same command.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Normal, Hidden, Minimized, Maximized
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: WorkingDirectory
  description: |+
    Specifies the location that the new process should start in. The default is the location of the
    executable file or document being started. Wildcards aren't supported. The path must not contain
    characters that would be interpreted as wildcards.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Start-Process
name: Start-Process
description: |-
  The `Start-Process` cmdlet starts one or more processes on the local computer. By default,
  `Start-Process` creates a new process that inherits all the environment variables that are defined
  in the current process.

  To specify the program that runs in the process, enter an executable file or script file, or a file
  that can be opened using a program on the computer. If you specify a non-executable file,
  `Start-Process` starts the program that's associated with the file, similar to the `Invoke-Item`
  cmdlet.

  You can use the parameters of `Start-Process` to specify options, such as loading a user profile,
  starting the process in a new window, or using alternate credentials.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 12/12/2022
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.management/start-process?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Start-Process
