### YamlMime:PowershellCmdlet
summary: |-
  Gets the item at the specified location.
module: Microsoft.PowerShell.Management
notes: |-
  This cmdlet does not have a **Recurse** parameter, because it gets only an item, not its contents.
  To get the contents of an item recursively, use `Get-ChildItem`.

  To navigate through the registry, use this cmdlet to get registry keys and the `Get-ItemProperty`
  to get registry values and data. The registry values are considered to be properties of the
  registry key.

  This cmdlet is designed to work with the data exposed by any provider. To list the providers
  available in your session, type `Get-PsProvider`. For more information, see
  [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md).
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string that contains a path to this cmdlet.
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns the objects that it gets. The type is determined by the type of objects in the
    path.
links:
- text: Clear-Item
  href: Clear-Item.yml
- text: Copy-Item
  href: Copy-Item.yml
- text: Invoke-Item
  href: Invoke-Item.yml
- text: Move-Item
  href: Move-Item.yml
- text: New-Item
  href: New-Item.yml
- text: Remove-Item
  href: Remove-Item.yml
- text: Rename-Item
  href: Rename-Item.yml
- text: Set-Item
  href: Set-Item.yml
- text: Get-ChildItem
  href: Get-ChildItem.yml
- text: Get-ItemProperty
  href: Get-ItemProperty.yml
- text: Get-PSProvider
  href: Get-PSProvider.yml
- text: about_Providers
  href: ../Microsoft.PowerShell.Core/About/about_Providers.md
syntaxes:
- >-
  Get-Item [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Force]

   [-Credential <PSCredential>] [-UseTransaction] [-Stream <String[]>] [<CommonParameters>]
- >-
  Get-Item -LiteralPath <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Force]

   [-Credential <PSCredential>] [-UseTransaction] [-Stream <String[]>] [<CommonParameters>]
examples:
- title: 'Example 1: Get the current directory'
  code: |-
    Get-Item .

    Directory: C:\

    Mode                LastWriteTime     Length Name
    ----                -------------     ------ ----
    d----         7/26/2006  10:01 AM            ps-test
  description: ""
  summary: |+
    This example gets the current directory. The dot ('.') represents the item at the current location
    (not its contents).

- title: 'Example 2: Get all the items in the current directory'
  code: |-
    Get-Item *

    Directory: C:\ps-test

    Mode                LastWriteTime     Length Name
    ----                -------------     ------ ----
    d----         7/26/2006   9:29 AM            Logs
    d----         7/26/2006   9:26 AM            Recs
    -a---         7/26/2006   9:28 AM         80 date.csv
    -a---         7/26/2006  10:01 AM         30 filenoext
    -a---         7/26/2006   9:30 AM      11472 process.doc
    -a---         7/14/2006  10:47 AM         30 test.txt
  description: ""
  summary: |+
    This example gets all the items in the current directory. The wildcard character (`*`) represents
    all the contents of the current item.

- title: 'Example 3: Get the current directory of a drive'
  code: |-
    Get-Item C:\
  description: ""
  summary: |+
    This example gets the current directory of the `C:` drive. The object that is retrieved represents
    only the directory, not its contents.

- title: 'Example 4: Get items in the specified drive'
  code: |-
    Get-Item C:\*
  description: |-
    In PowerShell, use a single asterisk (`*`) to get contents, instead of the traditional `*.*`. The
    format is interpreted literally, so `*.*` wouldn't retrieve directories or filenames without a dot.
  summary: |+
    This example gets the items in the `C:` drive. The wildcard character (`*`) represents all the items
    in the container, not just the container.

- title: 'Example 5: Get a property in the specified directory'
  code: |-
    (Get-Item C:\Windows).LastAccessTime
  description: ""
  summary: |+
    This example gets the **LastAccessTime** property of the `C:\Windows` directory. **LastAccessTime**
    is just one property of file system directories. To see all the properties of a directory, type
    `(Get-Item <directory-name>) | Get-Member`.

- title: 'Example 6: Show the contents of a registry key'
  code: |-
    Get-Item HKLM:\Software\Microsoft\Powershell\1\Shellids\Microsoft.Powershell\
  description: ""
  summary: |+
    This example shows the contents of the **Microsoft.PowerShell** registry key. You can use this
    cmdlet with the PowerShell Registry provider to get registry keys and subkeys, but you must use the
    `Get-ItemProperty` cmdlet to get the registry values and data.

- title: 'Example 7: Get items in a directory that have an exclusion'
  code: |-
    Get-Item C:\Windows\*.* -Exclude "w*"
  description: ""
  summary: |+
    This example gets items in the Windows directory with names that include a dot (`.`), but don't
    begin with `w*`.This example works only when the path includes a wildcard character (`*`) to specify
    the contents of the item.

parameters:
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    > [!NOTE]
    > This parameter isn't supported by any providers installed with PowerShell.
    > To impersonate another user, or elevate your credentials when running this cmdlet,
    > use [Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.yml).

  defaultValue: Current user
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `*.txt`. Wildcard characters are permitted. The **Exclude** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Specifies a filter to qualify the **Path** parameter. The [FileSystem](../Microsoft.PowerShell.Core/About/about_FileSystem_Provider.md)
    provider is the only installed PowerShell provider that supports filters. Filters are more efficient
    than other parameters. The provider applies filter when the cmdlet gets the objects rather than
    having PowerShell filter the objects after they're retrieved. The filter string is passed to the
    .NET API to enumerate files. The API only supports `*` and `?` wildcards.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items.
    Implementation varies from provider to provider. For more information, see
    [about_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md). Even using the **Force**
    parameter, the cmdlet can't override security restrictions.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value
    of this parameter qualifies the **Path** parameter. Enter a path element or pattern, such as
    `*.txt`. Wildcard characters are permitted. The **Include** parameter is effective only when the
    command includes the contents of an item, such as `C:\Windows\*`, where the wildcard character
    specifies the contents of the `C:\Windows` directory.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to one or more locations. The value of **LiteralPath** is used exactly as it's
    typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose
    it in single quotation marks. Single quotation marks tell PowerShell not to interpret any characters
    as escape sequences.

    For more information, see [about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the path to an item. This cmdlet gets the item at the specified location. Wildcard
    characters are permitted. This parameter is required, but the parameter name **Path** is optional.

    Use a dot (`.`) to specify the current location. Use the wildcard character (`*`) to specify all the
    items in the current location.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Stream
  description: |+
    Gets the specified alternate NTFS file stream from the file. Enter the stream name. Wildcards are
    supported. To get all streams, use an asterisk (`*`). This parameter isn't valid on folders.

    **Stream** is a dynamic parameter that the **FileSystem** provider adds to the `Get-Item` cmdlet.
    This parameter works only in file system drives.

  defaultValue: No alternate file streams
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseTransaction
  description: |+
    Includes the command in the active transaction.
    This parameter is valid only when a transaction is in progress.
    For more information, see [about_Transactions](../Microsoft.PowerShell.Core/About/about_Transactions.md).

  defaultValue: "False"
  position: Named
  aliases: usetx
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Get-Item
name: Get-Item
description: |-
  The `Get-Item` cmdlet gets the item at the specified location. It doesn't get the contents of the
  item at the location unless you use a wildcard character (`*`) to request all the contents of the
  item.

  This cmdlet is used by PowerShell providers to navigate through different types of data stores.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 03/27/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/get-item?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-Item
