### YamlMime:PowershellCmdlet
summary: |-
  Applies configuration to nodes.
module: PSDesiredStateConfiguration
notes: ""
links:
- text: Windows PowerShell Desired State Configuration Overview
  href: /powershell/scripting/dsc/overview/overview
- text: Get-DscConfiguration
  href: Get-DscConfiguration.yml
- text: Get-DscConfigurationStatus
  href: Get-DscConfigurationStatus.yml
- text: Restore-DscConfiguration
  href: Restore-DscConfiguration.yml
- text: Stop-DscConfiguration
  href: Stop-DscConfiguration.yml
- text: Test-DscConfiguration
  href: Test-DscConfiguration.yml
- text: Update-DscConfiguration
  href: Update-DscConfiguration.yml
syntaxes:
- >-
  Start-DscConfiguration [-Wait] [-Force] [[-Path] <String>] [[-ComputerName] <String[]>]

   [-Credential <PSCredential>] [-ThrottleLimit <Int32>] [-JobName <String>] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Start-DscConfiguration [-Wait] [-Force] [[-Path] <String>] -CimSession <CimSession[]> [-ThrottleLimit <Int32>]

   [-JobName <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Start-DscConfiguration [-Wait] [-Force] [[-ComputerName] <String[]>] [-Credential <PSCredential>]

   [-ThrottleLimit <Int32>] [-UseExisting] [-JobName <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Start-DscConfiguration [-Wait] [-Force] -CimSession <CimSession[]> [-ThrottleLimit <Int32>] [-UseExisting]

   [-JobName <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Apply configuration settings'
  code: |-
    PS C:\> Start-DscConfiguration -Path "C:\DSC\Configurations\"
  description: |-
    This command applies the configuration settings from C:\DSC\Configurations\ to the every computer that has settings in that folder.
    The command returns **Job** objects for each target node deployed to.
  summary: ""
- title: 'Example 2: Apply configuration settings and wait for configuration to complete'
  code: |-
    PS C:\> Start-DscConfiguration -Path "C:\DSC\Configurations\" -Wait -Verbose
  description: |-
    This command applies the configuration from C:\DSC\Configurations\ to the local computer.
    The command returns **Job** objects for each target node deployed to, in this case, just the local computer.
    This example specifies the *Verbose* parameter.
    Therefore, the command sends messages to the console as it proceeds.
    The command includes the *Wait* parameter.
    Therefore, you cannot use the console until the command finishes all configuration tasks.
  summary: ""
- title: 'Example 3: Apply configuration settings by using a CIM session'
  code: |-
    PS C:\> $Session = New-CimSession -ComputerName "Server01" -Credential ACCOUNTS\PattiFuller
    PS C:\> Start-DscConfiguration -Path "C:\DSC\Configurations\" -CimSession $Session
  description: |-
    This example applies configuration settings to a specified computer.
    The example creates a CIM session for a computer named Server01 for use with the cmdlet.
    Alternatively, create an array of CIM sessions to apply the cmdlet to multiple specified computers.

    The first command creates a CIM session by using the **New-CimSession** cmdlet, and then stores the **CimSession** object in the $Session variable.
    The command prompts you for a password.
    For more information, type `Get-Help NewCimSession`.

    The second command applies the configuration settings from C:\DSC\Configurations\ to the computers identified by the **CimSession** objects stored in the $Session variable.
    In this example, the $Session variable contains a CIM session only for the computer named Server01.
    The command applies the configuration.
    The command creates **Job** objects for each configured computer.
  summary: ""
parameters:
- type: <xref href="Microsoft.Management.Infrastructure.CimSession" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CimSession
  isRequired: true
  description: |+
    Runs the cmdlet in a remote session or on a remote computer.
    Enter a computer name or a session object, such as the output of a [New-CimSession](/powershell/module/cimcmdlets/new-cimsession) or [Get-CimSession](/powershell/module/cimcmdlets/get-cimsession) cmdlet.
    The default is the current session on the local computer.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ComputerName
  description: |+
    Specifies an array of computer names.
    This parameter restricts the computers that have configuration documents in the *Path* parameter to those specified in the array.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: CN, ServerName
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user name and password, as a **PSCredential** object, for the target computer.
    To obtain a **PSCredential** object, use the Get-Credential cmdlet.
    For more information, type `Get-Help Get-Credential`.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Stops the configuration operation currently running on the target computer and begins the new Start-Configuration operation.
    If the **RefreshMode** property of the Local Configuration Manager is set to **Pull**, specifying this parameter changes it to **Push**.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: JobName
  description: |+
    Specifies a friendly name for a job.
    If you specify this parameter, the cmdlet runs as a job, and it returns a **Job** object.

    By default, Windows PowerShell assigns the name JobN where N is an integer.

    If you specify the *Wait* parameter, do not specify this parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  description: |+
    Specifies a file path of a folder that contains configuration settings files.
    This cmdlet publishes and applies these configuration settings to computers that have settings files in the specified path.
    Each target node must have a settings file of the following format: NetBIOS Name.mof.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: ThrottleLimit
  description: |+
    Specifies the maximum number of concurrent operations that can be established to run the cmdlet.
    If this parameter is omitted or a value of `0` is entered, then Windows PowerShell calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.
    The throttle limit applies only to the current cmdlet, not to the session or to the computer.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseExisting
  isRequired: true
  description: |+
    Indicates that this cmdlet applies the existing configuration.
    The configuration can exist on the target computer by enactment using **Start-DscConfiguration** or by publication using the Publish-DscConfiguration cmdlet.

    Before you specify this parameter for this cmdlet, review the information in [What's New in Windows PowerShell 5.0](/powershell/scripting/whats-new/what-s-new-in-windows-powershell-50)

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Wait
  description: |+
    Indicates that the cmdlet blocks the console until it finishes all configuration tasks.

    If you specify this parameter, do not specify the *JobName* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PSDesiredStateConfiguration.Start-DscConfiguration
name: Start-DscConfiguration
description: |-
  The **Start-DscConfiguration** cmdlet applies configuration to nodes.
  When used with the *UseExisting* parameter, the existing configuration on the target computer is applied.
  Specify which computers that you want to apply configuration to by specifying computer names or by using Common Information Model (CIM) sessions.

  By default, this cmdlet creates a job and returns a **Job** object.
  For more information about background jobs, type `Get-Help about_Jobs`.
  To use this cmdlet interactively, specify the *Wait* parameter.

  Specify the *Verbose* parameter to see details of what the cmdlet does when it applies configuration settings.
metadata:
  external help file: Microsoft.Windows.DSC.CoreConfProviders.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PSDesiredStateConfiguration
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/psdesiredstateconfiguration/start-dscconfiguration?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Start-DscConfiguration
