### YamlMime:PowershellCmdlet
summary: |-
  Sets the value of a variable. Creates the variable if one with the requested name does not exist.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe an object that represents the value of the variable to `Set-Variable`.
outputs:
- name: <xref href="None or System.Management.Automation.PSVariable" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, `Set-Variable` generates a
    **System.Management.Automation.PSVariable** object representing the new or changed variable.
    Otherwise, this cmdlet does not generate any output.
links:
- text: Clear-Variable
  href: Clear-Variable.yml
- text: Get-Variable
  href: Get-Variable.yml
- text: New-Variable
  href: New-Variable.yml
- text: Remove-Variable
  href: Remove-Variable.yml
syntaxes:
- >-
  Set-Variable [-Name] <String[]> [[-Value] <Object>] [-Include <String[]>] [-Exclude <String[]>]

   [-Description <String>] [-Option <ScopedItemOptions>] [-Force] [-Visibility <SessionStateEntryVisibility>]

   [-PassThru] [-Scope <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Set a variable and get its value'
  code: |-
    Set-Variable -Name "desc" -Value "A description"
    Get-Variable -Name "desc"

    Name                           Value
    ----                           -----
    desc                           A description
  description: ""
  summary: |+
    These commands set the value of the `$desc` variable to `A description`, and then gets the value of
    the variable.

- title: 'Example 2: Set a global, read-only variable'
  code: |-
    Set-Variable -Name "processes" -Value (Get-Process) -Option constant -Scope global -Description "All processes" -PassThru |
        Format-List -Property *
  description: |-
    The command uses the `Set-Variable` cmdlet to create the variable. It uses the **PassThru**
    parameter to create an object representing the new variable, and it uses the pipeline operator (`|`)
    to pass the object to the `Format-List` cmdlet. It uses the **Property** parameter of `Format-List`
    with a value of all (`*`) to display all properties of the newly created variable.

    The value, `(Get-Process)`, is enclosed in parentheses to ensure that it is executed before being
    stored in the variable. Otherwise, the variable contains the words "**Get-Process**".
  summary: |+
    This example creates a global, read-only variable that contains all processes on the system, and
    then it displays all properties of the variable.

- title: 'Example 3: Understand public vs. private variables'
  code: |-
    PS C:\> New-Variable -Name "counter" -Visibility Public -Value 26
    PS C:\> $Counter
    26

    PS C:\> Get-Variable c*

    Name                  Value
    ----                  -----
    Culture               en-US
    ConsoleFileName
    ConfirmPreference     High
    CommandLineParameters {}
    Counter               26

    PS C:\> Set-Variable -Name "counter" -Visibility Private
    PS C:\> Get-Variable c*

    Name                  Value
    ----                  -----
    Culture               en-US
    ConsoleFileName
    ConfirmPreference     High
    CommandLineParameters {}

    PS C:\> $counter
    "Cannot access the variable '$counter' because it is a private variable"

    PS C:\> .\use-counter.ps1
    #Commands completed successfully.
  description: |-
    This command shows how to change the visibility of a variable to Private. This variable
    can be read and changed by scripts with the required permissions, but it is not visible
    to the user.
  summary: |+
    This example shows how to change the visibility of a variable to `Private`. This variable can be
    read and changed by scripts with the required permissions, but it is not visible to the user.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Specifies the description of the variable.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies an array of items that this cmdlet excludes from the operation. The value of this
    parameter qualifies the **Path** parameter. Enter a path element or pattern, such as `*.txt`.
    Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Allows you to create a variable with the same name as an existing read-only variable, or to change
    the value of a read-only variable.

    By default, you can overwrite a variable, unless the variable has an option value of `ReadOnly` or
    `Constant`. For more information, see the **Option** parameter.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies an array of items that this cmdlet includes in the operation. The value of this parameter
    qualifies the **Name** parameter. Enter a name or name pattern, such as `c*`. Wildcards are
    permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies the variable name.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScopedItemOptions" data-throw-if-not-resolved="False" />
  name: Option
  description: |+
    Specifies the value of the **Options** property of the variable.

    Valid values are:

    - `None`: Sets no options. ("None" is the default.)
    - `ReadOnly`: Can be deleted. Cannot be changed, except by using the Force parameter.
    - `Constant`: Cannot be deleted or changed. `Constant` is valid only when you are creating a
      variable. You cannot change the options of an existing variable to `Constant`.
    - `Private`: The variable is available only in the current scope.
    - `AllScope`: The variable is copied to any new scopes that are created.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: None, ReadOnly, Constant, Private, AllScope, Unspecified
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the new variable. By default, this cmdlet does not generate any
    output.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  description: |+
    Specifies the scope of the variable.The acceptable values for this parameter are:

    - Global
    - Local
    - Script
    - Private
    - A number relative to the current scope (0 through the number of scopes, where 0 is the current
      scope and 1 is its parent).

    Local is the default.

    For more information, see [about_Scopes](../Microsoft.PowerShell.Core/About/about_scopes.md).

  defaultValue: Local
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Value
  description: |+
    Specifies the value of the variable.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SessionStateEntryVisibility" data-throw-if-not-resolved="False" />
  name: Visibility
  description: |+
    Determines whether the variable is visible outside of the session in which it was created. This
    parameter is designed for use in scripts and commands that will be delivered to other users.

    Valid values are:

    - Public:  The variable is visible. ("Public" is the default.)
    - Private: The variable is not visible.

    When a variable is private, it does not appear in lists of variables, such as those returned by
    `Get-Variable`, or in displays of the **Variable:** drive. Commands to read or change the value of a
    private variable return an error. However, the user can run commands that use a private variable if
    the commands were written in the session in which the variable was defined.

  defaultValue: Public
  position: Named
  aliases: ""
  parameterValueGroup: Public, Private
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Set-Variable
name: Set-Variable
description: |-
  The `Set-Variable` cmdlet assigns a value to a specified variable or changes the current value. If
  the variable does not exist, the cmdlet creates it.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/set-variable?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-Variable
