### YamlMime:PowershellCmdlet
summary: |-
  Calculates the numeric properties of objects, and the characters, words, and lines in string
  objects, such as files of text.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe objects to `Measure-Object`.
outputs:
- name: <xref href="Microsoft.PowerShell.Commands.GenericMeasureInfo" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.PowerShell.Commands.TextMeasureInfo" data-throw-if-not-resolved="False" />
  description: |-
    If you use the **Word** parameter, `Measure-Object` returns a **TextMeasureInfo** object.
    Otherwise, it returns a **GenericMeasureInfo** object.
links:
- text: Compare-Object
  href: Compare-Object.yml
- text: ForEach-Object
  href: ../Microsoft.PowerShell.Core/ForEach-Object.yml
- text: Group-Object
  href: Group-Object.yml
- text: New-Object
  href: New-Object.yml
- text: Select-Object
  href: Select-Object.yml
- text: Sort-Object
  href: Sort-Object.yml
- text: Tee-Object
  href: Tee-Object.yml
- text: Where-Object
  href: ../Microsoft.PowerShell.Core/Where-Object.yml
syntaxes:
- >-
  Measure-Object [-InputObject <PSObject>] [[-Property] <String[]>] [-Sum] [-Average] [-Maximum] [-Minimum]

   [<CommonParameters>]
- >-
  Measure-Object [-InputObject <PSObject>] [[-Property] <String[]>] [-Line] [-Word] [-Character]

   [-IgnoreWhiteSpace] [<CommonParameters>]
examples:
- title: 'Example 1: Count the files and folders in a directory'
  code: |-
    Get-ChildItem | Measure-Object
  description: ""
  summary: |+
    This command counts the files and folders in the current directory.

- title: 'Example 2: Measure the files in a directory'
  code: |-
    Get-ChildItem | Measure-Object -Property length -Minimum -Maximum -Average
  description: ""
  summary: |+
    This command displays the **Minimum**, **Maximum**, and **Sum** of the sizes of all files in the
    current directory, and the average size of a file in the directory.

- title: 'Example 3: Measure text in a text file'
  code: |-
    "One", "Two", "Three", "Four" | Set-Content -Path C:\Temp\tmp.txt
    Get-Content C:\Temp\tmp.txt | Measure-Object -Character -Line -Word

    Lines Words Characters Property
    ----- ----- ---------- --------
        4     4         15
  description: ""
  summary: |+
    This command displays the number of characters, words, and lines in the Text.txt file.
    Without the **Raw** parameter, `Get-Content` outputs the file as an array of lines.

    The first command uses `Set-Content` to add some default text to a file.

- title: 'Example 4: Measure objects containing a specified Property'
  code: |-
    $services = Get-Service
    $processes = Get-Process
    $services + $processes | Measure-Object
    $services + $processes | Measure-Object -Property DisplayName

    Count    : 682
    Average  :
    Sum      :
    Maximum  :
    Minimum  :
    Property :

    Count    : 290
    Average  :
    Sum      :
    Maximum  :
    Minimum  :
    Property : DisplayName
  description: ""
  summary: |+
    This example counts the number of objects that have a **DisplayName** property. The first two
    commands retrieve all the services and processes on the local machine. The third command counts the
    combined number of services and processes. The last command combines the two collections and pipes
    the result to `Measure-Object`.

    The **System.Diagnostics.Process** object does not have a **DisplayName** property, and is left out
    of the final count.

- title: 'Example 5: Measure the contents of a CSV file'
  code: |-
    Import-Csv d:\test\serviceyrs.csv | Measure-Object -Property years -Minimum -Maximum -Average
  description: ""
  summary: |+
    This command calculates the average years of service of the employees of a company.

    The `ServiceYrs.csv` file is a CSV file that contains the employee number and years of service of
    each employee. The first row in the table is a header row of **EmpNo**, **Years**.

    When you use `Import-Csv` to import the file, the result is a **PSCustomObject** with note
    properties of **EmpNo** and **Years**.
    You can use `Measure-Object` to calculate the values of these properties, just like any other
    property of an object.

- title: 'Example 6: Measure Boolean values'
  code: |-
    Get-ChildItem | Measure-Object -Property psiscontainer -Maximum -Sum -Minimum -Average

    Count             : 126
    Average           : 0.0634920634920635
    Sum               : 8
    Maximum           : 1
    Minimum           : 0
    StandardDeviation :
    Property          : PSIsContainer
  description: ""
  summary: |+
    This example demonstrates how the `Measure-Object` can measure Boolean values.
    In this case, it uses the **PSIsContainer** **Boolean** property to measure the incidence of
    folders (vs. files) in the current directory.

- title: 'Example 7: Measure strings'
  code: |-
    # The newline character `n separates the string into separate lines, as shown in the output.
    "One`nTwo`nThree"
    "One`nTwo`nThree" | Measure-Object -Line

    One
    Two
    Three


    Lines Words Characters Property
    ----- ----- ---------- --------
        3

    # The first string counts as a single line.
    # The second string is separated into two lines by the newline character.
    "One", "Two`nThree" | Measure-Object -Line

    Lines Words Characters Property
    ----- ----- ---------- --------
        3

    # The Word switch counts the number of words in each InputObject
    # Each InputObject is treated as a single line.
    "One, Two", "Three", "Four Five" | Measure-Object -Word -Line

    Lines Words Characters Property
    ----- ----- ---------- --------
        3     5
  description: ""
  summary: |+
    The following example measures the number of lines, first a single string, then across several
    strings. The newline character <code>`n</code> separates strings into multiple lines.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Average
  description: |+
    Indicates that the cmdlet displays the average value of the specified properties.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Character
  description: |+
    Indicates that the cmdlet counts the number of characters in the input objects.

    > [!NOTE]
    > The **Word**, **Char** and **Line** switches count *inside* each input object, as well as *across*
    > input objects. See Example 7.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: IgnoreWhiteSpace
  description: |+
    Indicates that the cmdlet ignores white space in character counts.
    By default, white space is not ignored.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  description: |+
    Specifies the objects to be measured.
    Enter a variable that contains the objects, or type a command or expression that gets the objects.

    When you use the **InputObject** parameter with `Measure-Object`, instead of piping command results
    to `Measure-Object`, the **InputObject** value is treated as a single object.

    It is recommended that you use `Measure-Object` in the pipeline if you want to measure a
    collection of objects based on whether the objects have specific values in defined properties.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Line
  description: |+
    Indicates that the cmdlet counts the number of lines in the input objects.

    > [!NOTE]
    > The **Word**, **Char** and **Line** switches count *inside* each input object, as well as *across*
    > input objects. See Example 7.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Maximum
  description: |+
    Indicates that the cmdlet displays the maximum value of the specified properties.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Minimum
  description: |+
    Indicates that the cmdlet displays the minimum value of the specified properties.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Property
  description: |+
    Specifies one or more properties to measure. If you do not specify any other measures,
    `Measure-Object` counts the objects that have the properties you specify.

  defaultValue: None
  acceptWildcardCharacters: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Sum
  description: |+
    Indicates that the cmdlet displays the sum of the values of the specified properties.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Word
  description: |+
    Indicates that the cmdlet counts the number of words in the input objects.

    > [!NOTE]
    > The **Word**, **Char** and **Line** switches count *inside* each input object, as well as *across*
    > input objects. See Example 7.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Measure-Object
name: Measure-Object
description: |-
  The `Measure-Object` cmdlet calculates the property values of certain types of object.
  `Measure-Object` performs three types of measurements, depending on the parameters in the command.

  The `Measure-Object` cmdlet performs calculations on the property values of objects. You can use
  `Measure-Object` to count objects or count objects with a specified **Property**. You can also use
  `Measure-Object` to calculate the **Minimum**, **Maximum**, **Sum**, **StandardDeviation** and
  **Average** of numeric values. For **String** objects, you can also use `Measure-Object` to
  count the number of lines, words, and characters.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 5/10/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/measure-object?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Measure-Object
