### YamlMime:PowershellCmdlet
summary: |-
  Reads a line of input from the console.
module: Microsoft.PowerShell.Utility
notes: |-
  This cmdlet only reads from the stdin stream of the host process. Usually, the stdin stream is
  connected to the keyboard of the host console.
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You can't pipe objects to this cmdlet.
outputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    By default, this cmdlet returns a string.
- name: <xref href="System.Security.SecureString" data-throw-if-not-resolved="False" />
  description: |-
    When you use **AsSecureString** parameter, this cmdlet returns a **SecureString**.
links:
- text: Clear-Host
  href: ../microsoft.powershell.core/clear-host.yml
- text: Get-Host
  href: Get-Host.yml
- text: Write-Host
  href: Write-Host.yml
- text: ConvertFrom-SecureString
  href: ../Microsoft.PowerShell.Security/ConvertFrom-SecureString.yml
syntaxes:
- Read-Host [[-Prompt] <Object>] [-AsSecureString] [<CommonParameters>]
examples:
- title: 'Example 1: Save console input to a variable'
  code: |-
    $Age = Read-Host "Please enter your age"
  description: ""
  summary: |+
    This example displays the string "Please enter your age:" as a prompt. When a value is entered and
    the Enter key is pressed, the value is stored in the `$Age` variable.

- title: 'Example 2: Save console input as a secure string'
  code: |-
    $pwd_secure_string = Read-Host "Enter a Password" -AsSecureString
  description: ""
  summary: |+
    This example displays the string "Enter a Password:" as a prompt. As a value is being entered,
    asterisks (`*`) appear on the console in place of the input. When the Enter key is pressed, the
    value is stored as a **SecureString** object in the `$pwd_secure_string` variable.

- title: 'Example 3: Normalizing input'
  code: |-
    $prompt = @(
        'List the cities you want weather information for.'
        'When specifying multiple cities, separate them with a semi-colon, like:'
        "'New York; Osan; Koforidua'"
    ) -join ' '

    $cities = Read-Host $prompt

    "Input cities string: `n`t'$cities'"

    $splitCities = $cities -split ';'

    "Split cities array:"
    $splitCities | ForEach-Object -Process { "`t'$_'" }

    $normalizedCities = $splitCities  | ForEach-Object -Process { $_.Trim() }

    "Normalized split cities array:"
    $normalizedCities | ForEach-Object -Process { "`t'$_'" }

    Input cities string:
            '    New York;  Osan   ;Koforidua   '
    Split cities array:
            '    New York'
            '  Osan   '
            'Koforidua   '
    Normalized split cities array:
            'New York'
            'Osan'
            'Koforidua'
  description: |-
    The example uses the `-split` operator to convert the input string into an array of strings. Each
    string in the array includes the name of a different city. However, the split strings include extra
    spaces. The `Trim()` method removes the leading and trailing spaces from each string.
  summary: |+
    This example prompts the user to input a list of cities separated by semi-colons. It shows the
    string's value as typed by the user. In the example, the user added spaces between some of
    the entries. This could lead to an error later in the script where the code expects an exact
    name.

    The example shows how you can convert an input string into an array of entries without any
    extra spaces.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsSecureString
  description: |+
    Indicates that the cmdlet displays asterisks (`*`) in place of the characters that the user types as
    input. When you use this parameter, the output of the `Read-Host` cmdlet is a **SecureString**
    object (**System.Security.SecureString**).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: Prompt
  description: |+
    Specifies the text of the prompt. Type a string. If the string includes spaces, enclose it in
    quotation marks. PowerShell appends a colon (`:`) to the text that you enter.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Read-Host
name: Read-Host
description: |-
  The `Read-Host` cmdlet reads a line of input from the console (stdin). You can use it to prompt a
  user for input. Because you can save the input as a secure string, you can use this cmdlet to prompt
  users for secure data, such as passwords.

  > [!NOTE]
  > `Read-Host` has a limit of 8190 characters it can accept as input from a user.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 05/22/2023
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/read-host?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Read-Host
