### YamlMime:PowershellCmdlet
summary: |-
  Deletes the value of a variable.
module: Microsoft.PowerShell.Utility
notes: |-
  * To delete a variable, along with its value, use Remove-Variable or Remove-Item.

    This cmdlet does not delete the values of variables that are set as constants or owned by the system, even if you use the *Force* parameter.

    If the variable that you are clearing does not exist, the cmdlet has no effect.
  It does not create a variable with a null value.

    You can also refer to **Clear-Variable** by its built-in alias, clv.
  For more information, see about_Aliases.

  *
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You cannot pipe objects to this cmdlet.
outputs:
- name: <xref href="None or System.Management.Automation.PSVariable" data-throw-if-not-resolved="False" />
  description: |-
    When you use the *PassThru* parameter, this cmdlet generates a **System.Management.Automation.PSVariable** object representing the cleared variable.
    Otherwise, this cmdlet does not generate any output.
links:
- text: Get-Variable
  href: Get-Variable.yml
- text: New-Variable
  href: New-Variable.yml
- text: Remove-Variable
  href: Remove-Variable.yml
- text: Set-Variable
  href: Set-Variable.yml
syntaxes:
- >-
  Clear-Variable [-Name] <String[]> [-Include <String[]>] [-Exclude <String[]>] [-Force] [-PassThru]

   [-Scope <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Remove the value of global variables that begin with a search string'
  code: |-
    PS C:\> Clear-Variable my* -Scope Global
  description: |-
    This command removes the value of global variables that have names that begin with my.
  summary: ""
- title: 'Example 2: Clear a variable in a child scope but not the parent scope'
  code: |-
    PS C:\> $a=3
    PS C:\> &{ Clear-Variable a }
    PS C:\> $a
    3
  description: |-
    These commands demonstrate that clearing a variable in a child scope does not clear the value in the parent scope.
    The first command sets the value of the variable $A to 3.
    The second command uses the invoke operator (&) to run the **Clear-Variable** command in a new scope.
    The variable is cleared in the child scope (although it did not exist), but it is not cleared in the local scope.
    The third command, which gets the value of $A, shows that the value 3 is unaffected.
  summary: ""
- title: 'Example 3: Delete the value of the specified variable'
  code: |-
    PS C:\> Clear-Variable -Name "Processes"
  description: |-
    This command deletes the value of the variable named Processes.
    After the cmdlet completes the operation, the variable named Processes still exists, but the value is null.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Exclude
  description: |+
    Specifies an array of items that this cmdlet omits in the operation.
    The value of this parameter qualifies the *Name* parameter.
    Enter a name element or pattern, such as "s*".
    Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Allows the cmdlet to clear a variable even if it is read-only.
    Even using the Force parameter, the cmdlet cannot clear constants.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Include
  description: |+
    Specifies an array of items that this cmdlet includes in the operation.
    The value of this parameter qualifies the *Name* parameter.
    Enter a name element or pattern, such as "s*".
    Wildcards are permitted.

  defaultValue: None
  acceptWildcardCharacters: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the variable to be cleared.
    Wildcards are permitted.
    This parameter is required, but the parameter name ("Name") is optional.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working.
    By default, this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  description: |+
    Specifies the scope in which this alias is valid.

    The acceptable values for this parameter are:

    - Global
    - Local
    - Script

    You can also use a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).
    Local is the default.
    For more information, see about_Scopes.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Clear-Variable
name: Clear-Variable
description: |-
  The **Clear-Variable** cmdlet deletes the data stored in a variable, but it does not delete the variable.
  As a result, the value of the variable is NULL (empty).
  If the variable has a specified data or object type, this cmdlet preserves the type of the object stored in the variable.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/clear-variable?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Clear-Variable
