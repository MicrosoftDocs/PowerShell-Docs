### YamlMime:PowershellCmdlet
summary: |-
  Converts a string containing one or more key and value pairs to a hash table.
module: Microsoft.PowerShell.Utility
notes: |-
  A here-string is a string consisting of one or more lines within which quotation marks are
  interpreted literally.

  This cmdlet can be useful in scripts that display user messages in multiple spoken languages. You
  can use the dictionary-style hash tables to isolate text strings from code, such as in resource
  files, and to format the text strings for use in translation tools.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a string containing a key-value pair to `ConvertFrom-StringData`.
outputs:
- name: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns a hash table that it creates from the key-value pairs.
syntaxes:
- ConvertFrom-StringData [-StringData] <String> [<CommonParameters>]
examples:
- title: 'Example 1: Convert a single-quoted here-string to a hash table'
  code: |-
    $Here = @'
    Msg1 = The string parameter is required.
    Msg2 = Credentials are required for this command.
    Msg3 = The specified variable does not exist.
    '@
    ConvertFrom-StringData -StringData $Here

    Name                           Value
    ----                           -----
    Msg3                           The specified variable does not exist.
    Msg2                           Credentials are required for this command.
    Msg1                           The string parameter is required.
  description: ""
  summary: |+
    This example converts a single-quoted here-string of user messages into a hash table. In a
    single-quoted string, values are not substituted for variables and expressions are not evaluated.
    The `ConvertFrom-StringData` cmdlet converts the value in the `$Here` variable to a hash table.

- title: 'Example 2: Convert a here-string containing a comment'
  code: |-
    ConvertFrom-StringData -StringData @'
    Name = Disks.ps1

    # Category is optional.

    Category = Storage
    Cost = Free
    '@

    Name                           Value
    ----                           -----
    Cost                           Free
    Category                       Storage
    Name                           Disks.ps1
  description: |-
    The value of the **StringData** parameter is a here-string, instead of a variable that contains a
    here-string. Either format is valid. The here-string includes a comment about one of the strings.
    `ConvertFrom-StringData` ignores single-line comments, but the `#` character must be the first
    non-whitespace character on the line. All characters on the line after the `#` are ignored.
  summary: |+
    This example converts a here-string that contains a comment and multiple key-value pairs into a hash
    table.

- title: 'Example 3: Convert a string to a hash table'
  code: |-
    $A = ConvertFrom-StringData -StringData "Top = Red `n Bottom = Blue"
    $A

    Name             Value
    ----             -----
    Bottom           Blue
    Top              Red
  description: |-
    To satisfy the condition that each key-value pair must be on a separate line, the string uses the PowerShell
    newline character (\`n) to separate the pairs.
  summary: |+
    This example converts a regular double-quoted string (not a here-string) into a hash table and saves
    it in the `$A` variable.

- title: 'Example 4: Use ConvertFrom-StringData in the DATA section of a script'
  code: |-
    $TextMsgs = DATA {
    ConvertFrom-StringData @'
    Text001 = The $Notebook variable contains the name of the user's system notebook.
    Text002 = The $MyNotebook variable contains the name of the user's private notebook.
    '@
    }
    $TextMsgs

    Name             Value
    ----             -----
    Text001          The $Notebook variable contains the name of the user's system notebook.
    Text002          The $MyNotebook variable contains the name of the user's private notebook.
  description: |-
    Because the text includes variable names, it must be enclosed in a single-quoted string so that the
    variables are interpreted literally and not expanded. Variables are not permitted in the **DATA**
    section.
  summary: |+
    This example shows a `ConvertFrom-StringData` command used in the DATA section of a script.
    The statements below the DATA section display the text to the user.

- title: 'Example 5: Use the pipeline operator to pass a string'
  code: |-
    $Here = @'
    Msg1 = The string parameter is required.
    Msg2 = Credentials are required for this command.
    Msg3 = The specified variable does not exist.
    '@
    $Hash = $Here | ConvertFrom-StringData
    $Hash

    Name     Value
    ----     -----
    Msg3     The specified variable does not exist.
    Msg2     Credentials are required for this command.
    Msg1     The string parameter is required.
  description: ""
  summary: |+
    This example shows that you can use a pipeline operator (`|`) to send a string to
    `ConvertFrom-StringData`. The the value of the `$Here` variable is piped to `ConvertFrom-StringData`
    and the result in the `$Hash` variable.

- title: 'Example 6: Use escape characters to add new lines and return characters'
  code: |-
    ConvertFrom-StringData @"
    Vincentio = Heaven doth with us as we with torches do,\nNot light them for themselves; for if our virtues\nDid not go forth of us, 'twere all alike\nAs if we had them not.
    Angelo = Let there be some more test made of my metal,\nBefore so noble and so great a figure\nBe stamp'd upon it.
    "@ | Format-List

    Name  : Angelo
    Value : Let there be some more test made of my metal,
            Before so noble and so great a figure
            Be stamp'd upon it.

    Name  : Vincentio
    Value : Heaven doth with us as we with torches do,
            Not light them for themselves; for if our virtues
            Did not go forth of us, 'twere all alike
            As if we had them not.
  description: ""
  summary: |+
    This example shows the use of escape characters to create new lines and return characters in source
    data. The escape sequence `\n` is used to create new lines within a block of text that is associated
    with a name or item in the resulting hash table.

- title: 'Example 7: Use backslash escape character to correctly render a file path'
  code: |-
    ConvertFrom-StringData "Message=Look in c:\\Windows\\System32"

    Name                           Value
    ----                           -----
    Message                        Look in c:\Windows\System32
  description: ""
  summary: |+
    This example shows how to use of the backslash escape character in the string data to allow a file
    path to render correctly in the resulting `ConvertFrom-StringData` hash table. The double backslash
    ensures that the literal backslash characters render correctly in the hash table output.

parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: StringData
  isRequired: true
  description: |+
    Specifies the string to be converted. You can use this parameter or pipe a string to
    `ConvertFrom-StringData`. The parameter name is optional.

    The value of this parameter must be a string that contains one or more key-value pairs. Each
    key-value pair must be on a separate line, or each pair must be separated by newline characters
    (\`n).

    You can include comments in the string, but the comments cannot be on the same line as a key-value
    pair. `ConvertFrom-StringData` ignores single-line comments. The `#` character must be the first
    non-whitespace character on the line. All characters on the line after the `#` are ignored. The
    comments are not included in the hash table.

    A here-string is a string consisting of one or more lines. Quotation marks within the here-string
    are interpreted literally as part of the string data. For more information, see
    [about_Quoting_Rules](../Microsoft.PowerShell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.ConvertFrom-StringData
name: ConvertFrom-StringData
description: |-
  The `ConvertFrom-StringData` cmdlet converts a string that contains one or more key and value pairs
  into a hash table. Because each key-value pair must be on a separate line, here-strings are often
  used as the input format. By default, the **key** must be separated from the **value** by an equals
  sign (`=`) character.

  The `ConvertFrom-StringData` cmdlet is considered to be a safe cmdlet that can be used in the `DATA`
  section of a script or function. When used in a `DATA` section, the contents of the string must
  conform to the rules for a DATA section. For more information, see
  [about_Data_Sections](../Microsoft.PowerShell.Core/About/about_Data_Sections.md).

  `ConvertFrom-StringData` supports escape character sequences that are allowed by conventional
  machine translation tools. That is, the cmdlet can interpret backslashes (`\`) as escape characters
  in the string data by using the
  [Regex.Unescape Method](/dotnet/api/system.text.regularexpressions.regex.unescape), instead of the
  PowerShell backtick character (\`) that would normally signal the end of a line in a script. Inside
  the here-string, the backtick character does not work. You can also preserve a literal backslash in
  your results by escaping it with a preceding backslash, like this: `\\`. Unescaped backslash
  characters, such as those that are commonly used in file paths, can render as illegal escape
  sequences in your results.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 10/21/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/convertfrom-stringdata?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: ConvertFrom-StringData
