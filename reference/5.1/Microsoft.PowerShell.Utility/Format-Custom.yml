### YamlMime:PowershellCmdlet
summary: |-
  Uses a customized view to format the output.
module: Microsoft.PowerShell.Utility
notes: |-
  `Format-Custom` is designed to display views that are not just tables or just lists. To display an
  alternate table view, use `Format-Table`. To display an alternate list view, use `Format-List`.

  You can also refer to `Format-Custom` by its built-in alias, `fc`. For more information, see
  [about_Aliases](../Microsoft.PowerShell.Core/About/about_Aliases.md).

  The **GroupBy** parameter assumes that the objects are sorted. Before using `Format-Custom` to
  group the objects, use `Sort-Object` to sort them.
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe any object to `Format-Custom`.
outputs:
- name: <xref href="Microsoft.PowerShell.Commands.Internal.Format" data-throw-if-not-resolved="False" />
  description: |-
    `Format-Custom` returns the format objects that represent the display.
links:
- text: about_Calculated_Properties
  href: ../Microsoft.PowerShell.Core/About/about_Calculated_Properties.md
- text: Format-Hex
  href: Format-Hex.yml
- text: Format-List
  href: Format-List.yml
- text: Format-Table
  href: Format-Table.yml
- text: Format-Wide
  href: Format-Wide.yml
- text: Get-Process
  href: ../Microsoft.PowerShell.Management/Get-Process.yml
syntaxes:
- >-
  Format-Custom [[-Property] <Object[]>] [-Depth <Int32>] [-GroupBy <Object>] [-View <String>]

   [-ShowError] [-DisplayError] [-Force] [-Expand <String>] [-InputObject <PSObject>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Format output with a custom view'
  code: |-
    Get-Command Start-Transcript | Format-Custom -View MyView
  description: |-
    This command formats information about the `Start-Transcript` cmdlet in the format defined by the
    MyView view, a custom view created by the user. To run this command successfully, you must first
    create a new PS1XML file, define the **MyView** view, and then use the `Update-FormatData` command
    to add the PS1XML file to PowerShell.
  summary: ""
- title: 'Example 2: Format output with the default view'
  code: |-
    Get-Process Winlogon | Format-Custom
  description: |-
    This command formats information about the **Winlogon** process in an alternate customized view.
    Because the command does not use the **View** parameter, `Format-Custom` uses a default custom view
    to format the data.
  summary: ""
- title: 'Example 3: Troubleshooting format errors'
  code: |-
    PC /> Get-Date | Format-Custom DayOfWeek,{ $_ / $null } -DisplayError

    class DateTime
    {
      DayOfWeek = Friday
       $_ / $null  = #ERR
    }


    PC /> Get-Date | Format-Custom DayOfWeek,{ $_ / $null } -ShowError

    class DateTime
    {
      DayOfWeek = Friday
       $_ / $null  =
    }

    Failed to evaluate expression " $_ / $null ".
    + CategoryInfo          : InvalidArgument: (12/21/2018 8:01:04 AM:PSObject) [], RuntimeException
    + FullyQualifiedErrorId : PSPropertyExpressionError
  description: ""
  summary: |+
    The following examples show of the results of adding the **DisplayError** or **ShowError**
    parameters with an expression.

parameters:
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Depth
  description: |+
    Specifies the number of columns in the display.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: DisplayError
  description: |+
    Displays errors at the command line. This parameter is rarely used, but can be used as a debugging
    aid when you are formatting expressions in a `Format-Custom` command, and the expressions do not
    appear to be working.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Expand
  description: |+
    Formats the collection object, as well as the objects in the collection. This parameter is designed
    to format objects that support the **System.Collections.ICollection** interface. The default value
    is **EnumOnly**.

    Valid values are:

    - EnumOnly: Displays the properties of the objects in the collection.
    - CoreOnly: Displays the properties of the collection object.
    - Both: Displays the properties of the collection object and the objects in the collection.

  defaultValue: EnumOnly
  position: Named
  aliases: ""
  parameterValueGroup: CoreOnly, EnumOnly, Both
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Directs the cmdlet to display all of the error information. Use with the **DisplayError** or
    **ShowError** parameters. By default, when an error object is written to the error or display
    streams, only some of the error information is displayed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: GroupBy
  description: |+
    Formats the output in groups based on a shared property or value. Enter an expression or a property
    of the output.

    The value of the **GroupBy** parameter can be a new calculated property. The calculated property can
    be a script block or a hash table. Valid key-value pairs are:

    - Name (or Label) `<string>`
    - Expression `<string>` or `<script block>`
    - FormatString `<string>`

    For more information, see
    [about_Calculated_Properties](../Microsoft.PowerShell.Core/About/about_Calculated_Properties.md).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  description: |+
    Specifies the objects to be formatted. Enter a variable that contains the objects or type a command
    or expression that gets the objects.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Object" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Property
  description: |+
    Specifies the object properties that appear in the display and the order in which they appear.
    Wildcards are permitted.

    If you omit this parameter, the properties that appear in the display depend on the object being
    displayed. The parameter name **Property** is optional. You cannot use the **Property** and
    **View** parameters in the same command.

    The value of the **Property** parameter can be a new calculated property. The calculated property
    can be a script block or a hash table. Valid key-value pairs are:

    - Expression - `<string>` or `<script block>`
    - Depth - `<int32>`

    For more information, see
    [about_Calculated_Properties](../Microsoft.PowerShell.Core/About/about_Calculated_Properties.md).

  defaultValue: None
  acceptWildcardCharacters: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ShowError
  description: |+
    Sends errors through the pipeline. This parameter is rarely used, but can be used as a debugging aid
    when you are formatting expressions in a `Format-Custom` command, and the expressions do not appear
    to be working.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: View
  description: |+
    Specifies the name of an alternate format or view. If you omit this parameter, `Format-Custom`
    uses a default custom view. You cannot use the **Property** and **View** parameters in the same
    command.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Format-Custom
name: Format-Custom
description: |-
  The `Format-Custom` cmdlet formats the output of a command as defined in an alternate view.
  `Format-Custom` is designed to display views that are not just tables or just lists. You can use
  the views defined in the `*format.PS1XML` files in the PowerShell directory, or you can create your
  own views in new PS1XML files and use the `Update-FormatData` cmdlet to add them to PowerShell.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 08/10/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/format-custom?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Format-Custom
