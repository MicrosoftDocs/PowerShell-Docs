### YamlMime:PowershellCmdlet
summary: |-
  Configures and starts a trace of the specified expression or command.
module: Microsoft.PowerShell.Utility
notes: |-
  - Tracing is a method that developers use to debug and refine programs. When tracing, the program
    generates detailed messages about each step in its internal processing.

  - The PowerShell tracing cmdlets are designed to help PowerShell developers, but they are available
    to all users. They let you monitor nearly every aspect of the functionality of the shell.

  - To find the PowerShell components that are enabled for tracing, type `Get-Help Get-TraceSource`.

    A trace source is the part of each PowerShell component that manages tracing and generates trace
    messages for the component. To trace a component, you identify its trace source.

    A trace listener receives the output of the trace and displays it to the user. You can elect to
    send the trace data to a user-mode or kernel-mode debugger, to the host or console, to a file, or
    to a custom listener derived from the **System.Diagnostics.TraceListener** class.

  - When you use the commandSet parameter set, PowerShell processes the command just as it would be
    processed in a pipeline. For example, command discovery is not repeated for each incoming object.

  - The names of the **Name**, **Expression**, **Option**, and **Command** parameters are optional. If
    you omit the parameter names, the unnamed parameter values must appear in this order: **Name**,
    **Expression**, **Option** or **Name**, **Command**, **Option**. If you include the parameter
    names, the parameters can appear in any order.
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe objects that represent input to the expression to `Trace-Command`.
outputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    Returns the command trace in the debug stream.
links:
- text: Get-TraceSource
  href: Get-TraceSource.yml
- text: Measure-Command
  href: Measure-Command.yml
- text: Set-TraceSource
  href: Set-TraceSource.yml
- text: Show-Command
  href: Show-Command.yml
syntaxes:
- >-
  Trace-Command [-InputObject <PSObject>] [-Name] <String[]> [[-Option] <PSTraceSourceOptions>]

   [-Expression] <ScriptBlock> [-ListenerOption <TraceOptions>] [-FilePath <String>] [-Force] [-Debugger]

   [-PSHost] [<CommonParameters>]
- >-
  Trace-Command [-InputObject <PSObject>] [-Name] <String[]> [[-Option] <PSTraceSourceOptions>]

   [-Command] <String> [-ArgumentList <Object[]>] [-ListenerOption <TraceOptions>] [-FilePath <String>] [-Force]

   [-Debugger] [-PSHost] [<CommonParameters>]
examples:
- title: 'Example 1: Trace metadata processing, parameter binding, and an expression'
  code: |-
    Trace-Command -Name metadata,parameterbinding,cmdlet -Expression {Get-Process Notepad} -PSHost
  description: |-
    It uses the **Name** parameter to specify the trace sources, the **Expression** parameter to specify
    the command, and the **PSHost** parameter to send the output to the console. Because it does not
    specify any tracing options or listener options, the command uses the defaults:

    - All for the tracing options
    - None for the listener options
  summary: |+
    This example starts a trace of metadata processing, parameter binding, and cmdlet creation and
    destruction of the `Get-Process Notepad` expression.

- title: 'Example 2: Trace the actions of ParameterBinding operations'
  code: |-
    $A = "i*"
    Trace-Command ParameterBinding {Get-Alias $Input} -PSHost -InputObject $A
  description: |-
    In `Trace-Command`, the **InputObject** parameter passes an object to the expression that is being
    processed during the trace.

    The first command stores the string `i*` in the `$A` variable. The second command uses the
    `Trace-Command` cmdlet with the ParameterBinding trace source. The **PSHost** parameter sends the
    output to the console.

    The expression being processed is `Get-Alias $Input`, where the `$Input` variable is associated with
    the **InputObject** parameter. The **InputObject** parameter passes the variable `$A` to the
    expression. In effect, the command being processed during the trace is
    `Get-Alias -InputObject $A" or "$A | Get-Alias`.
  summary: |+
    This example traces the actions of the **ParameterBinding** operations of PowerShell while it processes
    a `Get-Alias` expression that takes input from the pipeline.

parameters:
- type: <xref href="System.Object" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ArgumentList
  description: |+
    Specifies the parameters and parameter values for the command being traced. The alias for
    **ArgumentList** is **Args**. This feature is especially useful for debugging dynamic parameters.

    For more information about the behavior of **ArgumentList**, see
    [about_Splatting](../Microsoft.PowerShell.Core/About/about_Splatting.md#splatting-with-arrays).

  defaultValue: None
  position: Named
  aliases: Args
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Command
  isRequired: true
  description: |+
    Specifies a command that is being processed during the trace.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Debugger
  description: |+
    Indicates that the cmdlet sends the trace output to the debugger. You can view the output in any
    user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace
    listener.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.ScriptBlock" data-throw-if-not-resolved="False" />
  name: Expression
  isRequired: true
  description: |+
    Specifies the expression that is being processed during the trace. Enclose the expression in braces
    (`{}`).

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FilePath
  description: |+
    Specifies a file that the cmdlet sends the trace output to. This parameter also selects the file
    trace listener.

  defaultValue: None
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation. Used with the **FilePath**
    parameter. Even using the **Force** parameter, the cmdlet cannot override security restrictions.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  description: |+
    Specifies input to the expression that is being processed during the trace. You can enter a variable
    that represents the input that the expression accepts, or pass an object through the pipeline.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Diagnostics.TraceOptions" data-throw-if-not-resolved="False" />
  name: ListenerOption
  description: |+
    Specifies optional data to the prefix of each trace message in the output. The acceptable values for
    this parameter are:

    - None
    - LogicalOperationStack
    - DateTime
    - Timestamp
    - ProcessId
    - ThreadId
    - Callstack

    **None** is the default.

    To specify multiple options, separate them with commas, but with no spaces, and enclose them in
    quotation marks, such as "ProcessID,ThreadID".

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, Callstack
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies an array of PowerShell components that are traced. Enter the name of the trace source of
    each component. Wildcards are permitted. To find the trace sources on your computer, type
    `Get-TraceSource`.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSTraceSourceOptions" data-throw-if-not-resolved="False" />
  name: Option
  description: |+
    Determines the type of events that are traced. The acceptable values for this parameter are:

    - None
    - Constructor
    - Dispose
    - Finalizer
    - Method
    - Property
    - Delegates
    - Events
    - Exception
    - Lock
    - Error
    - Errors
    - Warning
    - Verbose
    - WriteLine
    - Data
    - Scope
    - ExecutionFlow
    - Assert
    - All

    All is the default.

    The following values are combinations of other values:

    - ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)
    - Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)
    - Errors: (Error and Exception).

    To specify multiple options, separate them with commas, but with no spaces, and enclose them in
    quotation marks, such as "Constructor,Dispose".

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, All
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PSHost
  description: |+
    Indicates that the cmdlet sends the trace output to the PowerShell host. This parameter also selects
    the PSHost trace listener.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Trace-Command
name: Trace-Command
description: |-
  The `Trace-Command` cmdlet configures and starts a trace of the specified expression or command.
  It works like Set-TraceSource, except that it applies only to the specified command.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 04/09/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/trace-command?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Trace-Command
