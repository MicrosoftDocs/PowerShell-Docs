### YamlMime:PowershellCmdlet
summary: |-
  Specifies how PowerShell handles information stream data for a command.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You can't pipe objects to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns no output. It only writes to the information message stream.
links:
- text: about_Output_Streams
  href: ../Microsoft.PowerShell.Core/About/about_Output_Streams.md
- text: about_Redirection
  href: ../Microsoft.PowerShell.Core/About/about_Redirection.md
- text: about_CommonParameters
  href: ../Microsoft.PowerShell.Core/About/about_CommonParameters.md
- text: about_Preference_Variables
  href: ../Microsoft.PowerShell.Core/About/about_Preference_Variables.md
- text: about_Redirection
  href: ../Microsoft.PowerShell.Core/About/about_Redirection.md
- text: Write-Debug
  href: Write-Debug.yml
- text: Write-Host
  href: Write-Host.yml
- text: Write-Information
  href: Write-Information.yml
- text: Write-Progress
  href: Write-Progress.yml
- text: Write-Verbose
  href: Write-Verbose.yml
- text: Write-Warning
  href: Write-Warning.yml
- text: Write-Output
  href: Write-Output.yml
syntaxes:
- Write-Information [-MessageData] <Object> [[-Tags] <String[]>] [<CommonParameters>]
examples:
- title: 'Example 1: Write information for Get- results'
  code: |-
    Write-Information -MessageData "Processes starting with 'P'" -InformationAction Continue
    Get-Process -Name p*

    Processes starting with 'P'

         18    19.76      15.16       0.00    6232   0 PFERemediation
         20     8.92      25.15       0.00   24944   0 policyHost
          9     1.77       7.64       0.00    1780   0 powercfg
         10    26.67      32.18       0.00    7028   0 powercfg
          8    26.55      31.59       0.00   13600   0 powercfg
          9     1.66       7.55       0.00   22620   0 powercfg
         21     6.17       4.54     202.20   12536   1 PowerMgr
         42    84.26      12.71   2,488.84   20588   1 powershell
         27    47.07      45.38       2.05   25988   1 powershell
         27    24.45       5.31       0.00   12364   0 PresentationFontCache
         92   112.04      13.36      82.30   13176   1 pwsh
        106   163.73      93.21     302.25   14620   1 pwsh
        227   764.01      92.16   1,757.22   25328   1 pwsh
  description: ""
  summary: |+
    In this example, you show an informational message, "Processes starting with 'P'", before running
    the `Get-Process` command to find all processes that have a **Name** value that starts with 'p'.
    Because the `$InformationPreference` variable is still set to its default, **SilentlyContinue**, you
    add the **InformationAction** parameter to override the `$InformationPreference` value, and show the
    message. The **InformationAction** value is **Continue**, which means that your message is shown,
    but the script or command continues, if it is not yet finished.

- title: 'Example 2: Write information and tag it'
  code: |-
    $message = "To filter your results for PowerShell, pipe your results to the Where-Object cmdlet."
    Get-Process -Name p*
    Write-Information -MessageData $message -Tags "Instructions" -InformationAction Continue

    NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
     ------    -----      -----     ------      --  -- -----------
         18    19.76      15.16       0.00    6232   0 PFERemediation
         20     8.92      25.15       0.00   24944   0 policyHost
          9     1.77       7.64       0.00    1780   0 powercfg
         10    26.67      32.18       0.00    7028   0 powercfg
          8    26.55      31.59       0.00   13600   0 powercfg
          9     1.66       7.55       0.00   22620   0 powercfg
         21     6.17       4.54     202.20   12536   1 PowerMgr
         42    84.26      12.71   2,488.84   20588   1 powershell
         27    47.07      45.38       2.05   25988   1 powershell
         27    24.45       5.31       0.00   12364   0 PresentationFontCache
         92   112.04      13.36      82.30   13176   1 pwsh
        106   163.73      93.21     302.25   14620   1 pwsh
        227   764.01      92.16   1,757.22   25328   1 pwsh

    To filter your results for PowerShell, pipe your results to the Where-Object cmdlet.
  description: ""
  summary: |+
    In this example, you use `Write-Information` to let users know they'll need to run another command
    after they're done running the current command. The example adds the tag `"Instructions"` to the
    informational message. After running this command, when you search the information stream for
    messages tagged `"Instructions"`, the message is in the results.

- title: 'Example 3: Write information to a file'
  code: |-
    function Test-Info
    {
        Get-Process P*
        Write-Information "Here you go"
    }
    Test-Info 6> Info.txt
  description: ""
  summary: |+
    In this example, you redirect the information stream in the function to `Info.txt` using the code
    `6>`. When you open the `Info.txt` file, you see the text "Here you go."

parameters:
- type: <xref href="System.Object" data-throw-if-not-resolved="False" />
  name: MessageData
  isRequired: true
  description: |+
    Specifies an informational message that you want to display to users as they run a script or
    command. For best results, enclose the informational message in quotation marks.

  defaultValue: None
  position: "0"
  aliases: Msg
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Tags
  description: |+
    Specifies a simple string that you can use to sort and filter messages that you have added to the
    information stream with `Write-Information`. This parameter works similarly to the **Tags**
    parameter in `New-ModuleManifest`.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Write-Information
name: Write-Information
description: |-
  The `Write-Information` cmdlet specifies how PowerShell handles information stream data for a
  command.

  Windows PowerShell 5.0 introduces a new, structured information stream. You can use this stream to
  transmit structured data between a script and its callers or the host application.
  `Write-Information` lets you add an informational message to the stream, and specify how PowerShell
  handles information stream data for a command. Information streams also work for
  `PowerShell.Streams`, jobs, and scheduled tasks.

  > [!NOTE]
  > The information stream does not follow the standard convention of prefixing its messages with
  > "[Stream Name]:". This was intended for brevity and visual cleanliness.

  The `$InformationPreference` preference variable value determines whether the message you provide to
  `Write-Information` is displayed at the expected point in a script's operation. Because the default
  value of this variable is **SilentlyContinue**, by default, informational messages are not shown.
  If you don't want to change the value of `$InformationPreference`, you can override its value by
  adding the **InformationAction** common parameter to your command. For more information, see
  [about_Preference_Variables](../Microsoft.PowerShell.Core/About/about_Preference_Variables.md) and
  [about_CommonParameters](../Microsoft.PowerShell.Core/About/about_CommonParameters.md).

  > [!NOTE]
  > Starting in Windows PowerShell 5.0, `Write-Host` is a wrapper for `Write-Information` This allows
  > you to use `Write-Host` to emit output to the information stream. This enables the capture or
  > suppression of data written using `Write-Host` while preserving backwards compatibility. For more
  > information see [Write-Host](Write-Host.yml)

  `Write-Information` is also a supported workflow activity in Windows PowerShell 5.1.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 12/12/2022
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.utility/write-information?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Write-Information
