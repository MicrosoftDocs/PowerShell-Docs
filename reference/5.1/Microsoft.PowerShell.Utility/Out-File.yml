### YamlMime:PowershellCmdlet
summary: |-
  Sends output to a file.
module: Microsoft.PowerShell.Utility
notes: |-
  Input objects are automatically formatted as they would be in the terminal, but you can use a
  `Format-*` cmdlet to explicitly control the formatting of the output to the file. For example,
  `Get-Date | Format-List | Out-File out.txt`

  To send a PowerShell command's output to the `Out-File` cmdlet, use the pipeline. Alternatively, you
  can store data in a variable and use the **InputObject** parameter to pass data to the `Out-File`
  cmdlet.

  `Out-File` saves data to a file but it does not produce any output objects to the pipeline.
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe any object to `Out-File`.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    `Out-File` does not generate any output.
links:
- text: about_Providers
  href: ../Microsoft.Powershell.Core/About/about_Providers.md
- text: about_Quoting_Rules
  href: ../Microsoft.Powershell.Core/About/about_Quoting_Rules.md
- text: Out-Default
  href: ../Microsoft.PowerShell.Core/Out-Default.yml
- text: Out-GridView
  href: Out-GridView.yml
- text: Out-Host
  href: ../Microsoft.PowerShell.Core/Out-Host.yml
- text: Out-Null
  href: ../Microsoft.PowerShell.Core/Out-Null.yml
- text: Out-Printer
  href: Out-Printer.yml
- text: Out-String
  href: Out-String.yml
- text: Tee-Object
  href: Tee-Object.yml
syntaxes:
- >-
  Out-File [-FilePath] <string> [[-Encoding] <string>] [-Append] [-Force] [-NoClobber] [-Width <int>]

   [-NoNewline] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Out-File [[-Encoding] <string>] -LiteralPath <string> [-Append] [-Force] [-NoClobber] [-Width <int>]

   [-NoNewline] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Send output and create a file'
  code: |-
    Get-Process | Out-File -FilePath .\Process.txt
    Get-Content -Path .\Process.txt

    NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
     ------    -----      -----     ------      --  -- -----------
         29    22.39      35.40      10.98   42764   9 Application
         53    99.04     113.96       0.00   32664   0 CcmExec
         27    96.62     112.43     113.00   17720   9 Code
  description: |-
    The `Get-Process` cmdlet gets the list of processes running on the local computer. The **Process**
    objects are sent down the pipeline to the `Out-File` cmdlet. `Out-File` uses the **FilePath**
    parameter and creates a file in the current directory named **Process.txt**. The `Get-Content`
    command gets content from the file and displays it in the PowerShell console.
  summary: |+
    This example shows how to send a list of the local computer's processes to a file. If the file does
    not exist, `Out-File` creates the file in the specified path.

- title: 'Example 2: Prevent an existing file from being overwritten'
  code: |-
    Get-Process | Out-File -FilePath .\Process.txt -NoClobber

    Out-File : The file 'C:\Test\Process.txt' already exists.
    At line:1 char:15
    + Get-Process | Out-File -FilePath .\Process.txt -NoClobber
    +               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  description: |-
    The `Get-Process` cmdlet gets the list of processes running on the local computer. The **Process**
    objects are sent down the pipeline to the `Out-File` cmdlet. `Out-File` uses the **FilePath**
    parameter and attempts to write to a file in the current directory named **Process.txt**. The
    **NoClobber** parameter prevents the file from being overwritten and displays a message that the
    file already exists.
  summary: |+
    This example prevents an existing file from being overwritten. By default, `Out-File` overwrites
    existing files.

- title: 'Example 3: Send output to a file in ASCII format'
  code: |-
    $Procs = Get-Process
    Out-File -FilePath .\Process.txt -InputObject $Procs -Encoding ASCII -Width 50
  description: |-
    The `Get-Process` cmdlet gets the list of processes running on the local computer. The **Process**
    objects are stored in the variable, `$Procs`. `Out-File` uses the **FilePath** parameter and creates
    a file in the current directory named **Process.txt**. The **InputObject** parameter passes the
    process objects in `$Procs` to the file **Process.txt**. The **Encoding** parameter converts the
    output to **ASCII** format. The **Width** parameter limits each line in the file to 50 characters so
    some data might be truncated.
  summary: |+
    This example shows how to encode output with a specific encoding type.

- title: 'Example 4: Use a provider and send output to a file'
  code: |-
    PS> Set-Location -Path Alias:

    PS> Get-Location

    Path
    ----
    Alias:\

    PS> Get-ChildItem | Out-File -FilePath C:\TestDir\AliasNames.txt

    PS> Get-Content -Path C:\TestDir\AliasNames.txt

    CommandType     Name
    -----------     ----
    Alias           % -> ForEach-Object
    Alias           ? -> Where-Object
    Alias           ac -> Add-Content
    Alias           cat -> Get-Content
  description: |-
    The `Set-Location` command uses the **Path** parameter to set the current location to the registry
    provider `Alias:`. The `Get-Location` cmdlet displays the complete path for `Alias:`.
    `Get-ChildItem` sends objects down the pipeline to the `Out-File` cmdlet. `Out-File` uses the
    **FilePath** parameter to specify the complete path and filename for the output,
    **C:\TestDir\AliasNames.txt**. The `Get-Content` cmdlet uses the **Path** parameter and displays the
    file's content in the PowerShell console.
  summary: |+
    This example shows how to use the `Out-File` cmdlet when you are not in a **FileSystem** provider
    drive. Use the `Get-PSProvider` cmdlet to view the providers on your local computer. For more
    information, see [about_Providers](../Microsoft.Powershell.Core/About/about_Providers.md).

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Append
  description: |+
    Adds the output to the end of an existing file. If no **Encoding** is specified, the cmdlet uses the
    default encoding. That encoding may not match the encoding of the target file. This is the same
    behavior as the redirection operator (`>>`).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Encoding
  description: |+
    Specifies the type of encoding for the target file. The default value is `unicode`.

    The acceptable values for this parameter are as follows:

    - `ascii` Uses ASCII (7-bit) character set.
    - `bigendianunicode` Uses UTF-16 with the big-endian byte order.
    - `default` Uses the encoding that corresponds to the system's active code page (usually ANSI).
    - `oem` Uses the encoding that corresponds to the system's current OEM code page.
    - `string` Same as `unicode`.
    - `unicode` Uses UTF-16 with the little-endian byte order.
    - `unknown` Same as `unicode`.
    - `utf7` Uses UTF-7.
    - `utf8` Uses UTF-8.
    - `utf32` Uses UTF-32 with the little-endian byte order.

  defaultValue: Unicode
  position: "1"
  aliases: ""
  parameterValueGroup: ASCII, BigEndianUnicode, Default, OEM, String, Unicode, Unknown, UTF7, UTF8, UTF32
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FilePath
  isRequired: true
  description: |+
    Specifies the path to the output file.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Overrides the read-only attribute and overwrites an existing read-only file. The **Force** parameter
    does not override security restrictions.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  description: |+
    Specifies the objects to be written to the file. Enter a variable that contains the objects or type
    a command or expression that gets the objects.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies the path to the output file. The **LiteralPath** parameter is used exactly as it is typed.
    Wildcard characters are not accepted. If the path includes escape characters, enclose it in single
    quotation marks. Single quotation marks tell PowerShell not to interpret any characters as escape
    sequences. For more information, see [about_Quoting_Rules](../Microsoft.Powershell.Core/About/about_Quoting_Rules.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoClobber
  description: |+
    **NoClobber** prevents an existing file from being overwritten and displays a message that the file
    already exists. By default, if a file exists in the specified path, `Out-File` overwrites the file
    without warning.

  defaultValue: None
  position: Named
  aliases: NoOverwrite
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoNewline
  description: |+
    Specifies that the content written to the file does not end with a newline character. The string
    representations of the input objects are concatenated to form the output. No spaces or newlines are
    inserted between the output strings. No newline is added after the last output string.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Width
  description: |+
    Specifies the number of characters in each line of output. Any additional characters are truncated,
    not wrapped. If this parameter is not used, the width is determined by the characteristics of the
    host. The default for the PowerShell console is 80 characters.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Out-File
name: Out-File
description: |-
  The `Out-File` cmdlet sends output to a file. It implicitly uses PowerShell's formatting system to
  write to the file. The file receives the same display representation as the terminal. This means
  that the output may not be ideal for programmatic processing unless all input objects are strings.
  When you need to specify parameters for the output, use `Out-File` rather than the redirection
  operator (`>`). For more information about redirection, see [about_Redirection](../Microsoft.PowerShell.Core/About/about_Redirection.md).
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 09/21/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/out-file?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Out-File
