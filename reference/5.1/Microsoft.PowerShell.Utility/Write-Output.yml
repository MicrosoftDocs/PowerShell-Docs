### YamlMime:PowershellCmdlet
summary: |-
  Sends the specified objects to the next command in the pipeline. If the command is the last command
  in the pipeline, the objects are displayed in the console.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe objects to `Write-Output`.
outputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    `Write-Output` returns the objects that are submitted as input.
links:
- text: about_Output_Streams
  href: ../Microsoft.PowerShell.Core/About/about_Output_Streams.md
- text: about_Redirection
  href: ../Microsoft.PowerShell.Core/About/about_Redirection.md
- text: Tee-Object
  href: Tee-Object.yml
- text: Write-Debug
  href: Write-Debug.yml
- text: Write-Error
  href: Write-Error.yml
- text: Write-Host
  href: Write-Host.yml
- text: Write-Information
  href: Write-Information.yml
- text: Write-Progress
  href: Write-Progress.yml
- text: Write-Verbose
  href: Write-Verbose.yml
- text: Write-Warning
  href: Write-Warning.yml
syntaxes:
- Write-Output [-InputObject] <PSObject[]> [-NoEnumerate] [<CommonParameters>]
examples:
- title: 'Example 1: Get objects and write them to the console'
  code: |-
    $P = Get-Process
    Write-Output $P
  description: |-
    The first command gets processes running on the computer and stores them in the `$P` variable.

    The second and third commands display the process objects in `$P` on the console.
  summary: ""
- title: 'Example 2: Pass output to another cmdlet'
  code: |-
    Write-Output "test output" | Get-Member
  description: |-
    This command pipes the "test output" string to the `Get-Member` cmdlet, which displays the members
    of the **System.String** class, demonstrating that the string was passed along the pipeline.
  summary: ""
- title: 'Example 3: Suppress enumeration in output'
  code: |-
    Write-Output 1,2,3 | Measure-Object

    Count    : 3
    ...

    Write-Output 1,2,3 -NoEnumerate | Measure-Object

    Count    : 1
    ...
  description: |-
    This command adds the **NoEnumerate** parameter to treat a collection or array as a single object
    through the pipeline.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies the objects to send down the pipeline. Enter a variable that contains the objects, or type
    a command or expression that gets the objects.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoEnumerate
  description: |+
    By default, the `Write-Output` cmdlet always enumerates its output. The **NoEnumerate** parameter
    suppresses the default behavior, and prevents `Write-Output` from enumerating output. The
    **NoEnumerate** parameter has no effect if the command is wrapped in parentheses, because the
    parentheses force enumeration. For example, `(Write-Output 1,2,3)` still enumerates the array.

    > [!IMPORTANT]
    > There is an issue with this switch in Windows PowerShell that is fixed in PowerShell 6.2 and
    > above. When using **NoEnumerate** and explicitly using the **InputObject** parameter, the command
    > still enumerates. To work around this, pass the **InputObject** argument(s) positionally.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Write-Output
name: Write-Output
description: |-
  The `Write-Output` cmdlet sends the specified object down the pipeline to the next command.
  If the command is the last command in the pipeline, the object is displayed in the console.

  `Write-Output` sends objects down the primary pipeline, also known as the "output stream" or the
  "success pipeline." To send error objects down the error pipeline, use Write-Error.

  This cmdlet is typically used in scripts to display strings and other objects on the console. One of
  the built-in aliases for `Write-Output` is `echo` and similar to other shells that use `echo`, the
  default behavior is to display the output at the end of a pipeline. In PowerShell, it is generally
  not necessary to use the cmdlet in instances where the output is displayed by default. For example,
  `Get-Process | Write-Output` is equivalent to `Get-Process`. Or, `echo "Home directory: $HOME"` can
  be written, `"Home directory: $HOME"`.

  By default, `Write-Output` enumerates through collections provided to the cmdlet. However,
  `Write-Output` can also be used to pass collections down the pipeline as a single object with the
  **NoEnumerate** parameter.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 10/14/2020
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/write-output?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Write-Output
