### YamlMime:PowershellCmdlet
summary: |-
  Creates an XML-based representation of an object or objects and stores it in a file.
module: Microsoft.PowerShell.Utility
notes: ""
inputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: |-
    You can pipeline any object to `Export-Clixml`.
outputs:
- name: <xref href="System.IO.FileInfo" data-throw-if-not-resolved="False" />
  description: |-
    `Export-Clixml` creates a file that contains the XML.
links:
- text: ConvertTo-Html
  href: ConvertTo-Html.yml
- text: ConvertTo-Xml
  href: ConvertTo-Xml.yml
- text: Export-Csv
  href: Export-Csv.yml
- text: Import-Clixml
  href: Import-Clixml.yml
- text: Join-Path
  href: ../Microsoft.PowerShell.Management/Join-Path.yml
- text: Securely Store Credentials on Disk
  href: https://powershellcookbook.com/recipe/PukO/securely-store-credentials-on-disk
- text: Use PowerShell to Pass Credentials to Legacy Systems
  href: https://devblogs.microsoft.com/scripting/use-powershell-to-pass-credentials-to-legacy-systems/
- text: Windows.Security.Cryptography.DataProtection
  href: /uwp/api/windows.security.cryptography.dataprotection
syntaxes:
- >-
  Export-Clixml [-Path] <String> -InputObject <PSObject> [-Depth <Int32>] [-Force] [-NoClobber]

   [-Encoding <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Export-Clixml -LiteralPath <String> -InputObject <PSObject> [-Depth <Int32>] [-Force] [-NoClobber]

   [-Encoding <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Export a string to an XML file'
  code: |-
    "This is a test" | Export-Clixml -Path .\sample.xml
  description: |-
    The string **This is a test** is sent down the pipeline. `Export-Clixml` uses the **Path** parameter
    to create an XML file named `sample.xml` in the current directory.
  summary: |+
    This example creates an XML file that stores in the current directory, a representation of the
    string **This is a test**.

- title: 'Example 2: Export an object to an XML file'
  code: |-
    Get-Acl C:\test.txt | Export-Clixml -Path .\FileACL.xml
    $fileacl = Import-Clixml -Path .\FileACL.xml
  description: |-
    The `Get-Acl` cmdlet gets the security descriptor of the `Test.txt` file. It sends the object down
    the pipeline to pass the security descriptor to `Export-Clixml`. The XML-based representation of the
    object is stored in a file named `FileACL.xml`.

    The `Import-Clixml` cmdlet creates an object from the XML in the `FileACL.xml` file. Then, it saves
    the object in the `$fileacl` variable.
  summary: |+
    This example shows how to export an object to an XML file and then create an object by importing the
    XML from the file.

- title: 'Example 3: Encrypt an exported credential object'
  code: |-
    $Credxmlpath = Join-Path (Split-Path $Profile) TestScript.ps1.credential
    $Credential | Export-Clixml $Credxmlpath
    $Credxmlpath = Join-Path (Split-Path $Profile) TestScript.ps1.credential
    $Credential = Import-Clixml $Credxmlpath
  description: |-
    The `Export-Clixml` cmdlet encrypts credential objects by using the Windows [Data Protection API](/previous-versions/windows/apps/hh464970(v=win.10)).
    The encryption ensures that only your user account on only that computer can decrypt the contents of
    the credential object. The exported `CLIXML` file can't be used on a different computer or by a
    different user.

    In the example, the file in which the credential is stored is represented by
    `TestScript.ps1.credential`. Replace **TestScript** with the name of the script with which you're
    loading the credential.

    You send the credential object down the pipeline to `Export-Clixml`, and save it to the path,
    `$Credxmlpath`, that you specified in the first command.

    To import the credential automatically into your script, run the final two commands. Run
    `Import-Clixml` to import the secured credential object into your script. This import eliminates the
    risk of exposing plain-text passwords in your script.
  summary: |+
    In this example, given a credential that you've stored in the `$Credential` variable by running the
    `Get-Credential` cmdlet, you can run the `Export-Clixml` cmdlet to save the credential to disk.

    > [!IMPORTANT]
    > `Export-Clixml` only exports encrypted credentials on Windows. On non-Windows operating systems
    > such as macOS and Linux, credentials are exported in plain text.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Depth
  description: |+
    Specifies how many levels of contained objects are included in the XML representation. The default
    value is `2`.

    The default value can be overridden for the object type in the `Types.ps1xml` files. For more
    information, see [about_Types.ps1xml](../Microsoft.PowerShell.Core/About/about_Types.ps1xml.md).

  defaultValue: "2"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Encoding
  description: |+
    Specifies the type of encoding for the target file. The default value is **Unicode**.

    The acceptable values for this parameter are as follows:

    - `ASCII` Uses ASCII (7-bit) character set.
    - `BigEndianUnicode` Uses UTF-16 with the big-endian byte order.
    - `Default` Uses the encoding that corresponds to the system's active code page (usually ANSI).
    - `OEM` Uses the encoding that corresponds to the system's current OEM code page.
    - `Unicode` Uses UTF-16 with the little-endian byte order.
    - `UTF7` Uses UTF-7.
    - `UTF8` Uses UTF-8.
    - `UTF32` Uses UTF-32 with the little-endian byte order.

  defaultValue: Unicode
  position: Named
  aliases: ""
  parameterValueGroup: ASCII, BigEndianUnicode, Default, OEM, Unicode, UTF7, UTF8, UTF32
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.

    Causes the cmdlet to clear the read-only attribute of the output file if necessary. The cmdlet will
    attempt to reset the read-only attribute when the command completes.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the object to be converted. Enter a variable that contains the objects, or type a command
    or expression that gets the objects. You can also pipe objects to `Export-Clixml`.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies the path to the file where the XML representation of the object will be stored. Unlike
    **Path**, the value of the **LiteralPath** parameter is used exactly as it's typed. No characters
    are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation
    marks. Single quotation marks tell PowerShell not to interpret any characters as escape sequences.

  defaultValue: None
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoClobber
  description: |+
    Indicates that the cmdlet doesn't overwrite the contents of an existing file. By default, if a file
    exists in the specified path, `Export-Clixml` overwrites the file without warning.

  defaultValue: "False"
  position: Named
  aliases: NoOverwrite
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the path to the file where the XML representation of the object will be stored.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Export-Clixml
name: Export-Clixml
description: |-
  The `Export-Clixml` cmdlet creates a Common Language Infrastructure (CLI) XML-based representation
  of an object or objects and stores it in a file. You can then use the `Import-Clixml` cmdlet to
  recreate the saved object based on the contents of that file.
  For more information about CLI, see [Language independence](/dotnet/standard/language-independence).

  This cmdlet is similar to `ConvertTo-Xml`, except that `Export-Clixml` stores the resulting XML in a
  file. `ConvertTo-XML` returns the XML, so you can continue to process it in PowerShell.

  A valuable use of `Export-Clixml` on Windows computers is to export credentials and secure strings
  securely as XML. For an example, see Example 3.
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 08/14/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/export-clixml?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Export-Clixml
