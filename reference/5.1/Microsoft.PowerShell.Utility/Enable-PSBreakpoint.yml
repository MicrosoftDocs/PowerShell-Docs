### YamlMime:PowershellCmdlet
summary: |-
  Enables the breakpoints in the current console.
module: Microsoft.PowerShell.Utility
notes: |-
  - The `Enable-PSBreakpoint` cmdlet doesn't generate an error if you try to enable a breakpoint that
    is already enabled. As such, you can enable all breakpoints without error, even when only a few
    are disabled.

  - Breakpoints are enabled when you create them by using the `Set-PSBreakpoint` cmdlet. You don't
    need to enable newly created breakpoints.
inputs:
- name: <xref href="System.Management.Automation.Breakpoint" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a breakpoint object to `Enable-PSBreakpoint`.
outputs:
- name: <xref href="None or System.Management.Automation.Breakpoint" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, `Enable-PSBreakpoint` returns a breakpoint object that represents that breakpoint that was enabled. Otherwise, this cmdlet doesn't generate any output.
links:
- text: Disable-PSBreakpoint
  href: Disable-PSBreakpoint.yml
- text: Get-PSBreakpoint
  href: Get-PSBreakpoint.yml
- text: Get-PSCallStack
  href: Get-PSCallStack.yml
- text: Remove-PSBreakpoint
  href: Remove-PSBreakpoint.yml
- text: Set-PSBreakpoint
  href: Set-PSBreakpoint.yml
syntaxes:
- Enable-PSBreakpoint [-PassThru] [-Id] <Int32[]> [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Enable-PSBreakpoint [-PassThru] [-Breakpoint] <Breakpoint[]> [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: 'Example 1: Enable all breakpoints'
  code: |-
    Get-PSBreakpoint | Enable-PSBreakpoint
  description: |-
    Using aliases, this example can be abbreviated as `gbp | ebp`.
  summary: |+
    This example enables all breakpoints in the current session.

- title: 'Example 2: Enable breakpoints by ID'
  code: |-
    Enable-PSBreakpoint -Id 0, 1, 5
  description: ""
  summary: |+
    This example enables multiple breakpoints using their breakpoint IDs.

- title: 'Example 3: Enable a disabled breakpoint'
  code: |-
    $B = Set-PSBreakpoint -Script "sample.ps1" -Variable Name -PassThru
    $B | Enable-PSBreakpoint -PassThru

    AccessMode : Write
    Variable   : Name
    Action     :
    Enabled    : False
    HitCount   : 0
    Id         : 0
    Script     : C:\ps-test\sample.ps1
    ScriptName : C:\ps-test\sample.ps1

    AccessMode : Write
    Variable   : Name
    Action     :
    Enabled    : True
    HitCount   : 0
    Id         : 0
    Script     : C:\ps-test\sample.ps1
    ScriptName : C:\ps-test\sample.ps1
  description: |-
    `Set-PSBreakpoint` creates a breakpoint on the **Name** variable in the `Sample.ps1` script saving
    the breakpoint object in the `$B` variable. The **PassThru** parameter displays the value of the
    **Enabled** property of the breakpoint is **False**.

    `Enable-PSBreakpoint` re-enables the breakpoint. Again, using the **PassThru** parameter we see that
    the value of the **Enabled** property is **True**.
  summary: |+
    This example re-enables a breakpoint that has been disabled.

- title: 'Example 4: Enable breakpoints using a variable'
  code: |-
    $B = Get-PSBreakpoint -Id 3, 5
    Enable-PSBreakpoint -Breakpoint $B
  description: |-
    `Get-PSBreakpoint` gets the breakpoints and saves them in the `$B` variable. Using the
    **Breakpoint** parameter, `Enable-PSBreakpoint` enables the breakpoints.

    This example is equivalent to running `Enable-PSBreakpoint -Id 3, 5`.
  summary: |+
    This example enables a set of breakpoints using the breakpoint objects.

parameters:
- type: <xref href="System.Management.Automation.Breakpoint" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Breakpoint
  isRequired: true
  description: |+
    Specifies the breakpoints to enable. Provide a variable containing breakpoints or a command that
    gets breakpoint objects, such as `Get-PSBreakpoint`. You can also pipe breakpoint objects to
    `Enable-PSBreakpoint`.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Id
  isRequired: true
  description: |+
    Specifies the **Id** numbers of the breakpoints to enable. The default value is all breakpoints.
    Provide the **Id** by number or in a variable. You can't pipe **Id** numbers to
    `Enable-PSBreakpoint`. To find the **Id** of a breakpoint, use the `Get-PSBreakpoint` cmdlet.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the breakpoint being enabled. By default, this cmdlet doesn't
    generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Utility.Enable-PSBreakpoint
name: Enable-PSBreakpoint
description: |-
  The `Enable-PSBreakpoint` cmdlet re-enables disabled breakpoints. You can use it to enable all
  breakpoints, or specific breakpoints by providing breakpoint objects or IDs.

  A breakpoint is a point in a script where execution stops temporarily so that you can examine the
  state of the script. Newly created breakpoints are automatically enabled, but can be disabled using
  `Disable-PSBreakpoint`.

  Technically, this cmdlet changes the value of the **Enabled** property of a breakpoint object to
  **True**.

  `Enable-PSBreakpoint` is one of several cmdlets designed for debugging PowerShell scripts. For more
  information about the PowerShell debugger, see [about_Debuggers](../Microsoft.PowerShell.Core/About/about_Debuggers.md).
metadata:
  external help file: Microsoft.PowerShell.Commands.Utility.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Utility
  ms.date: 10/09/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/enable-psbreakpoint?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Enable-PSBreakpoint
