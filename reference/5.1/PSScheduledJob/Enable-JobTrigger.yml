### YamlMime:PowershellCmdlet
summary: |-
  Enables the job triggers of scheduled jobs.
module: PSScheduledJob
notes: |-
  * **Enable-JobTrigger** does not generate errors or warnings if you enable a job trigger that is already enabled.
inputs:
- name: <xref href="Microsoft.PowerShell.ScheduledJob.ScheduledJobTrigger" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe job triggers to **Enable-JobTrigger**.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not generate any output.
links:
- text: Add-JobTrigger
  href: Add-JobTrigger.yml
- text: Disable-JobTrigger
  href: Disable-JobTrigger.yml
- text: Disable-ScheduledJob
  href: Disable-ScheduledJob.yml
- text: Enable-JobTrigger
  href: Enable-JobTrigger.yml
- text: Enable-ScheduledJob
  href: Enable-ScheduledJob.yml
- text: Get-JobTrigger
  href: Get-JobTrigger.yml
- text: Get-ScheduledJob
  href: Get-ScheduledJob.yml
- text: Get-ScheduledJobOption
  href: Get-ScheduledJobOption.yml
- text: New-JobTrigger
  href: New-JobTrigger.yml
- text: New-ScheduledJobOption
  href: New-ScheduledJobOption.yml
- text: Register-ScheduledJob
  href: Register-ScheduledJob.yml
- text: Remove-JobTrigger
  href: Remove-JobTrigger.yml
- text: Set-JobTrigger
  href: Set-JobTrigger.yml
- text: Set-ScheduledJob
  href: Set-ScheduledJob.yml
- text: Set-ScheduledJobOption
  href: Set-ScheduledJobOption.yml
- text: Unregister-ScheduledJob
  href: Unregister-ScheduledJob.yml
syntaxes:
- Enable-JobTrigger [-InputObject] <ScheduledJobTrigger[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Enable a job trigger'
  code: |-
    PS C:\> Get-JobTrigger -Name Backup-Archives -TriggerID 1 | Enable-JobTrigger
  description: |-
    This command enables the first trigger (ID=1) of the Backup-Archives scheduled job on the local computer.

    The command uses the Get-JobTrigger cmdlet to get the job trigger.
    A pipeline operator sends the job trigger to the **Enable-JobTrigger** cmdlet, which enables it.
  summary: ""
- title: 'Example 2: Enable all job triggers'
  code: |-
    PS C:\> Get-ScheduledJob | Get-JobTrigger | Enable-JobTrigger
  description: |-
    The command uses the Get-ScheduledJob cmdlet to get  the scheduled jobs on the local computer.
    A pipeline operator (|) sends the scheduled jobs to the Get-JobTrigger cmdlet, which gets all job triggers of the scheduled jobs.
    Another pipeline operator sends the job triggers to the **Enable-JobTrigger** cmdlet, which enables them.
  summary: ""
- title: 'Example 3: Enable the job trigger of a scheduled job on a remote computer'
  code: |-
    PS C:\> Invoke-Command -ComputerName Server01 {Get-JobTrigger -Name DeployPackage | Where-Object {$_.Frequency -eq "AtLogon"} | Enable-JobTrigger}
  description: |-
    This command re-enables the AtLogon job triggers on the DeployPackage scheduled job on the Server01 remote computer.

    The command uses the Invoke-Command cmdlet to run the commands on the Server01 computer.
    The remote command uses the Get-JobTrigger cmdlet to get the job triggers of the DeployPackage scheduled job.
    A pipeline operator sends the job triggers to the Where-Object cmdlet which returns only AtLogon job triggers.
    A pipeline operator sends the AtLogon job triggers to the **Enable-JobTrigger** cmdlet, which enables them.
  summary: ""
- title: 'Example 4: Display disabled job triggers'
  code: |-
    PS C:\> Get-ScheduledJob | Get-JobTrigger | where {!$_.Enabled} | Format-Table Id, Frequency, At, DaysOfWeek, Enabled, @{Label="JobName";Expression={$_.JobDefinition.Name}}
    Id Frequency At                     DaysOfWeek Enabled JobName
    -- --------- --                     ---------- ------- -------
     1    Weekly 9/28/2011 3:00:00 AM   {Monday}   False   Backup-Archive
     2    Daily  9/29/2011 1:00:00 AM              False   Backup-Archive
     1    Weekly 10/20/2011 11:00:00 PM {Friday}   False   Inventory
     1    Weekly 11/2/2011 2:00:00 PM   {Monday}   False   Inventory
  description: |-
    This command displays all disabled job triggers of all scheduled jobs in a table.
    You can use a command like this one to discover job triggers that might need to be enabled.

    The command uses the Get-ScheduledJob cmdlet to get the scheduled jobs on the local computer.
    A pipeline operator (|) sends the scheduled jobs to the Get-JobTrigger cmdlet, which gets all job triggers of the scheduled jobs.
    Another pipeline operator sends the job triggers to the Where-Object cmdlet, which returns only job triggers that are disabled, that is, where the value of the Enabled property of the job trigger is not (!) true.

    Another pipeline operator sends the disabled job triggers to the Format-Table cmdlet, which displays the selected properties of the job triggers in a table.
    The properties include a new JobName property that displays the name of the scheduled job in the JobDefinition property of the job trigger.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.PowerShell.ScheduledJob.ScheduledJobTrigger" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies the job trigger to enable.
    Enter a variable that contains **ScheduledJobTrigger** objects or type a command or expression that gets **ScheduledJobTrigger** objects, such as a Get-JobTrigger command.
    You can also pipe a **ScheduledJobTrigger** object to **Enable-JobTrigger**.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working.
    By default, this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PSScheduledJob.Enable-JobTrigger
name: Enable-JobTrigger
description: |-
  The **Enable-JobTrigger** cmdlet re-enables job triggers of scheduled jobs, such as those that were disabled by using the Disable-JobTrigger cmdlet.
  Enabled and re-enabled job triggers can start scheduled jobs immediately; there is no need to restart Windows or Windows PowerShell.

  To use this cmdlet, use the  Get-JobTrigger cmdlet to get the job triggers.
  Then pipe the job triggers to **Enable-JobTrigger** or use its *InputObject* parameter.

  To enable a job trigger, the **Enable-JobTrigger** cmdlet sets the Enabled property of the job trigger to $True.

  **Enable-ScheduledJob** is one of a collection of job scheduling cmdlets in the **PSScheduledJob** module that is included in Windows PowerShell.

  For more information about Scheduled Jobs, see the About topics in the PSScheduledJob module.
  Import the PSScheduledJob module and then type: `Get-Help about_Scheduled*` or see about_Scheduled_Jobs.

  This cmdlet was introduced in Windows PowerShell 3.0.
metadata:
  external help file: Microsoft.PowerShell.ScheduledJob.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PSScheduledJob
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/psscheduledjob/enable-jobtrigger?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Enable-JobTrigger
