### YamlMime:PowershellCmdlet
summary: |-
  Enables a scheduled job.
module: PSScheduledJob
notes: |-
  - `Enable-ScheduledJob` does not generate warnings or errors if you use it to enable a scheduled job
    that is already enabled.
inputs:
- name: <xref href="Microsoft.PowerShell.ScheduledJob.ScheduledJobDefinition" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a scheduled job to `Enable-ScheduledJob`.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    By default, this cmdlet returns no output.
- name: <xref href="Microsoft.PowerShell.ScheduledJob.ScheduledJobDefinition" data-throw-if-not-resolved="False" />
  description: |-
    When you use the **PassThru** parameter, this cmdlet returns the scheduled job that it enabled.
links:
- text: Add-JobTrigger
  href: Add-JobTrigger.yml
- text: Disable-JobTrigger
  href: Disable-JobTrigger.yml
- text: Disable-ScheduledJob
  href: Disable-ScheduledJob.yml
- text: Enable-JobTrigger
  href: Enable-JobTrigger.yml
- text: Enable-ScheduledJob
  href: Enable-ScheduledJob.yml
- text: Get-JobTrigger
  href: Get-JobTrigger.yml
- text: Get-ScheduledJob
  href: Get-ScheduledJob.yml
- text: Get-ScheduledJobOption
  href: Get-ScheduledJobOption.yml
- text: New-JobTrigger
  href: New-JobTrigger.yml
- text: New-ScheduledJobOption
  href: New-ScheduledJobOption.yml
- text: Register-ScheduledJob
  href: Register-ScheduledJob.yml
- text: Remove-JobTrigger
  href: Remove-JobTrigger.yml
- text: Set-JobTrigger
  href: Set-JobTrigger.yml
- text: Set-ScheduledJob
  href: Set-ScheduledJob.yml
- text: Set-ScheduledJobOption
  href: Set-ScheduledJobOption.yml
- text: Unregister-ScheduledJob
  href: Unregister-ScheduledJob.yml
syntaxes:
- >-
  Enable-ScheduledJob [-InputObject] <ScheduledJobDefinition> [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- Enable-ScheduledJob [-Id] <Int32> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
- Enable-ScheduledJob [-Name] <String> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Enable a scheduled job'
  code: |-
    Enable-ScheduledJob -ID 2 -Passthru
  description: |-
    The `Enable-ScheduledJob` command enables the scheduled job with ID 2 on the local computer. The
    **PassThru** parameter allows the Job object to be output.
  summary: |+
    This example enables the scheduled job on a local computer.

- title: 'Example 2: Enable all scheduled jobs'
  code: |-
    Get-ScheduledJob | Enable-ScheduledJob
  description: |-
    The `Get-ScheduledJob` cmdlet gets all scheduled jobs and pipes them to `Enable-ScheduledJob` cmdlet
    to enable them.

    `Enable-ScheduledJob` does not generate warnings or errors if you enable a scheduled job that is
    already enabled, so you can enable all scheduled jobs without conditions.
  summary: |+
    This examples enables all scheduled jobs on the local computer.

- title: 'Example 3: Enable selected scheduled jobs'
  code: |-
    Get-ScheduledJob | Get-ScheduledJobOption | Where-Object {$_.RunWithoutNetwork} |
        ForEach-Object {Enable-ScheduledJob -InputObject $_.JobDefinition}
  description: |-
    The command uses the `Get-ScheduledJob` cmdlet to get all scheduled jobs on the computer. A pipeline
    operator (`|`) sends the scheduled jobs to the `Get-ScheduledJobOption` cmdlet, which gets the job
    options of each scheduled job. Each job options object has a JobDefinition property that contains
    the associated scheduled job. The JobDefinition property is used to complete the command.

    The command uses a pipeline operator (`|`) to send the job options to the `Where-Object` cmdlet,
    which selects scheduled job option objects in which the **RunWithoutNetwork** property has a value
    of `$true`. Another pipeline operator sends the selected scheduled job options objects to the
    `ForEach-Object` cmdlet which runs an `Enable-ScheduledJob` command on the scheduled job in the
    value of the **JobDefinition** property of each job options object.
  summary: |+
    This example enables scheduled jobs that do not require a network connection.

- title: 'Example 4: Enable scheduled jobs on a remote computer'
  code: |-
    Invoke-Command -ComputerName "Srv01,Srv10" -ScriptBlock {Enable-ScheduledJob -Name "Inventory"}
  description: |-
    This command enables scheduled jobs that have "test" in their names on two remote computers, Srv01
    and Srv10.

    The command uses the `Invoke-Command` cmdlet to run an `Enable-ScheduledJob` command on the Srv01
    and Srv10 computers. The command uses the **Name** parameter of `Enable-ScheduledJob` to enable the
    Inventory scheduled job on each computer.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Id
  isRequired: true
  description: |+
    Enables the scheduled job with the specified identification number (ID). Enter the ID of a scheduled
    job.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PowerShell.ScheduledJob.ScheduledJobDefinition" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the scheduled job to enable. Enter a variable that contains **ScheduledJobDefinition**
    objects or type a command or expression that gets **ScheduledJobDefinition** objects, such as a
    `Get-ScheduledJob` command. You can also pipe a **ScheduledJobDefinition** object to
    `Enable-ScheduledJob`.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Enables the scheduled jobs with the specified names. Enter the name of a scheduled job. Wildcards
    are supported.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working. By default, this cmdlet does not
    generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PSScheduledJob.Enable-ScheduledJob
name: Enable-ScheduledJob
description: |-
  The `Enable-ScheduledJob` cmdlet re-enables scheduled jobs that are disabled, such as those that are
  disabled by using the `Disable-ScheduledJob` cmdlet. Enabled jobs run automatically when triggered.

  To enable a scheduled job, the `Enable-ScheduledJob` cmdlet sets the Enabled property of the
  scheduled job to `$true`.

  `Enabled-ScheduledJob` is one of a collection of job scheduling cmdlets in the **PSScheduledJob**
  module that is included in Windows PowerShell.

  For more information about Scheduled Jobs, see the About topics in the PSScheduledJob module. Import
  the PSScheduledJob module and then type: `Get-Help about_Scheduled*` or see [about_Scheduled_Jobs](About/about_Scheduled_Jobs.md).

  This cmdlet was introduced in Windows PowerShell 3.0.
metadata:
  external help file: Microsoft.PowerShell.ScheduledJob.dll-Help.xml
  Locale: en-US
  Module Name: PSScheduledJob
  ms.date: 12/13/2022
  online version: https://learn.microsoft.com/powershell/module/psscheduledjob/enable-scheduledjob?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Enable-ScheduledJob
