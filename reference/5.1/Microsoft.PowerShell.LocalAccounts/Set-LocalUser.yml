### YamlMime:PowershellCmdlet
summary: |-
  Modifies a local user account.
module: Microsoft.PowerShell.LocalAccounts
notes: |-
  * The **PrincipalSource** property is a property on **LocalUser**, **LocalGroup**, and **LocalPrincipal** objects that describes the source of the object. The possible sources are as follows:

  - Local
  - Active Directory
  - Azure Active Directory group
  - Microsoft Account

  **PrincipalSource** is supported only by Windows 10, Windows Server 2016, and later versions of the Windows operating system. For earlier versions, the property is blank.
inputs:
- name: <xref href="System.Management.Automation.SecurityAccountsManager.LocalUser, System.String, System.Security.Principal.SecurityIdentifier" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe a local user, a string, or a SID to this cmdlet.
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet does not generate any output.
links:
- text: Disable-LocalUser
  href: Disable-LocalUser.yml
- text: Enable-LocalUser
  href: Enable-LocalUser.yml
- text: Get-LocalUser
  href: Get-LocalUser.yml
- text: New-LocalUser
  href: New-LocalUser.yml
- text: Remove-LocalUser
  href: Remove-LocalUser.yml
- text: Rename-LocalUser
  href: Rename-LocalUser.yml
syntaxes:
- >-
  Set-LocalUser [-AccountExpires <DateTime>] [-AccountNeverExpires] [-Description <String>] [-FullName <String>]

   [-Name] <String> [-Password <SecureString>] [-PasswordNeverExpires <Boolean>]

   [-UserMayChangePassword <Boolean>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-LocalUser [-AccountExpires <DateTime>] [-AccountNeverExpires] [-Description <String>] [-FullName <String>]

   [-InputObject] <LocalUser> [-Password <SecureString>] [-PasswordNeverExpires <Boolean>]

   [-UserMayChangePassword <Boolean>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-LocalUser [-AccountExpires <DateTime>] [-AccountNeverExpires] [-Description <String>] [-FullName <String>]

   [-Password <SecureString>] [-PasswordNeverExpires <Boolean>] [-SID] <SecurityIdentifier>

   [-UserMayChangePassword <Boolean>] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Change a description of a user account'
  code: |-
    PS C:\> Set-LocalUser -Name "Admin07" -Description "Description of this account."
  description: |-
    This command changes the description of a user account named Admin07.
  summary: ""
- title: 'Example 2: Change the password on an account'
  code: |-
    PS C:\> $Password = Read-Host -AsSecureString
    PS C:\> $UserAccount = Get-LocalUser -Name "User02"
    PS C:\> $UserAccount | Set-LocalUser -Password $Password
  description: |-
    The first command prompts you for a password by using the Read-Host cmdlet.
    The command stores the password as a secure string in the $Password variable.

    The second command gets a user account named User02 by using **Get-LocalUser**.
    The command stores the account in the $UserAccount variable.

    The third command sets the new password on the user account stored in $UserAccount.
  summary: ""
parameters:
- type: <xref href="System.DateTime" data-throw-if-not-resolved="False" />
  name: AccountExpires
  description: |+
    Specifies when the user account expires.
    To obtain a **DateTime** object, use the Get-Date cmdlet.

    If you do not want the account to expire, specify the *AccountNeverExpires* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AccountNeverExpires
  description: |+
    Indicates that the account does not expire.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Specifies a comment for the user account.
    The maximum length is 48 characters.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FullName
  description: |+
    Specifies the full name for the user account.
    The full name differs from the user name of the user account.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.PowerShell.Commands.LocalUser" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies the user account that this cmdlet changes.
    To obtain a user account, use the Get-LocalUser cmdlet.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the user account that this cmdlet changes.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Security.SecureString" data-throw-if-not-resolved="False" />
  name: Password
  description: |+
    Specifies a password for the user account.
    If the user account is connected to a Microsoft account, do not set a password.

    You can use `Read-Host -GetCredential`, Get-Credential, or ConvertTo-SecureString to create a **SecureString** object for the password.

    If you omit the *Password* and *NoPassword* parameters, **Set-LocalUser** prompts you for the user's password.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Boolean" data-throw-if-not-resolved="False" />
  name: PasswordNeverExpires
  description: |+
    Indicates whether the password expires.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Security.Principal.SecurityIdentifier" data-throw-if-not-resolved="False" />
  name: SID
  isRequired: true
  description: |+
    Specifies the security ID (SID) of the user account that this cmdlet changes.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Boolean" data-throw-if-not-resolved="False" />
  name: UserMayChangePassword
  description: |+
    Indicates that the user can change the password on the user account.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.LocalAccounts.Set-LocalUser
name: Set-LocalUser
description: |-
  The **Set-LocalUser** cmdlet modifies a local user account.
  This cmdlet can reset the password of a local user account.

  > [!NOTE]
  > The Microsoft.PowerShell.LocalAccounts module is not available in 32-bit PowerShell on a 64-bit
  > system.
metadata:
  external help file: Microsoft.Powershell.LocalAccounts.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.LocalAccounts
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.localaccounts/set-localuser?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-LocalUser
