### YamlMime:PowershellCmdlet
summary: |-
  Modifies a CIM instance on a CIM server by calling the ModifyInstance method of the CIM class.
module: CimCmdlets
notes: ""
inputs:
- name: <xref href="Microsoft.Management.Infrastructure.CimInstance" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Management.Infrastructure.CimInstance" data-throw-if-not-resolved="False" />
  description: |-
    When the **Passthru** parameter is specified, this cmdlet returns a modified CIM instance object.
links:
- text: Get-CimInstance
  href: get-ciminstance.yml
- text: New-CimInstance
  href: New-CimInstance.yml
- text: Remove-CimInstance
  href: remove-ciminstance.yml
syntaxes:
- >-
  Set-CimInstance [-ComputerName <String[]>] [-ResourceUri <Uri>] [-OperationTimeoutSec <UInt32>]

   [-InputObject] <CimInstance> [-Property <IDictionary>] [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Set-CimInstance -CimSession <CimSession[]> [-ResourceUri <Uri>] [-OperationTimeoutSec <UInt32>]

   [-InputObject] <CimInstance> [-Property <IDictionary>] [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Set-CimInstance -CimSession <CimSession[]> [-Namespace <String>] [-OperationTimeoutSec <UInt32>]

   [-Query] <String> [-QueryDialect <String>] -Property <IDictionary> [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Set-CimInstance [-ComputerName <String[]>] [-Namespace <String>] [-OperationTimeoutSec <UInt32>]

   [-Query] <String> [-QueryDialect <String>] -Property <IDictionary> [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: 'Example 1: Set the CIM instance'
  code: |-
    Set-CimInstance -Query 'Select * from Win32_Environment where name LIKE "testvar%"' -Property @{VariableValue="abcd"}
  description: ""
  summary: |+
    This example sets the value of the **VariableValue** property to **abcd** using the **Query**
    parameter. You can modify instances matching a Windows Management Instrumentation Query Language
    (WQL) query.

- title: 'Example 2: Set the CIM instance property using pipeline'
  code: |-
    Get-CimInstance -Query 'Select * from Win32_Environment where name LIKE "testvar%"' |
      Set-CimInstance -Property @{VariableValue="abcd"}
  description: ""
  summary: |+
    This example retrieves the CIM instance object filtered by the **Query** parameter using the
    `Get-CimInstance` cmdlet. The `Set-CimInstance` cmdlet modifies the value of **VariableValue**
    property to **abcd**.

- title: 'Example 3: Set the CIM instance property using input object'
  code: |-
    $x = Get-CimInstance -Query 'Select * from Win32_Environment where Name="testvar"'
    Set-CimInstance -InputObject $x -Property @{VariableValue="somevalue"} -PassThru
  description: |-
    This example retrieves the CIM instance objects filtered by the Query parameter in to a variable
    `$x` using `Get-CimInstance`, and then passes the contents of the variable to the `Set-CimInstance`
    cmdlet. `Set-CimInstance` then modifies the **VariableValue** property to **somevalue**. Because the
    **Passthru** parameter is used, This example returns a modified CIM instance object.
  summary: ""
- title: 'Example 4: Set the CIM instance property'
  code: |-
    $x = Get-CimInstance -Query 'Select * from Win32_Environment where name="testvar"'
    $x.VariableValue = "Change"
    Set-CimInstance -CimInstance $x -PassThru
  description: ""
  summary: |+
    This example retrieves the CIM instance object that is specified in the **Query** parameter into a
    variable `$x` using the `Get-CimInstance` cmdlet, and changes the **VariableValue** property value
    of the object to change. The CIM instance object is then saved using the `Set-CimInstance` cmdlet.
    Because the **Passthru** parameter is used, This example returns a modified CIM instance object.

- title: 'Example 5: Show the list of CIM instances to modify using WhatIf'
  code: |-
    Set-CimInstance -Query 'Select * from Win32_Environment where name LIKE "testvar%"' -Property @{VariableValue="abcd"} -WhatIf
  description: ""
  summary: |+
    This example uses the common parameter **WhatIf** to specify that the modification should not be
    done, but only output what would happen if it were done.

- title: 'Example 6: Set the CIM instance after confirmation from the user'
  code: |-
    Set-CimInstance -Query 'Select * from Win32_Environment where name LIKE "testvar%"' -Property @{VariableValue="abcd"} -Confirm
  description: ""
  summary: |+
    This example uses the common parameter **Confirm** to specify that the modification should be done
    only after confirmation from the user.

- title: 'Example 7: Set the created CIM instance'
  code: |-
    $x = New-CimInstance -ClassName Win32_Environment -Property @{Name="testvar";UserName="domain\user"} -Keys Name,UserName -ClientOnly
    Set-CimInstance -CimInstance $x -Property @{VariableValue="somevalue"} -PassThru
  description: ""
  summary: |+
    This example creates a CIM instance with the specified properties using the `New-CimInstance`
    cmdlet, and retrieves its contents in to a variable `$x`. The variable is then passed to the
    `Set-CimInstance` cmdlet, which modifies the value of **VariableValue** property to **somevalue**.
    Because the **Passthru** parameter is used, This example returns a modified CIM instance object.

parameters:
- type: <xref href="Microsoft.Management.Infrastructure.CimSession" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CimSession
  isRequired: true
  description: |+
    Runs the cmdlets on a remote computer. Enter a computer name or a session object, such as the output
    of a `New-CimSession` or `Get-CimSession` cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ComputerName
  description: |+
    Specifies the name of the computer on which you want to run the CIM operation. You can specify a
    fully qualified domain name (FQDN) or a NetBIOS name.

    If you do not specify this parameter, the cmdlet performs the operation on the local computer using
    Component Object Model (COM).

    If you specify this parameter, the cmdlet creates a temporary session to the specified computer
    using the WsMan protocol.

    If multiple operations are being performed on the same computer, connecting using a CIM session
    gives better performance.

  defaultValue: None
  position: Named
  aliases: CN, ServerName
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.Management.Infrastructure.CimInstance" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Specifies a CIM instance object to use as input.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: CimInstance
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Namespace
  description: |+
    Specifies the namespace for the CIM operation. The default namespace is root/cimv2. You can use tab
    completion to browse the list of namespaces, because PowerShell gets a list of namespaces from the
    local WMI server to provide the list of namespaces.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.UInt32" data-throw-if-not-resolved="False" />
  name: OperationTimeoutSec
  description: |+
    Specifies the amount of time that the cmdlet waits for a response from the computer. By default, the
    value of this parameter is 0, which means that the cmdlet uses the default timeout value for the
    server.

    If the **OperationTimeoutSec** parameter is set to a value less than the robust connection retry
    timeout of 3 minutes, network failures that last more than the value of the **OperationTimeoutSec**
    parameter are not recoverable, because the operation on the server times out before the client can
    reconnect.

  defaultValue: None
  position: Named
  aliases: OT
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working. By default, this cmdlet does not
    generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="False" />
  name: Property
  description: |+
    Specifies the properties of the CIM instance as a hash table (using name-value pairs). Only the
    properties specified using this parameter are changed. Other properties of the CIM instance are not
    changed.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: Arguments
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Query
  isRequired: true
  description: |+
    Specifies a query to run on the CIM server to retrieve CIM instances on which to run the cmdlet. You
    can specify the query dialect using the QueryDialect parameter.

    If the value specified contains double quotes (`"`), single quotes (`'`), or a backslash (`\`), you
    must escape those characters by prefixing them with the backslash (`\`) character. If the value
    specified uses the WQL **LIKE** operator, then you must escape the following characters by enclosing
    them in square brackets (`[]`): percent (`%`), underscore (`_`), or opening square bracket (`[`).

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: QueryDialect
  description: |+
    Specifies the query language used for the Query parameter. The acceptable values for this parameter
    are: **WQL** or **CQL**. The default value is **WQL**.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: ResourceUri
  description: |+
    Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI
    is used to identify a specific type of resource, such as disks or processes, on a computer.

    A URI consists of a prefix and a path to a resource. For example:

    - `http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk`
    - `http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings`

    By default, if you do not specify this parameter, the DMTF standard resource URI
    `http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/` is used and the class name is appended to it.

    ResourceURI can only be used with CIM sessions created using the WSMan protocol, or when specifying
    the ComputerName parameter, which creates a CIM session using WSMan. If you specify this parameter
    without specifying the ComputerName parameter, or if you specify a CIM session created using DCOM
    protocol, you will get an error, because the DCOM protocol does not support the ResourceURI
    parameter.

    If both the **ResourceUri** parameter and the **Filter** parameter are specified, the **Filter**
    parameter is ignored.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: CimCmdlets.Set-CimInstance
name: Set-CimInstance
description: |-
  This cmdlet modifies a CIM instance on a CIM server.

  If the **InputObject** parameter is not specified, the cmdlet works in one of the following ways:

  - If neither the **ComputerName** parameter nor the **CimSession** parameter is specified, then this
    cmdlet works on local Windows Management Instrumentation (WMI) using a Component Object Model
    (COM) session.
  - If either the **ComputerName** parameter or the **CimSession** parameter is specified, then this
    cmdlet works against the CIM server specified by either the **ComputerName** parameter or the
    **CimSession** parameter.

  If the **InputObject** parameter is specified, the cmdlet works in one of the following ways:

  - If neither the **ComputerName** parameter nor the **CimSession** parameter is specified, then this
    cmdlet uses the CIM session or computer name from the input object.
  - If the either the **ComputerName** parameter or the **CimSession** parameter is specified, then
    this cmdlet uses the either the **CimSession** parameter value or **ComputerName** parameter
    value. This is not very common.
metadata:
  external help file: Microsoft.Management.Infrastructure.CimCmdlets.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: CimCmdlets
  ms.date: 5/15/2019
  online version: https://docs.microsoft.com/powershell/module/cimcmdlets/set-ciminstance?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-CimInstance
