### YamlMime:PowershellCmdlet
summary: |-
  Creates a CIM instance.
module: CimCmdlets
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet accepts no input objects.
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns an object that contains the CIM instance information.
links:
- text: Get-CimClass
  href: get-cimclass.yml
- text: Get-CimInstance
  href: get-ciminstance.yml
- text: Remove-CimInstance
  href: remove-ciminstance.yml
- text: Set-CimInstance
  href: Set-CimInstance.yml
syntaxes:
- >-
  New-CimInstance [-ClassName] <String> [-Key <String[]>] [[-Property] <IDictionary>]

   [-Namespace <String>] [-OperationTimeoutSec <UInt32>] [-ComputerName <String[]>] [-ClientOnly]

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-CimInstance [-ClassName] <String> [-Key <String[]>] [[-Property] <IDictionary>]

   [-Namespace <String>] [-OperationTimeoutSec <UInt32>] -CimSession <CimSession[]> [-ClientOnly]

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-CimInstance -ResourceUri <Uri> [-Key <String[]>] [[-Property] <IDictionary>]

   [-Namespace <String>] [-OperationTimeoutSec <UInt32>] -CimSession <CimSession[]> [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  New-CimInstance -ResourceUri <Uri> [-Key <String[]>] [[-Property] <IDictionary>]

   [-Namespace <String>] [-OperationTimeoutSec <UInt32>] [-ComputerName <String[]>] [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  New-CimInstance [-CimClass] <CimClass> [[-Property] <IDictionary>] [-OperationTimeoutSec <UInt32>]

   -CimSession <CimSession[]> [-ClientOnly] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-CimInstance [-CimClass] <CimClass> [[-Property] <IDictionary>] [-OperationTimeoutSec <UInt32>]

   [-ComputerName <String[]>] [-ClientOnly] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Create an instance of a CIM class'
  code: |-
    New-CimInstance -ClassName Win32_Environment -Property @{Name="testvar";VariableValue="testvalue";UserName="domain\user"}
  description: |-
    No client side validation is performed if the class does not exist, the properties are wrong, or if
    the server rejects the call. If the instance is created successfully, the cmdlet outputs the newly
    created instance.
  summary: |+
    This example creates an instance of a CIM Class named win32_environment in the root/cimv2 namespace
    on the computer.

- title: 'Example 2: Create an instance of a CIM class using a class schema'
  code: |-
    $class = Get-CimClass -ClassName Win32_Environment
    New-CimInstance -CimClass $class -Property @{Name="testvar";VariableValue="testvalue";UserName="Contoso\User1"}
  description: ""
  summary: |+
    This example retrieves a CIM class object and stores it in a variable named `$class`. The contents
    of the variable are then passed to the `New-CimInstance` cmdlet.

- title: 'Example 3: Create a dynamic instance on the client'
  code: |-
    $a = New-CimInstance -ClassName Win32_Process -Property @{Handle=0} -Key Handle -ClientOnly
    Get-CimInstance -CimInstance $a
    Invoke-CimMethod -CimInstance $a -MethodName GetOwner

    ProcessId Name                HandleCount WorkingSetSize VirtualSize
    --------- ----                ----------- -------------- -----------
    0         System Idle Process 0           8192           8192

    Domain         :
    ReturnValue    : 2
    User           :
    PSComputerName :
  description: |-
    The `Get-CimInstance` cmdlet then retrieves a particular single instance. The `Invoke-CimMethod`
    cmdlet calls the **GetOwner** method on the retrieved instance.
  summary: |+
    This example creates a dynamic instance of a CIM class named **Win32_Process** on the client
    computer without getting the instance from the server. The new instance is stored in the variable
    `$a`. This dynamic instance can be used to perform operations if the instance with this key exists
    on the server.

- title: 'Example 4: Create an instance for a CIM class of a specific namespace'
  code: |-
    $class = Get-CimClass -ClassName MSFT_Something -Namespace root/somewhere
    New-CimInstance -CimClass $class -Property @{"Prop1"=1;"Prop2"="value"} -ClientOnly
  description: |-
    In this example, using the **CimClass** parameter instead of the **ClassName** parameter validates
    that **Prop1** and **Prop2** actually exist and that the keys are marked correctly.

    You cannot use the **ComputerName** or **CimSession** parameter with the **ClientOnly** parameter.
  summary: |+
    This example gets an instance of a CIM class named **MSFT_Something** in the namespace
    **root/somewhere** and stores it in a variable named `$class`. The variable is passed to the
    `New-CimInstance` cmdlet to create a new CIM instance and perform client side validations on the new
    instance.

parameters:
- type: <xref href="Microsoft.Management.Infrastructure.CimClass" data-throw-if-not-resolved="False" />
  name: CimClass
  isRequired: true
  description: |+
    Specifies a CIM class object that represents the type of the instance. Use the `Get-CimClass` cmdlet
    to retrieve the class declaration from a computer. Using this parameter results in better client
    side schema validations.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Management.Infrastructure.CimSession" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CimSession
  isRequired: true
  description: |+
    Runs the command using the specified CIM session. Enter a variable that contains the CIM session, or
    a command that creates or gets the CIM session, such as the `New-CimSession` or `Get-CimSession`
    cmdlets. For more information, see
    [about_CimSession](../Microsoft.PowerShell.Core/About/about_CimSession.md).

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ClassName
  isRequired: true
  description: |+
    Specifies the name of the CIM class of which the operation creates an instance. NOTE: You can use
    tab completion to browse the list of classes, because PowerShell gets a list of classes from the
    local WMI server to provide a list of class names.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ClientOnly
  description: |+
    Indicates that the instance is only created in PowerShell without going to the CIM server. You can
    use this parameter to create an in-memory CIM instance for use in subsequent PowerShell operations.

  defaultValue: None
  position: Named
  aliases: Local
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ComputerName
  description: |+
    Specifies the name of the computer on which you want to run the CIM operation. You can specify a
    fully qualified domain name (FQDN), a NetBIOS name, or an IP address.

    If you specify this parameter, the cmdlet creates a temporary session to the specified computer
    using the WSMan protocol.

    If you do not specify this parameter, the cmdlet performs the operation on the local computer using
    Component Object Model (COM).

    If multiple operations are being performed on the same computer, connecting using a CIM session
    gives better performance.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: CN, ServerName
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Key
  description: |+
    Specifies the properties that are used as keys. **CimSession** and **ComputerName** cannot be used
    when **Key** is specified.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Namespace
  description: |+
    Specifies the namespace of the class for the new instance. The default namespace is **root/cimv2**.
    You can use tab completion to browse the list of namespaces, because PowerShell gets a list of
    namespaces from the local WMI server to provide the list of namespaces.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.UInt32" data-throw-if-not-resolved="False" />
  name: OperationTimeoutSec
  description: |+
    Specifies the amount of time that the cmdlet waits for a response from the CIM server. By default,
    the value of this parameter is 0, which means that the cmdlet uses the default timeout value for the
    server. If the **OperationTimeoutSec** parameter is set to a value less than the robust connection retry
    timeout of 3 minutes, network failures that last more than the value of the **OperationTimeoutSec**
    parameter are not recoverable, because the operation on the server times out before the client can
    reconnect.

  defaultValue: None
  position: Named
  aliases: OT
  parameterValueGroup: ""
- type: <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="False" />
  name: Property
  description: |+
    Specifies the properties of the CIM instance using a hash table (name-value pairs).

    If you specify the **CimClass** parameter, then the `New-CimInstance` cmdlet performs a property
    validation on the client to make sure that the properties specified are consistent with the class
    declaration on the server. If the **CimClass** parameter is not specified, then the property
    validation is done on the server.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: Arguments
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: ResourceUri
  isRequired: true
  description: |+
    Specifies the resource uniform resource identifier (URI) of the resource class or instance. The URI
    is used to identify a specific type of resource, such as disks or processes, on a computer.

    A URI consists of a prefix and a path to a resource. For example:

    `http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk`

    `http://intel.com/wbem/wscim/1/amt-schema/1/AMT_GeneralSettings`

    By default, if you do not specify this parameter, the DMTF standard resource URI
    `http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/` is used and the class name is appended to it.

    **ResourceURI** can only be used with CIM sessions created using the WSMan protocol, or when
    specifying the **ComputerName** parameter, which creates a CIM session using WSMan. If you specify
    this parameter without specifying the **ComputerName** parameter, or if you specify a CIM session
    created using DCOM protocol, you will get an error, because the DCOM protocol does not support the
    **ResourceURI** parameter.

    If both the **ResourceUri** parameter and the **Filter** parameter are specified, the **Filter**
    parameter is ignored.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: CimCmdlets.New-CimInstance
name: New-CimInstance
description: |-
  The `New-CimInstance` cmdlet creates an instance of a CIM class based on the class definition on
  either the local computer or a remote computer. By default, the `New-CimInstance` cmdlet creates an
  instance on the local computer.
metadata:
  external help file: Microsoft.Management.Infrastructure.CimCmdlets.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: CimCmdlets
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/cimcmdlets/new-ciminstance?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: New-CimInstance
