### YamlMime:PowershellCmdlet
summary: |-
  Verifies that a module manifest file accurately describes the contents of a module.
module: Microsoft.PowerShell.Core
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe the path to a module manifest to this cmdlet.
outputs:
- name: <xref href="System.Management.Automation.PSModuleInfo" data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns a **PSModuleInfo** object that represents the module.
    It returns this object even if the manifest has errors.
links:
- text: Export-ModuleMember
  href: Export-ModuleMember.yml
- text: Get-Module
  href: Get-Module.yml
- text: Import-Module
  href: Import-Module.yml
- text: New-Module
  href: New-Module.yml
- text: New-ModuleManifest
  href: New-ModuleManifest.yml
- text: Remove-Module
  href: Remove-Module.yml
- text: about_Modules
  href: About/about_Modules.md
syntaxes:
- Test-ModuleManifest [-Path] <String> [<CommonParameters>]
examples:
- title: 'Example 1: Test a manifest'
  code: |-
    test-ModuleManifest -Path "$pshome\Modules\TestModule.psd1"
  description: |-
    This command tests the TestModule.psd1 module manifest.
  summary: ""
- title: 'Example 2: Test a manifest by using the pipeline'
  code: |-
    "$pshome\Modules\TestModule.psd1" | test-modulemanifest

    Test-ModuleManifest : The specified type data file 'C:\Windows\System32\Wi
    ndowsPowerShell\v1.0\Modules\TestModule\TestTypes.ps1xml' could not be processed because the file was not found. Please correct the path and try again.
    At line:1 char:34
    + "$pshome\Modules\TestModule.psd1" | test-modulemanifest <<<<
    + CategoryInfo          : ResourceUnavailable: (C:\Windows\System32\WindowsPowerShell\v1.0\Modules\TestModule\TestTypes.ps1xml:String) [Test-ModuleManifest], FileNotFoundException
    + FullyQualifiedErrorId : Modules_TypeDataFileNotFound,Microsoft.PowerShell.Commands.TestModuleManifestCommandName

    Name              : TestModule
    Path              : C:\Windows\system32\WindowsPowerShell\v1.0\Modules\TestModule\TestModule.psd1
    Description       :
    Guid              : 6f0f1387-cd25-4902-b7b4-22cff6aefa7b
    Version           : 1.0
    ModuleBase        : C:\Windows\system32\WindowsPowerShell\v1.0\Modules\TestModule
    ModuleType        : Manifest
    PrivateData       :
    AccessMode        : ReadWrite
    ExportedAliases   : {}
    ExportedCmdlets   : {}
    ExportedFunctions : {}
    ExportedVariables : {}
    NestedModules     : {}
  description: |-
    This command uses a pipeline operator (|) to send a path string to **Test-ModuleManifest**.

    The command output shows that the test failed, because the TestTypes.ps1xml file, which was listed in the manifest, was not found.
  summary: ""
- title: 'Example 3: Write a function to test a module manifest'
  code: |-
    function Test-ManifestBool ($path)

    {$a = dir $path | Test-ModuleManifest -ErrorAction SilentlyContinue; $?}
  description: |-
    This function is like **Test-ModuleManifest**, but it returns a Boolean value.
    The function returns $True if the manifest passed the test and $False otherwise.

    The function uses the Get-ChildItem cmdlet, alias = dir, to get the module manifest specified by the $path variable.
    The command uses a pipeline operator (|) to pass the file object to **Test-ModuleManifest**.

    **Test-ModuleManifest** uses the *ErrorAction* common parameter with a value of SilentlyContinue to suppress the display of any errors that the command generates.
    It also saves the **PSModuleInfo** object that **Test-ModuleManifest** returns in the $a variable.
    Therefore, the object is not displayed.

    Then, in a separate command, the function displays the value of the $?
    automatic variable.
    If the previous command generates no error, the command displays $True, and $False otherwise.

    You can use this function in conditional statements, such as those that might precede an **Import-Module** command or a command that uses the module.
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies a path and file name for the manifest file.
    Enter an optional path and name of the module manifest file that has the .psd1 file name extension.
    The default location is the current directory.
    Wildcard characters are supported, but must resolve to a single module manifest file.
    This parameter is required.
    You can also pipe a path to **Test-ModuleManifest**.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Core.Test-ModuleManifest
name: Test-ModuleManifest
description: |-
  The **Test-ModuleManifest** cmdlet verifies that the files that are listed in the module manifest (.psd1) file are actually in the specified paths.

  This cmdlet is designed to help module authors test their manifest files.
  Module users can also use this cmdlet in scripts and commands to detect errors before they run scripts that depend on the module.

  **Test-ModuleManifest** returns an object that represents the module.
  This is the same type of object that Get-Module returns.
  If any files are not in the locations specified in the manifest, the cmdlet also generates an error for each missing file.
metadata:
  external help file: System.Management.Automation.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Core
  ms.date: 06/09/2017
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.core/test-modulemanifest?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-ModuleManifest
