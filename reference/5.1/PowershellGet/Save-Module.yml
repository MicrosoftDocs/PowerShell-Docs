### YamlMime:PowershellCmdlet
summary: |-
  Saves a module and its dependencies on the local computer but doesn't install the module.
module: PowerShellGet
notes: |-
  > [!IMPORTANT]
  > As of April 2020, the PowerShell Gallery no longer supports Transport Layer Security (TLS)
  > versions 1.0 and 1.1. If you are not using TLS 1.2 or higher, you will receive an error when
  > trying to access the PowerShell Gallery. Use the following command to ensure you are using TLS
  > 1.2:
  >
  > `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`
  >
  > For more information, see the
  > [announcement](https://devblogs.microsoft.com/powershell/powershell-gallery-tls-support/) in the
  > PowerShell blog.
syntaxes:
- >-
  Save-Module [-Name] <String[]> [-MinimumVersion <String>] [-MaximumVersion <String>]

   [-RequiredVersion <String>] [-Repository <String[]>] [-Path] <String> [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-Credential <PSCredential>] [-Force] [-AllowPrerelease]

   [-AcceptLicense]  [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Save-Module [-Name] <String[]> [-MinimumVersion <String>] [-MaximumVersion <String>]

   [-RequiredVersion <String>] [-Repository <String[]>] -LiteralPath <String> [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-Credential <PSCredential>] [-Force] [-AllowPrerelease]

   [-AcceptLicense]  [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Save-Module [-InputObject] <PSObject[]> -LiteralPath <String> [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-Credential <PSCredential>] [-Force] [-AcceptLicense] [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  Save-Module [-InputObject] <PSObject[]> [-Path] <String> [-Proxy <Uri>]

   [-ProxyCredential <PSCredential>] [-Credential <PSCredential>] [-Force] [-AcceptLicense] [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Save a module'
  code: |-
    Save-Module -Name PowerShellGet -Path C:\Test\Modules -Repository PSGallery
    Get-ChildItem -Path C:\Test\Modules

    Directory: C:\Test\Modules

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    d-----         7/1/2019     13:31                PackageManagement
    d-----         7/1/2019     13:31                PowerShellGet
  description: |-
    `Save-Module` uses the **Name** parameter to specify the module, **PowerShellGet**. The **Path**
    parameter specifies where to store the downloaded module. The **Repository** parameter specifies a
    registered repository, **PSGallery**. After the download is finished, `Get-ChildItem` displays the
    contents of **Path** where the files are stored.
  summary: |+
    In this example, a module and its dependencies are saved to the local computer.

- title: 'Example 2: Save a specific version of a module'
  code: |-
    Save-Module -Name PowerShellGet -Path C:\Test\Modules -Repository PSGallery -MaximumVersion 2.1.0
    Get-ChildItem -Path C:\Test\Modules\PowerShellGet\

    Directory: C:\Test\Modules\PowerShellGet

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    d-----         7/1/2019     13:40                2.1.0
  description: |-
    `Save-Module` uses the **Name** parameter to specify the module, **PowerShellGet**. The **Path**
    parameter specifies where to store the downloaded module. The **Repository** parameter specifies a
    registered repository, **PSGallery**. **MaximumVersion** specifies that version **2.1.0** is
    downloaded and saved. After the download is finished, `Get-ChildItem` displays the contents of
    **Path** where the files are stored.
  summary: |+
    This example shows how to use a parameter such as **MaximumVersion**, or **RequiredVersion** to
    specify a module version.

- title: 'Example 3: Find and save a specific version of a module'
  code: |-
    Find-Module -Name PowerShellGet -Repository PSGallery -RequiredVersion 1.6.5 |
      Save-Module -Path C:\Test\Modules
    Get-ChildItem -Path C:\Test\Modules\PowerShellGet

    Directory: C:\Test\Modules\PowerShellGet

    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    d-----         7/1/2019     14:04                1.6.5
  description: |-
    `Find-Module` uses the **Name** parameter to specify the module, **PowerShellGet**. The
    **Repository** parameter specifies a registered repository, **PSGallery**. **RequiredVersion**
    specifies version **1.6.5**.

    The object is sent down the pipeline to `Save-Module`. The **Path** parameter specifies where to
    store the downloaded module. After the download is finished, `Get-ChildItem` displays the contents
    of **Path** where the files are stored.
  summary: |+
    In this example, a required module version is found in the repository and saved to the local
    computer.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AcceptLicense
  description: |+
    Automatically accept the license agreement if the package requires it.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowPrerelease
  description: |+
    Allows you to save a module marked as a prerelease.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the `Save-Module`.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user account that has rights to save a module.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces `Save-Module` to run without asking for user confirmation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Accepts a **PSRepositoryItemInfo** object. For example, output `Find-Module` to a variable and use
    that variable as the **InputObject** argument.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LiteralPath
  isRequired: true
  description: |+
    Specifies a path to one or more locations. The value of the **LiteralPath** parameter is used
    exactly as entered. No characters are interpreted as wildcards. If the path includes escape
    characters, enclose them in single quotation marks. PowerShell does not interpret any characters
    enclosed in single quotation marks as escape sequences.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum, or newest, version of the module to save. The **MaximumVersion** and
    **RequiredVersion** parameters can't be used in the same command.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum version of a single module to save. You cannot add this parameter if you are
    attempting to install multiple modules. The **MinimumVersion** and **RequiredVersion** parameters
    can't be used in the same command.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies an array of names of modules to save.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the location on the local computer to store a saved module. Accepts wildcard characters.

  defaultValue: None
  acceptWildcardCharacters: true
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Uri" data-throw-if-not-resolved="False" />
  name: Proxy
  description: |+
    Specifies a proxy server for the request, rather than connecting directly to the internet resource.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: ProxyCredential
  description: |+
    Specifies a user account that has permission to use the proxy server that is specified by the **Proxy** parameter.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Repository
  description: |+
    Specifies the friendly name of a repository that has been registered by running
    `Register-PSRepository`. Use `Get-PSRepository` to display registered repositories.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact version number of the module to save.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the `Save-Module` runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PowerShellGet.Save-Module
name: Save-Module
description: |-
  The `Save-Module` cmdlet downloads a module and any dependencies from a registered repository.
  `Save-Module` downloads and saves the most current version of a module. The files are saved to a
  specified path on the local computer. The module isn't installed, but the contents are available for
  inspection by an administrator. The saved module can then be copied into the appropriate
  `$env:PSModulePath` location of the offline machine.

  `Get-PSRepository` displays the local computer's registered repositories. You can use the
  `Find-Module` cmdlet to search registered repositories.
metadata:
  external help file: PSModule-help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PowerShellGet
  ms.date: 11/11/2019
  online version: https://docs.microsoft.com/powershell/module/powershellget/save-module?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Save-Module
