### YamlMime:PowershellCmdlet
summary: |-
  Uninstalls a script.
module: PowerShellGet
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: |-
    `Uninstall-Script` accepts **PSRepositoryItemInfo** objects from the pipeline.
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Find-Script
  href: Find-Script.yml
- text: Install-Script
  href: Install-Script.yml
- text: Publish-Script
  href: Publish-Script.yml
- text: Save-Script
  href: Save-Script.yml
- text: Update-Script
  href: Update-Script.yml
syntaxes:
- >-
  Uninstall-Script [-Name] <String[]> [-MinimumVersion <String>] [-RequiredVersion <String>]

   [-MaximumVersion <String>] [-Force] [-AllowPrerelease] [-WhatIf] [-Confirm] [<CommonParameters>]
- Uninstall-Script [-InputObject] <PSObject[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Uninstall a script'
  code: |-
    Uninstall-Script -Name UpdateManagement-Template
  description: |-
    `Uninstall-Script` uses the **Name** parameter to specify the script to uninstall from the local
    computer.
  summary: |+
    This example uninstalls a script.

- title: 'Example 2: Use the pipeline to uninstall a script'
  code: |-
    Get-InstalledScript -Name UpdateManagement-Template | Uninstall-Script
  description: |-
    `Get-InstalledScript` uses the **Name** parameter to specify the script. The object is sent down the
    pipeline to `Uninstall-Script` and the script is uninstalled.
  summary: |+
    In this example, the pipeline is used to uninstall a script.

parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AllowPrerelease
  description: |+
    Allows you to uninstall a script marked as a prerelease.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running `Uninstall-Script`.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces `Uninstall-Script` to run without asking for user confirmation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Accepts a **PSRepositoryItemInfo** object. For example, output `Get-InstalledScript` to a variable
    and use that variable as the **InputObject** argument.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MaximumVersion
  description: |+
    Specifies the maximum, or newest, version of the script to uninstall. The **MaximumVersion** and
    **RequiredVersion** parameters can't be used in the same command.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: MinimumVersion
  description: |+
    Specifies the minimum version of the script to uninstall. The **MinimumVersion** and
    **RequiredVersion** parameters can't be used in the same command.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Name
  isRequired: true
  description: |+
    Specifies an array of script names to uninstall.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: RequiredVersion
  description: |+
    Specifies the exact version number of the script to uninstall.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if `Uninstall-Script` runs. The cmdlet isn't run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: PowerShellGet.Uninstall-Script
name: Uninstall-Script
description: |-
  The `Uninstall-Script` cmdlet uninstalls a specified script from the local computer.
metadata:
  external help file: PSModule-help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: PowerShellGet
  ms.date: 07/03/2019
  online version: https://docs.microsoft.com/powershell/module/powershellget/uninstall-script?view=powershell-5.1&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Uninstall-Script
